{
    "version": "https://jsonfeed.org/version/1",
    "title": "forget-me-not",
    "subtitle": "",
    "icon": "https://maikire.xyz/images/favicon.ico",
    "description": "",
    "home_page_url": "https://maikire.xyz",
    "items": [
        {
            "id": "https://maikire.xyz/2025/08/20/Unity/UnityFramework/%E8%A1%8C%E4%B8%BA%E6%A0%91/",
            "url": "https://maikire.xyz/2025/08/20/Unity/UnityFramework/%E8%A1%8C%E4%B8%BA%E6%A0%91/",
            "title": "行为树",
            "date_published": "2025-08-20T04:00:00.000Z",
            "content_html": "<h1 id=\"观前提醒\"><a class=\"anchor\" href=\"#观前提醒\">#</a> 观前提醒</h1>\n<p>项目会在 GitHub 中开源，链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01haWtpcmUvVW5pdHkvdHJlZS9tYWluL1VuaXR5RnJhbWV3b3JrL0JlaGF2aW9yVHJlZQ==\">https://github.com/Maikire/Unity/tree/main/UnityFramework/BehaviorTree</span></p>\n<h1 id=\"行为树behavior-tree\"><a class=\"anchor\" href=\"#行为树behavior-tree\">#</a> 行为树（Behavior Tree）</h1>\n<p>行为树（Behavior Tree, BT）是一种在游戏开发（尤其是 AI）、机器人控制、自动化系统等领域广泛使用的任务建模和执行框架。它以其高度模块化、可读性强、易于设计和调试的特性，成为替代或补充传统状态机（FSM）和分层状态机（HFSM）的流行选择。</p>\n<p>行为树是一种树状的结构，从根节点开始执行，自顶向下，从左到右：执行流通常从根节点开始，按照特定的顺序遍历子节点。控制节点根据其类型和子节点的返回状态决定下一步执行哪个节点。</p>\n<p>行为树与有限状态机的对比</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">行为树 (BT)</th>\n<th style=\"text-align:left\">状态机 (FSM)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">结构</td>\n<td style=\"text-align:left\">层次化树形结构</td>\n<td style=\"text-align:left\">节点（状态）和边（转换）构成的图</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">逻辑组织</td>\n<td style=\"text-align:left\">控制流（顺序、选择、并行）</td>\n<td style=\"text-align:left\">状态和转换条件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复用性</td>\n<td style=\"text-align:left\">高 (节点、子树高度复用)</td>\n<td style=\"text-align:left\">中 / 低 (状态逻辑容易粘连)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可读性</td>\n<td style=\"text-align:left\">高 (树形结构直观，尤其可视化后)</td>\n<td style=\"text-align:left\">中 (状态多时转换线可能混乱)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">调试</td>\n<td style=\"text-align:left\">较易 (运行时可视化执行路径)</td>\n<td style=\"text-align:left\">较难 (跟踪状态转换历史)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">动态响应</td>\n<td style=\"text-align:left\">高 (每次 Tick 重新评估条件)</td>\n<td style=\"text-align:left\">中 (依赖状态转换条件触发)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">长任务</td>\n<td style=\"text-align:left\">内建支持 (Running 状态)</td>\n<td style=\"text-align:left\">需手动管理 (状态内维护计时器等)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复杂度</td>\n<td style=\"text-align:left\">节点类型多，但逻辑分散</td>\n<td style=\"text-align:left\">状态数量可能爆炸，转换条件复杂</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">适用场景</td>\n<td style=\"text-align:left\">复杂决策逻辑、任务导向 AI、需要高度模块化和复用性</td>\n<td style=\"text-align:left\">状态明确、转换相对简单、对性能要求苛刻</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"行为树设计\"><a class=\"anchor\" href=\"#行为树设计\">#</a> 行为树设计</h1>\n<h2 id=\"核心节点\"><a class=\"anchor\" href=\"#核心节点\">#</a> 核心节点</h2>\n<p>行为树的核心节点类型</p>\n<ul>\n<li>Composite 组合节点\n<ul>\n<li>这些节点负责控制子节点的执行流程</li>\n<li>包括：选择节点、顺序节点、并行节点、优先级节点</li>\n<li>例如：选择（Selector）节点，实现 “或” 的逻辑</li>\n</ul>\n</li>\n<li>Decorator 装饰节点\n<ul>\n<li>这些节点只包含一个子节点，用来修改它的行为或结果</li>\n<li>包括：反转节点、重复节点、计时节点、限制节点、过滤节点、成功节点、失败节点</li>\n<li>例如：过滤（Filter）节点，需要先检查条件，以此决定是否执行子节点</li>\n</ul>\n</li>\n<li>Condition 条件节点\n<ul>\n<li>条件节点检查某个条件是否成立，例如 “是否看到敌人”、“是否血量小于 50%” 等</li>\n</ul>\n</li>\n<li>Behavior 行为节点\n<ul>\n<li>这些是真正执行动作的节点，比如：“移动到某个点”、“播放动画”、“攻击” 等</li>\n</ul>\n</li>\n<li>根节点\n<ul>\n<li>树的起点，唯一的节点（通常是 Selector）</li>\n</ul>\n</li>\n</ul>\n<p>每个节点在执行后会返回四个结果之一，行为树系统会根据这些返回值来判断下一步该做什么：</p>\n<ul>\n<li>Success：节点任务成功完成</li>\n<li>Failure：节点任务失败</li>\n<li>Running：节点任务需要更多时间才能完成（正在执行中）\n<ul>\n<li>下次会继续从这个节点开始执行（或由其父节点决定），而不是每次都从根节点开始。这是行为树管理长时间任务的核心机制。</li>\n</ul>\n</li>\n<li>Abort：强制中断所有节点，用于处理紧急情况或高优先级节点</li>\n</ul>\n<p>假设有个敌人 AI，它的行为逻辑是：</p>\n<ul>\n<li>如果看见玩家，就追击</li>\n<li>否则就在原地巡逻</li>\n</ul>\n<p>用行为树来描述就是：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Selector</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── Filter</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│   ├── Condition: 看见玩家</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│   └── Behavior: 追击</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>└── Behavior: 巡逻</pre></td></tr></table></figure><h2 id=\"重要结构-栈\"><a class=\"anchor\" href=\"#重要结构-栈\">#</a> 重要结构 - 栈</h2>\n<p>树的遍历经常需要使用栈这个结构，行为树也是如此</p>\n<p>行为树的执行过程在结构上非常接近树的先根遍历</p>\n<ul>\n<li>因为行为树每一帧的执行流程，大致是：\n<ol>\n<li>先访问当前节点（父节点）</li>\n<li>然后依次遍历并执行它的每一个子节点（从左到右）</li>\n<li>遇到某些特殊控制节点（如 Selector 或 Sequence），根据子节点返回值决定是否继续往下遍历或中止</li>\n</ol>\n</li>\n<li>这和先根遍历（父节点 → 子节点）逻辑一致</li>\n</ul>\n<h2 id=\"重要结构-黑板\"><a class=\"anchor\" href=\"#重要结构-黑板\">#</a> 重要结构 - 黑板</h2>\n<p>它是一个共享的数据存储区域（通常是键值对容器或结构体，但是在 CSharp 中使用类会更方便），被行为树中的所有节点访问和修改。用于存储和传递各类数据</p>\n<ul>\n<li>行为树节点数据（节点栈、根节点、当前节点）</li>\n<li>AI 实体的状态（位置、生命值、目标）</li>\n<li>感知信息（最近看到的敌人、听到的声音位置）</li>\n<li>临时任务数据（移动的目标点、要攻击的对象）</li>\n<li>节点间通信，避免了节点之间直接耦合</li>\n</ul>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<h2 id=\"数据类\"><a class=\"anchor\" href=\"#数据类\">#</a> 数据类</h2>\n<p><span class=\"label info\">节点状态</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 行为树节点返回的状态</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">BTState</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 成功</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Success<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 失败</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Failure<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// 运行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Running<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// 中断</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Abort<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">自动寻路的模式</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// 寻路模式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span>Serializable<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">BTPatrolModes</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"无（在巡逻节点返回 失败）\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        None<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"单次\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Once<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"循环\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Loop<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"往返\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        RoundTrip<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">过滤结构</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 过滤结构</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTFilter</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 条件节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConditionNode</span> condition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">黑板（Blackboard）</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Character</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">SkillSystem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// 行为树数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">[</span>Serializable<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BTBlackboard</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"行为树数据\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BTAsset</span> nodeAsset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"移动速度\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> moveSpeed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"视野距离\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> viewDistance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"视野角度\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> viewAngle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"可以被发现的目标的标签\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> targetTags <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Player\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入攻击节点的距离\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> attackNodeDistance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"攻击时间间隔\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> attackTimeInterval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"判断是否到达路点的偏移量\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> patrolEffect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"寻路模式\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BTPatrolModes</span> patrolMode <span class=\"token operator\">=</span> BTPatrolModes<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"巡逻的路点\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Transform<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> wayPoints<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部中断条件\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> interruptions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"节点栈\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span> nodeStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"优先级节点\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BTNode</span> priorityNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"根节点\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BTNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">/// 当前节点</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">BTNode</span> Current</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">get</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">return</span> nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"角色的信息\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharacterStatus</span> character<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"角色的动画\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animator</span> anim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"发现的目标\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Transform<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> foundTargets<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"技能系统\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharacterSkillSystemNPC</span> npcSkill<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前的技能\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">SkillData</span> currentSkill<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">配置文件采用 ScriptableObject</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 行为树配置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token function\">CreateAssetMenu</span><span class=\"token punctuation\">(</span>menuName <span class=\"token operator\">=</span> <span class=\"token string\">\"Behavior Tree Asset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BTAsset</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ScriptableObject</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"行为树的节点配置\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TextArea</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"节点基类\"><a class=\"anchor\" href=\"#节点基类\">#</a> 节点基类</h2>\n<ul>\n<li>BTNode 作为所有节点的基类，包括共有的属性和方法</li>\n<li>提供节点状态属性</li>\n<li>提供进入节点、运行节点、退出节点、中断节点的方法</li>\n<li>统一控制入栈和出栈</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 行为树节点的基类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BTNode</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 当前节点的执行状态</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">BTState</span> State <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 进入节点时执行一次</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/// 行为树节点的执行方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/// 运行结束时执行一次</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">/// 中断节点的执行</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>根据核心节点的类型进一步细分为三类：控制节点、行为节点、条件节点</li>\n<li>控制节点：组合节点和装饰节点的父类。提供添加子节点的方法，便于构建行为树</li>\n<li>行为节点：提供行为节点特有的字段、属性、方法</li>\n<li>条件节点：提供特有的条件属性，简化具体条件节点的代码</li>\n</ul>\n<p><span class=\"label info\">控制节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 控制节点（用于控制子节点的执行）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ControlNodes</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BTNode</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 添加子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"child\">&lt;/param></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// 添加过滤器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"condition\">&lt;/param></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"child\">&lt;/param></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTFilter</span> filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">行为节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 行为节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BehaviorNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BTNode</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">///true: 搜索目标时忽略墙体</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IgnoreWalls <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">条件节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 条件节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConditionNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BTNode</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 条件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span>BehaviorTree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> Condition <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Condition<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"组合节点\"><a class=\"anchor\" href=\"#组合节点\">#</a> 组合节点</h2>\n<ul>\n<li>选择节点：像 “或者”，从头到尾尝试子节点，直到有一个成功就返回成功</li>\n<li>顺序节点：像 “并且”，从头到尾依次执行子节点，一旦失败就返回失败</li>\n<li>并行节点：所有子节点都会依次执行一次</li>\n<li>优先级节点：独立于行为树，不在根节点及其子节点下，不可中断，每轮都会检测，成功时中断其他所有节点，执行优先级节点\n<ul>\n<li>需要中断栈中所有的节点，所以它本身不能入栈</li>\n<li>不论上次返回的状态是什么，优先级节点每帧都会从头开始依次执行过滤，如果优先级节点有多个子节点（过滤结构），那么先判断的节点会将后判断的节点打断（例如：死亡节点和攻击节点都在优先级节点中，并且死亡节点排在前。此时，即使攻击节点处于 Running 状态，死亡节点也会先判断，并在通过时将攻击节点中断）</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"label info\">选择节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 选择节点（只要一个子节点成功就算成功）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SelectorNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// 当前子节点索引</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">SelectorNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">&lt;</span> children<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">顺序节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 顺序节点（全部成功才算成功）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SequenceNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// 当前子节点索引</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">SequenceNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">&lt;</span> children<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">并行节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 并行节点（所有子节点都会依次执行一次）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParallelNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// 当前子节点索引</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">ParallelNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">&lt;</span> children<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">优先级节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 优先级节点（独立于行为树，不在根节点及其子节点下，不可中断，每轮都会检测，成功时中断其他所有节点，执行优先级节点）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 过滤结构列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>BTFilter<span class=\"token punctuation\">></span></span> filters<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// 是否执行过子节点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">PriorityNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            filters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>BTFilter<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTFilter</span> filter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            filters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> filters<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>condition<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        bt<span class=\"token punctuation\">.</span><span class=\"token function\">AbortAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        item<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    State <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token comment\">// 优先级节点不会被低级节点打断，所以这里不需要处理中断</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        item<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">return</span> State<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isTickedChild<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        item<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"装饰节点\"><a class=\"anchor\" href=\"#装饰节点\">#</a> 装饰节点</h2>\n<ul>\n<li>反转节点：如果子节点成功，返回失败；如果子节点失败，返回成功</li>\n<li>重复节点：重复执行子节点</li>\n<li>计时节点：用于控制子节点处于 Running 状态的时间</li>\n<li>限制节点：限制子节点的总执行次数</li>\n<li>过滤节点：每次执行都会先进行条件判断，以此决定是否执行子节点</li>\n<li>成功节点：即使子节点返回失败，该节点也会返回成功</li>\n<li>失败节点：即使子节点返回成功，该节点也会返回失败</li>\n</ul>\n<p><span class=\"label info\">反转节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 反转节点（如果子节点成功，返回失败；如果子节点失败，返回成功）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InverterNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">重复节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 重复节点（重复执行子节点）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RepeaterNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 子节点状态</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTState</span> childState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">RepeaterNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            childState <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childState <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            childState <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>childState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">计时节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 计时节点（用于控制子节点处于 Running 状态的时间）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimingNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// 最大时间</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> maxTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// 当前时间</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">TimingNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            currentTime <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">&lt;</span> maxTime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                        currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">限制节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 限制节点（限制子节点的总执行次数）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LimiterNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 次数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> limitCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// 当前次数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">LimiterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> limitCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limitCount <span class=\"token operator\">=</span> limitCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            currentCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentCount <span class=\"token operator\">&lt;</span> limitCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        currentCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        currentCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">过滤节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 过滤节点（每次执行都会先进行条件判断）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 过滤结构</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTFilter</span> filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 是否执行过子节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTFilter</span> filter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span>condition<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    filter<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                State <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        filter<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        filter<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        filter<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        filter<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isTickedChild<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    filter<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            isTickedChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">成功节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 成功节点（即使子节点返回失败，该节点也会返回成功）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SuccessNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">SuccessNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">失败节点</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 失败节点（即使子节点返回成功，该节点也会返回失败）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FailureNode</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControlNodes</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 子节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">FailureNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BTNode</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                child<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            State <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>State<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">case</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Abort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    child<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">return</span> State <span class=\"token operator\">=</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"创建工厂\"><a class=\"anchor\" href=\"#创建工厂\">#</a> 创建工厂</h2>\n<p><span class=\"label info\">配置规则</span></p>\n<ul>\n<li>用 [number] 标识一个节点，例如： <code>SelectorNode[0]</code></li>\n<li>行为节点命名规则：{name} Behavior，例如： <code>IdleBehavior</code></li>\n<li>条件节命名规则：{name} Condition，例如： <code>FoundTargetCondition</code></li>\n<li>单独出现的节点（后面没有箭头）表示根节点，例如： <code>SelectorNode[0]</code></li>\n<li>SelectorNode 配置示例（ParallelNode、SequenceNode 同理）<br />\n <code>SelectorNode[0]-&gt;SelectorNode[1]</code> <br />\n <code>SelectorNode[1]-&gt;IdleBehavior[0]</code></li>\n<li>PriorityNode 包含多个过滤结构，不能作为其他节点的子节点，不需要单独声明，并且唯一，配置示例（FilterNode 仅有一个过滤结构）<br />\n <code>PriorityNode[0]-&gt;&#123;DeathCondition[0],DeadBehavior[0]&#125;</code> <br />\n <code>PriorityNode[0]-&gt;&#123;FoundTargetCondition[0],AttackBehavior[0]&#125;</code></li>\n<li>InverterNode 配置示例（其他常规装饰节点同理）<br />\n <code>InverterNode[0]-&gt;FoundTargetCondition[0]</code> <br />\n <code>InverterNode[1]-&gt;IdleBehavior[0]</code></li>\n<li>LimiterNode 在第一次声明时需要输入参数，格式 {5}，配置示例（TimingNode 同理）<br />\n <code>SelectorNode[0]-&gt;LimiterNode[0]&#123;5&#125;</code> <br />\n <code>LimiterNode[0]-&gt;IdleBehavior[0] 或 LimiterNode[0]&#123;5&#125;-&gt;IdleBehavior[0]</code></li>\n<li>想要共用同一个节点，只需要在配置时保持节点名和标记都相同即可</li>\n</ul>\n<p><span class=\"label info\">创建工厂</span></p>\n<ul>\n<li>使用<a href=\"https://maikire.xyz/2025/01/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/\">正则表达式</a>检查配置是否正确</li>\n<li>使用反射创建对象</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Common</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>RegularExpressions</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// 节点创建工厂</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BTCreateFactory</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 节点映射表，存储所有节点实例</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> BTNode<span class=\"token punctuation\">></span></span> nodeDic<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// Type 缓存</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Type<span class=\"token punctuation\">></span></span> typeCache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/// 根节点的键值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> rootID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/// 优先级节点的键值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> priorityID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">static</span> <span class=\"token function\">BTCreateFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            nodeDic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> BTNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            typeCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Type<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            rootID <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            priorityID <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">/// 构建行为树</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"config\"> 配置 & lt;/param></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"root\"> 根节点 & lt;/param></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"priorityNode\"> 优先级节点 & lt;/param></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BuildBehaviorTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> config<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">BTNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">BTNode</span> priorityNode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            nodeDic<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            typeCache<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            rootID <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            priorityID <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            ConfigReader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> ReadLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            root <span class=\"token operator\">=</span> nodeDic<span class=\"token punctuation\">[</span>rootID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>priorityID <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                priorityNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PriorityNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                priorityNode <span class=\"token operator\">=</span> nodeDic<span class=\"token punctuation\">[</span>priorityID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">/// 读取一行配置</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"line\">&lt;/param></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> line<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> parts <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PriorityNode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>priorityID <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        priorityID <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>priorityID <span class=\"token operator\">!=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"多个优先级节点: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">line</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token class-name\">ControlNodes</span> control <span class=\"token operator\">=</span> <span class=\"token function\">CreateNode</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ControlNodes</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PriorityNode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"优先级节点不能作为子节点: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">line</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    <span class=\"token class-name\">BTFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token function\">CreateFilter</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    control<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    <span class=\"token class-name\">BTNode</span> node <span class=\"token operator\">=</span> <span class=\"token function\">CreateNode</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    control<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootID <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"多个根节点: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">line</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                rootID <span class=\"token operator\">=</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                <span class=\"token function\">CreateNode</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">/// 获取类型</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"typeName\">&lt;/param></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token comment\">/// &lt;exception cref=\"Exception\">&lt;/exception></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Type</span> <span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> typeName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeCache<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token keyword\">return</span> typeCache<span class=\"token punctuation\">[</span>typeName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token class-name\">Type</span> type <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"找不到类型: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">typeName</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            typeCache<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token comment\">/// 创建节点</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"token\">&lt;/param></span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token comment\">/// &lt;exception cref=\"Exception\">&lt;/exception></span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">BTNode</span> <span class=\"token function\">CreateNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeDic<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                <span class=\"token keyword\">return</span> nodeDic<span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token class-name\">Match</span> match<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token class-name\">BTNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> nodeToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match <span class=\"token operator\">=</span> Regex<span class=\"token punctuation\">.</span><span class=\"token function\">Match</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"^([A-Za-z]+)\\\\[\\\\d+\\\\]$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                nodeToken <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                type <span class=\"token operator\">=</span> <span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"BehaviorTree.</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">nodeToken</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                node <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">BTNode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                nodeDic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match <span class=\"token operator\">=</span> Regex<span class=\"token punctuation\">.</span><span class=\"token function\">Match</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"^([A-Za-z]+)(\\\\[\\\\d+\\\\])\\\\&#123;([0-9]+(?:[.][0-9]+)&#123;0,1&#125;)\\\\&#125;$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>                nodeToken <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tagToken <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> parameterToken <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                type <span class=\"token operator\">=</span> <span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"BehaviorTree.</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">nodeToken</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>parameterToken<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>                    node <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> i <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">BTNode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>parameterToken<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                    node <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> f <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">BTNode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>                nodeDic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>nodeToken <span class=\"token operator\">+</span> tagToken<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"无效的格式: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">token</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token comment\">/// 创建过滤结构</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"token\">&lt;/param></span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">BTFilter</span> <span class=\"token function\">CreateFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>            <span class=\"token class-name\">Match</span> match <span class=\"token operator\">=</span> Regex<span class=\"token punctuation\">.</span><span class=\"token function\">Match</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"^\\\\&#123;([A-Za-z]+)\\\\[\\\\d+\\\\],([A-Za-z]+\\\\[\\\\d+\\\\](?:\\\\&#123;(?:[0-9]+(?:[.][0-9]+)&#123;0,1&#125;)\\\\&#125;)?)\\\\&#125;$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>match<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"无效的格式: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">token</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>            <span class=\"token class-name\">Type</span> type <span class=\"token operator\">=</span> <span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"BehaviorTree.</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">match<span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>            <span class=\"token class-name\">ConditionNode</span> cond <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ConditionNode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>            <span class=\"token class-name\">BTNode</span> node <span class=\"token operator\">=</span> <span class=\"token function\">CreateNode</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BTFilter</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>                condition <span class=\"token operator\">=</span> cond<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>                child <span class=\"token operator\">=</span> node</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"行为树脚本\"><a class=\"anchor\" href=\"#行为树脚本\">#</a> 行为树脚本</h2>\n<ul>\n<li>状态机会用到角色系统、技能系统、动画系统，本文用<a href=\"https://maikire.xyz/2023/05/20/Unity/UnityFramework/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ARPG%E8%A7%92%E8%89%B2%E6%A1%86%E6%9E%B6/\">这个角色框架</a>和<a href=\"https://maikire.xyz/2023/05/05/Unity/UnityFramework/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ARPG%E6%8A%80%E8%83%BD%E6%A1%86%E6%9E%B6/\">这个技能框架</a>为例</li>\n<li>初始化行为树</li>\n<li>为行为树提供入口</li>\n<li>为节点提供黑板</li>\n<li>使用<a href=\"https://maikire.xyz/2023/03/24/Unity/UnityToolClass/%E5%8F%98%E6%8D%A2%E7%BB%84%E4%BB%B6%E5%8A%A9%E6%89%8B%E7%B1%BB/\">变换组件助手类</a>搜索目标并更新黑板</li>\n<li>为行为节点提供基础的方法，例如：自动寻路</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Character</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Common</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">SkillSystem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>AI</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/// 行为树</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary>\t</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token function\">RequireComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">NavMeshAgent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CharacterStatus</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CharacterSkillSystemNPC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BehaviorTree</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 本文使用的是手动填写配置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 想要通过配置表自动填写数据，只需要额外写一个类实现读取和配置数据，然后在 ConfigBT () 中调用即可</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/// 行为树数据（黑板）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BTBlackboard</span> blackboard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/// 导航</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">NavMeshAgent</span> navigation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            blackboard<span class=\"token punctuation\">.</span>character <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CharacterStatus<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            blackboard<span class=\"token punctuation\">.</span>anim <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponentInChildren</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Animator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            blackboard<span class=\"token punctuation\">.</span>npcSkill <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CharacterSkillSystemNPC<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            navigation <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NavMeshAgent<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            blackboard<span class=\"token punctuation\">.</span>interruptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            blackboard<span class=\"token punctuation\">.</span>nodeStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Stack<span class=\"token punctuation\">&lt;</span>BTNode<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">SetParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">ConfigBT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token function\">SearchTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/// 设置参数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            blackboard<span class=\"token punctuation\">.</span>foundTargets <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            blackboard<span class=\"token punctuation\">.</span>currentSkill <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">/// 配置行为树</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigBT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            BTCreateFactory<span class=\"token punctuation\">.</span><span class=\"token function\">BuildBehaviorTree</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                blackboard<span class=\"token punctuation\">.</span>nodeAsset<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">out</span> blackboard<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token keyword\">out</span> blackboard<span class=\"token punctuation\">.</span>priorityNode</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">/// 执行节点</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 外部中断</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> blackboard<span class=\"token punctuation\">.</span>interruptions<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token function\">AbortAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token class-name\">BTState</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">// 优先级节点</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            state <span class=\"token operator\">=</span> blackboard<span class=\"token punctuation\">.</span>priorityNode<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> BTState<span class=\"token punctuation\">.</span>Success <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">// 根节点</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blackboard<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>State <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                blackboard<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            state <span class=\"token operator\">=</span> blackboard<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                blackboard<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">/// 中断所有节点</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AbortAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token class-name\">BTNode</span> node <span class=\"token operator\">=</span> blackboard<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                node<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                node <span class=\"token operator\">=</span> blackboard<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">/// 搜索目标</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SearchTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> ignoreWalls <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token class-name\">BTNode</span> node <span class=\"token operator\">=</span> blackboard<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node <span class=\"token keyword\">is</span> <span class=\"token class-name\">BehaviorNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                ignoreWalls <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node <span class=\"token keyword\">as</span> <span class=\"token class-name\">BehaviorNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>IgnoreWalls<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Transform<span class=\"token punctuation\">></span></span> targets <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SelectTargets</span><span class=\"token punctuation\">(</span>blackboard<span class=\"token punctuation\">.</span>viewDistance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">,</span> blackboard<span class=\"token punctuation\">.</span>viewAngle<span class=\"token punctuation\">,</span> blackboard<span class=\"token punctuation\">.</span>targetTags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            targets <span class=\"token operator\">=</span> targets<span class=\"token punctuation\">.</span><span class=\"token function\">FindAll</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CharacterStatus<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>HP <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                blackboard<span class=\"token punctuation\">.</span>foundTargets <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ignoreWalls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                blackboard<span class=\"token punctuation\">.</span>foundTargets <span class=\"token operator\">=</span> targets<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token class-name\">RaycastHit</span> hit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Transform<span class=\"token punctuation\">></span></span> validTargets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Transform<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> targets<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                Physics<span class=\"token punctuation\">.</span><span class=\"token function\">Raycast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+</span> Vector3<span class=\"token punctuation\">.</span>up <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> hit<span class=\"token punctuation\">,</span> blackboard<span class=\"token punctuation\">.</span>viewDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> hit<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>gameObject <span class=\"token operator\">==</span> item<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                    validTargets<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validTargets<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                blackboard<span class=\"token punctuation\">.</span>foundTargets <span class=\"token operator\">=</span> validTargets<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                blackboard<span class=\"token punctuation\">.</span>foundTargets <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token comment\">/// 自动寻路</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"targetPosition\"> 目标位置 & lt;/param></span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"stoppingDistance\"> 停止移动的距离 & lt;/param></span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"speed\"> 移动速度 & lt;/param></span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vector3</span> targetPosition<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> stoppingDistance<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> speed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            navigation<span class=\"token punctuation\">.</span>stoppingDistance <span class=\"token operator\">=</span> stoppingDistance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            navigation<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            navigation<span class=\"token punctuation\">.</span><span class=\"token function\">SetDestination</span><span class=\"token punctuation\">(</span>targetPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h1>\n<h2 id=\"具体的条件节点\"><a class=\"anchor\" href=\"#具体的条件节点\">#</a> 具体的条件节点</h2>\n<p><span class=\"label info\">发现目标</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 发现目标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FoundTargetCondition</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ConditionNode</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span>BehaviorTree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> Condition <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">丢失目标</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 丢失目标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LostTargetCondition</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ConditionNode</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span>BehaviorTree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> Condition <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">死亡条件</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 死亡条件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeathCondition</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ConditionNode</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Func<span class=\"token punctuation\">&lt;</span>BehaviorTree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> Condition <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>character<span class=\"token punctuation\">.</span>HP <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"具体的行为节点\"><a class=\"anchor\" href=\"#具体的行为节点\">#</a> 具体的行为节点</h2>\n<p><span class=\"label info\">追逐行为</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 追逐行为</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PursuitBehavior</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BehaviorNode</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IgnoreWalls <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>attackNodeDistance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>anim<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>character<span class=\"token punctuation\">.</span>PlayerAnimationParameter<span class=\"token punctuation\">.</span>Run<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            bt<span class=\"token punctuation\">.</span><span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>attackNodeDistance<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>moveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            bt<span class=\"token punctuation\">.</span><span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>moveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">巡逻行为</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// 巡逻行为</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PatrolBehavior</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BehaviorNode</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IgnoreWalls <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 路点数组的索引</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>anim<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>character<span class=\"token punctuation\">.</span>PlayerAnimationParameter<span class=\"token punctuation\">.</span>Idle<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>patrolMode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">case</span> BTPatrolModes<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token function\">NoneMode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">case</span> BTPatrolModes<span class=\"token punctuation\">.</span>Once<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token function\">OnceMode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">case</span> BTPatrolModes<span class=\"token punctuation\">.</span>Loop<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token function\">LoopMode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">case</span> BTPatrolModes<span class=\"token punctuation\">.</span>RoundTrip<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token function\">RoundTripMode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            bt<span class=\"token punctuation\">.</span><span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>moveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">/// 无巡逻模式</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">NoneMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">/// 单次模式</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">OnceMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Index <span class=\"token operator\">>=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>patrolEffect<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                Index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            bt<span class=\"token punctuation\">.</span><span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>moveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">/// 循环模式</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">LoopMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>patrolEffect<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                Index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            bt<span class=\"token punctuation\">.</span><span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>moveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">/// 往返模式</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">RoundTripMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>patrolEffect<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Index <span class=\"token operator\">>=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    Array<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    Index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                Index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            bt<span class=\"token punctuation\">.</span><span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>wayPoints<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>moveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">闲置行为</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 闲置行为</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdleBehavior</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BehaviorNode</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IgnoreWalls <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>anim<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>character<span class=\"token punctuation\">.</span>PlayerAnimationParameter<span class=\"token punctuation\">.</span>Idle<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">死亡行为</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 死亡行为</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadBehavior</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BehaviorNode</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IgnoreWalls <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>anim<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>character<span class=\"token punctuation\">.</span>PlayerAnimationParameter<span class=\"token punctuation\">.</span>Die<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">攻击行为</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehaviorTree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 攻击行为</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AttackBehavior</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BehaviorNode</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IgnoreWalls <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 计时器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> timer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// 用于判断攻击距离</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> judgeAttackDistance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// 已经初始化</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isInit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">EnterNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInit <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token function\">GetSkill</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">TickNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExitNode</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            bt<span class=\"token punctuation\">.</span><span class=\"token function\">MoveToTarget</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>moveSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">/// 初始化</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"bt\">&lt;/param></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            timer <span class=\"token operator\">=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>attackTimeInterval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            isInit <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">/// 获取技能</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"bt\">&lt;/param></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GetSkill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill <span class=\"token operator\">=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>npcSkill<span class=\"token punctuation\">.</span><span class=\"token function\">GetRandomSkillData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill<span class=\"token punctuation\">.</span>MoveDistance <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                judgeAttackDistance <span class=\"token operator\">=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill<span class=\"token punctuation\">.</span>MoveDistance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                judgeAttackDistance <span class=\"token operator\">=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill<span class=\"token punctuation\">.</span>AttackDistance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>attackNodeDistance <span class=\"token operator\">=</span> judgeAttackDistance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">/// 攻击</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"bt\">&lt;/param></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">BTState</span> <span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">// 看向目标</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">LookAt</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            timer <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer <span class=\"token operator\">>=</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>attackTimeInterval<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>foundTargets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> judgeAttackDistance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    <span class=\"token comment\">// 放技能</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                    bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>npcSkill<span class=\"token punctuation\">.</span><span class=\"token function\">UseSkill</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>currentSkill<span class=\"token punctuation\">.</span>SkillID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    <span class=\"token function\">SetPosition</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token function\">GetSkill</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    timer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>anim<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>character<span class=\"token punctuation\">.</span>PlayerAnimationParameter<span class=\"token punctuation\">.</span>Idle<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token keyword\">return</span> BTState<span class=\"token punctuation\">.</span>Running<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token comment\">/// 设置释放位置</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"bt\">&lt;/param></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetPosition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BehaviorTree</span> bt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            bt<span class=\"token punctuation\">.</span>blackboard<span class=\"token punctuation\">.</span>npcSkill<span class=\"token punctuation\">.</span><span class=\"token function\">SetPosition</span><span class=\"token punctuation\">(</span>bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> bt<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"类图\"><a class=\"anchor\" href=\"#类图\">#</a> 类图</h1>\n<p><img data-src=\"ClassDiagram.png\" alt=\"img\" /></p>\n<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<p><span class=\"label info\">配置</span></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SelectorNode[0]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SelectorNode[0]->FilterNode[0]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SelectorNode[0]->FilterNode[1]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SelectorNode[0]->FilterNode[2]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SelectorNode[0]->IdleBehavior[0]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PriorityNode[0]->&#123;DeathCondition[0],DeadBehavior[0]&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>FilterNode[0]->&#123;FoundTargetCondition[0],AttackBehavior[0]&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>FilterNode[1]->&#123;FoundTargetCondition[1],PursuitBehavior[0]&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>FilterNode[2]->&#123;LostTargetCondition[0],PatrolBehavior[0]&#125;</pre></td></tr></table></figure><p><span class=\"label info\">添加组件</span><br />\n<img data-src=\"component_0.png\" alt=\"img\" /></p>\n<p><span class=\"label info\">设置参数</span><br />\n<img data-src=\"component_1.png\" alt=\"img\" /></p>\n<p><span class=\"label info\">结果演示</span><br />\n<img data-src=\"demo.gif\" alt=\"img\" /></p>\n",
            "tags": [
                "Unity",
                "UnityFramework",
                "Unity"
            ]
        },
        {
            "id": "https://maikire.xyz/2025/02/12/Lua/Lua%20+%20CSharp/",
            "url": "https://maikire.xyz/2025/02/12/Lua/Lua%20+%20CSharp/",
            "title": "Lua + CSharp",
            "date_published": "2025-02-12T04:00:00.000Z",
            "content_html": "<h1 id=\"c-调用-lua\"><a class=\"anchor\" href=\"#c-调用-lua\">#</a> C# 调用 Lua</h1>\n<ul>\n<li>在安装 Lua 的文件夹中找到 lua54.dll 并导入 CSharp 项目</li>\n<li>使用 DllImport 导入 Lua 函数</li>\n<li>注意：宏定义无法导出到 dll 中，应该使用宏对应的函数（在 Lua 源码中查找即可）</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">LuaAndCSharp</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CSharp2Lua</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> LuaLib <span class=\"token operator\">=</span> <span class=\"token string\">\"lua54.dll\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> Lua API</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token function\">DllImport</span><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\">IntPtr</span> <span class=\"token function\">luaL_newstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">luaL_loadstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nargs<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nresults<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> errfunc<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ctx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">lua_getglobal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">lua_pushnumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">lua_tonumberx</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> pisnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\">IntPtr</span> <span class=\"token function\">lua_tolstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 创建 Lua 解释器</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">IntPtr</span> L <span class=\"token operator\">=</span> <span class=\"token function\">luaL_newstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 加法</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 关闭 Lua 解释器</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">/// ReadFile</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"L\">Lua 解释器 & lt;/param></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 定义 Lua 函数，用于读取文件内容</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> readFile <span class=\"token operator\">=</span> <span class=\"token string\">@\"</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                function readFile(filename)</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    local file = io.open(filename, \"\"a+\"\")</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    local content = file:read()</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    file:close()</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    return content</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                end</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 运行 Lua 代码，注册函数</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">//luaL_loadstring 只是加载 Lua 代码，但不会执行它</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">//lua_pcall 让 Lua 代码真正执行，使 readFile 函数可用</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">luaL_loadstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> readFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua 代码加载失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\5 Lua\\\\LuaAndCSharp\\\\LuaAndCSharp\\\\test.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token function\">lua_getglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"readFile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 Lua 函数</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IntPtr<span class=\"token punctuation\">.</span>Zero <span class=\"token operator\">==</span> L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未找到 Lua 函数: readFile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token function\">lua_pushstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入文件路径</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">// 调用 Lua 函数（1 参数，1 返回值）</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用 Lua 函数 readFile 失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">// 转换 Lua 返回值</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token class-name\">IntPtr</span> ptr <span class=\"token operator\">=</span> <span class=\"token function\">lua_tolstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Marshal<span class=\"token punctuation\">.</span><span class=\"token function\">PtrToStringAnsi</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">/// Add</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"L\">Lua 解释器 & lt;/param></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">// 定义 Lua 函数，用于加法</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">add</span> <span class=\"token operator\">=</span> <span class=\"token string\">@\"</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                function add(a, b)</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                    return a + b</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                end</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token comment\">// 运行 Lua 代码，注册函数</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">luaL_loadstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">add</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                <span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua 代码加载失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                <span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token function\">lua_getglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 Lua 函数</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token function\">lua_pushnumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入第一个参数</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token function\">lua_pushnumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入第二个参数</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token comment\">// 调用 Lua 函数（2 个参数，1 个返回值）</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> status <span class=\"token operator\">=</span> <span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token comment\">// 获取返回值</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">lua_tonumberx</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Lua 函数 add 返回: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"lua-调用-c-方法\"><a class=\"anchor\" href=\"#lua-调用-c-方法\">#</a> Lua 调用 C# 方法</h1>\n<ul>\n<li>使用委托（主要是函数指针的功能）</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">LuaAndCSharp</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lua2CSharp</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> LuaLib <span class=\"token operator\">=</span> <span class=\"token string\">\"lua54.dll\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> Lua API</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token function\">DllImport</span><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\">IntPtr</span> <span class=\"token function\">luaL_newstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">lua_pushcclosure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LuaFunction</span> func<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">luaL_loadstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LuaLib<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nargs<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nresults<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> errfunc<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ctx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 定义 Lua 函数代理（非托管）</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UnmanagedFunctionPointer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>CallingConvention<span class=\"token punctuation\">.</span>Cdecl<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">LuaFunction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// C# 方法封装，供 Lua 调用</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">CSharpFunction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua 调用了 C# 方法！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 创建 Lua 解释器</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">IntPtr</span> L <span class=\"token operator\">=</span> <span class=\"token function\">luaL_newstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 注册 C# 方法到 Lua</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">LuaFunction</span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LuaFunction</span><span class=\"token punctuation\">(</span>CSharpFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token function\">lua_pushcclosure</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token function\">lua_setglobal</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CallCSharp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// Lua 代码调用 C# 方法</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> callCSharp <span class=\"token operator\">=</span> <span class=\"token string\">@\"</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                print('Calling C# from Lua...')</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                CallCSharp()</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">luaL_loadstring</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> callCSharp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token function\">lua_pcallk</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token function\">lua_close</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Lua",
                "Lua",
                "CSharp"
            ]
        },
        {
            "id": "https://maikire.xyz/2025/01/20/Lua/Lua/",
            "url": "https://maikire.xyz/2025/01/20/Lua/Lua/",
            "title": "Lua",
            "date_published": "2025-01-20T04:00:00.000Z",
            "content_html": "<h1 id=\"lua\"><a class=\"anchor\" href=\"#lua\">#</a> Lua</h1>\n<p>Lua 是一种轻量的脚本语言，用标准 C 语言编写并且开源<br />\n Lua 常用于游戏开发、应用脚本、应用插件等</p>\n<p>Lua 可以很方便的嵌入别的程序里，可以直接使用宿主语言（通常是 C 或 C++）提供的功能<br />\n Lua 支持面向过程编程、自动内存管理、语言内置模式匹配、闭包（通过闭包和 table 可以支持面向对象编程）、多线程</p>\n<p>Lua 代码文件的后缀名为 .lua</p>\n<p>建议：VS Code 中有很多关于 Lua 的扩展，可以方便编程和调试</p>\n<h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>单行注释：使用 -- 开头</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--print(\"Hello World\")</span></pre></td></tr></table></figure><p>多行注释：使用 --[[开始，使用]] 结束，为了美观，也可以使用 --]] 结束<br />\n注意：Lua 不支持嵌套注释</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[[</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print(\"Hello World\")</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>print(\"Hello World\")</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--]]</span></pre></td></tr></table></figure><h2 id=\"标识符\"><a class=\"anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<ul>\n<li>标识符用于定义一个变量、函数等，命名规则和 C 语言差不多</li>\n<li>Lua 保留的关键词较少，其中有很多都和 C 语言一样</li>\n<li>以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量</li>\n</ul>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<p>Lua 变量会自动分配数据类型，只需要为变量赋值即可</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nil</td>\n<td>表示一个无效值。在条件表达式中表示 false</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>true 或 false</td>\n</tr>\n<tr>\n<td>number</td>\n<td>双精度点数</td>\n</tr>\n<tr>\n<td>string</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>function</td>\n<td>由 C 或 Lua 声明的函数</td>\n</tr>\n<tr>\n<td>userdata</td>\n<td>存储在变量中的 C 语言数据结构</td>\n</tr>\n<tr>\n<td>thread</td>\n<td>独立线程</td>\n</tr>\n<tr>\n<td>table</td>\n<td>关联数组，编号从 1 开始</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<ul>\n<li>Lua 变量有三种类型：全局变量、局部变量、表中的域</li>\n<li>变量的默认值均为 nil，访问一个没有初始化的变量不会出错，得到的结果为 nil</li>\n<li>Lua 中的变量全是全局变量，在函数里声明的也是全局变量，除非用 local 显式声明为局部变量</li>\n<li>变量在使用前需要先赋值，给一个变量赋值后就表明创建了一个全局变量</li>\n<li>删除一个全局变量，只需要将变量赋值为 nil</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">--[[</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>运行结果</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nil</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--]]</span></pre></td></tr></table></figure><h2 id=\"循环和条件\"><a class=\"anchor\" href=\"#循环和条件\">#</a> 循环和条件</h2>\n<p>循环语句</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--while</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    a <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">--for</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">--for 的三个表达式在循环开始前一次性求值，以后不再进行求值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- a 从 0 开始，增加到 4 (a &lt;= 4)，每次增加的值为 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 泛型 for</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3a\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">--repeat...until 与 C 语言 do...while () 中的 while () 相反</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">repeat</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">until</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">-- 嵌套循环</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">-- 选择排序</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    index <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            index <span class=\"token operator\">=</span> j</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    a<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">-- break 可以跳出循环，与 C 语言一样</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">-- goto 与 C 语言一样，不建议使用</span></pre></td></tr></table></figure><p>条件语句</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<p>这里仅指出与 C 语言不同的部分</p>\n<p>算术运算符</p>\n<ul>\n<li>/ 表示小数的除法</li>\n<li>// 表示取整的除法</li>\n<li>^ 乘幂</li>\n</ul>\n<p>关系运算符</p>\n<ul>\n<li>~= 不等于</li>\n</ul>\n<p>逻辑运算符</p>\n<ul>\n<li>and 逻辑与</li>\n<li>or 逻辑或</li>\n<li>not 逻辑非</li>\n</ul>\n<p>其他</p>\n<ul>\n<li>.. 连接两个字符串</li>\n<li># 返回字符串或表的长度。例如： <code>#&quot;123&quot;</code>  返回 3</li>\n</ul>\n<p>运算符连接</p>\n<ul>\n<li>除了 ^ 和 .. 以外，所有的二元运算符都是左连接的</li>\n</ul>\n<p>运算符优先级</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--[[</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1. ^</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2. not   -（负号）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>3. *   /   %</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>4. +   -（减号）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>5. ..</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>6. &lt;   >   &lt;=   >=   ~=   ==</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>7. and</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8. or</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--]]</span></pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<ul>\n<li>使用 ' 或 &quot; 得到的结果完全相同</li>\n<li>可以使用 [[]] 输入多行字符串</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"aaa\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">'bbb'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token string\">[[</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>]]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>常用函数</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>string.byte(s [, i [, j]])</code></td>\n<td>返回字符串中第  <code>i</code>  到  <code>j</code>  个字符的 ASCII 值，默认返回第一个字符的 ASCII 值</td>\n</tr>\n<tr>\n<td><code>string.char(...)</code></td>\n<td>接收一系列整数，返回这些整数对应的字符组成的字符串</td>\n</tr>\n<tr>\n<td><code>string.find(s, pattern [, init [, plain]])</code></td>\n<td>在字符串  <code>s</code>  中查找符合  <code>pattern</code>  的模式，返回匹配的起止位置及匹配内容</td>\n</tr>\n<tr>\n<td><code>string.format(formatstring, ...)</code></td>\n<td>返回一个格式化后的字符串，类似于 C 语言中的  <code>printf</code></td>\n</tr>\n<tr>\n<td><code>string.gmatch(s, pattern)</code></td>\n<td>返回一个迭代器，用于遍历字符串  <code>s</code>  中所有匹配  <code>pattern</code>  的子串</td>\n</tr>\n<tr>\n<td><code>string.gsub(s, pattern, repl [, n])</code></td>\n<td>将字符串  <code>s</code>  中的  <code>pattern</code>  替换为  <code>repl</code> ，最多替换  <code>n</code>  次</td>\n</tr>\n<tr>\n<td><code>string.len(s)</code></td>\n<td>返回字符串  <code>s</code>  的长度</td>\n</tr>\n<tr>\n<td><code>string.lower(s)</code></td>\n<td>将字符串  <code>s</code>  转换为小写形式</td>\n</tr>\n<tr>\n<td><code>string.match(s, pattern [, init])</code></td>\n<td>在字符串  <code>s</code>  中匹配  <code>pattern</code> ，返回第一个匹配的子串</td>\n</tr>\n<tr>\n<td><code>string.rep(s, n [, sep])</code></td>\n<td>将字符串  <code>s</code>  重复  <code>n</code>  次，可以选择性地添加分隔符  <code>sep</code></td>\n</tr>\n<tr>\n<td><code>string.reverse(s)</code></td>\n<td>返回字符串  <code>s</code>  的反转版本</td>\n</tr>\n<tr>\n<td><code>string.sub(s, i [, j])</code></td>\n<td>返回字符串  <code>s</code>  从第  <code>i</code>  到第  <code>j</code>  个字符的子串</td>\n</tr>\n<tr>\n<td><code>string.upper(s)</code></td>\n<td>将字符串  <code>s</code>  转换为大写形式</td>\n</tr>\n</tbody>\n</table>\n<p>模式匹配</p>\n<ul>\n<li>与 正则表达式 不同，Lua 提供了一个轻量级的匹配机制</li>\n<li>如果需要更复杂的正则表达式功能，可以通过 Lua 的扩展库（例如：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbmYucHVjLXJpby5ici9+cm9iZXJ0by9scGVnLw==\">LPeg</span>）来实现。LPeg 是一个功能强大的模式匹配库，支持完整的正则表达式功能和更多自定义模式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配任意单个字符（除了换行符）。</td>\n</tr>\n<tr>\n<td><code>%a</code></td>\n<td>匹配任意字母（大小写皆可）。</td>\n</tr>\n<tr>\n<td><code>%d</code></td>\n<td>匹配任意数字。</td>\n</tr>\n<tr>\n<td><code>%s</code></td>\n<td>匹配空白字符（空格、制表符等）。</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>匹配字母和数字。</td>\n</tr>\n<tr>\n<td><code>%p</code></td>\n<td>匹配标点符号。</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>匹配十六进制数字。</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>匹配前面的模式零次或多次（贪婪匹配）。</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前面的模式一次或多次（贪婪匹配）。</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>匹配前面的模式零次或多次（非贪婪匹配）。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前面的模式零次或一次。</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配字符串的开头。</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配字符串的结尾。</td>\n</tr>\n<tr>\n<td><code>%bxy</code></td>\n<td>匹配成对的字符  <code>x</code>  和  <code>y</code> （如  <code>%b()</code>  匹配括号中的内容）。</td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>捕获模式，返回匹配到的子串</td>\n</tr>\n</tbody>\n</table>\n<p>示例</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 查找数字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua 2025!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> num <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d+\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出：2025</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 捕获子串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 一个括号就是一个子模式，子模式如果匹配成功就会被记录下来，按照先后顺序依次编号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">local</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Lua!\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">local</span> word <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"(%a+)%s(%a+)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出一号捕获物 Hello</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出二号捕获物 Lua</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 替换字符串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">local</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"abc123abc\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">local</span> new_s <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>new_s<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出：abc456abc</span></pre></td></tr></table></figure><h2 id=\"table\"><a class=\"anchor\" href=\"#table\">#</a> table</h2>\n<ul>\n<li>除了 nil 以外，可以将任意类型的值放入 table 中</li>\n<li>同一个 table 可以存入多个不同类型的值</li>\n<li>Lua 中没有数组类型，而是使用 table 代替</li>\n<li>Lua 通过 table 来解决模块（module）、包（package）、对象（Object）</li>\n<li>动态大小</li>\n<li>引用类型</li>\n<li>浅拷贝</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 键值对</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t<span class=\"token punctuation\">[</span><span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"wow\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 字典</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    version <span class=\"token operator\">=</span> <span class=\"token string\">\"5.4\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    is_dynamic <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">[</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">-- 数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- 嵌套（多维数组）</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>常用函数举例</p>\n<table>\n<thead>\n<tr>\n<th>常用函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>table.insert</code></td>\n<td>在指定位置插入一个元素。如果未指定位置，则在表的末尾插入</td>\n</tr>\n<tr>\n<td><code>table.remove</code></td>\n<td>删除指定位置的元素，并返回被删除的值。如果未指定位置，则删除最后一个元素</td>\n</tr>\n<tr>\n<td><code>table.concat</code></td>\n<td>将数组中的元素连接成一个字符串，可指定分隔符</td>\n</tr>\n<tr>\n<td><code>table.sort</code></td>\n<td>对数组进行排序，可以指定自定义排序函数</td>\n</tr>\n<tr>\n<td><code>table.pack</code></td>\n<td>将任意数量的值打包为一个 table，同时添加一个  <code>n</code>  字段表示元素数量</td>\n</tr>\n<tr>\n<td><code>table.unpack</code></td>\n<td>将数组解包为单独的返回值</td>\n</tr>\n<tr>\n<td><code>table.move</code></td>\n<td>将元素从一个表的指定范围移动到目标表的指定位置</td>\n</tr>\n<tr>\n<td><code>table.clear</code></td>\n<td>清空表中的所有键值对</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- table.insert</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">-- 插入到末尾</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">-- 插入到索引 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- table.concat</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"awesome\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出: Lua is awesome</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- table.move</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>table<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 将 t1 的索引 2-4 的元素移动到 t2</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>Lua 函数的定义</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>optional_function_scope <span class=\"token keyword\">function</span> <span class=\"token function\">function_name</span><span class=\"token punctuation\">(</span> argument1<span class=\"token punctuation\">,</span> argument2<span class=\"token punctuation\">,</span> argument3<span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> argumentn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    function_body</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> result_params_comma_separated</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><ul>\n<li>optional_function_scope：该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local</li>\n<li>function_name：指定函数名称</li>\n<li>argument1, argument2, argument3..., argumentn：函数参数。这里的参数全都是形参（也就是局部变量）</li>\n<li>function_body：函数体，函数中需要执行的代码语句块</li>\n<li>result_params_comma_separated：函数返回值，Lua 语言函数可以返回多个值，每个值以逗号隔开</li>\n</ul>\n<p>举例</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 函数必须声明后才能调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- a 是固定参数，必须赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- ... 是可变数量的参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">local</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">local</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">local</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> v</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = \"</span> <span class=\"token operator\">..</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- .. 用于连接两个字符串</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum = \"</span> <span class=\"token operator\">..</span> sum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<p>闭包（Closure）是指 一个函数以及它所引用的词法作用域中的变量的组合。闭包允许函数在定义时捕获并保留其外部环境中的状态，哪怕这个环境已经不再存在。</p>\n<p>闭包的特点</p>\n<ul>\n<li>函数嵌套</li>\n<li>内部函数会捕获并保留外部函数的局部变量</li>\n<li>闭包可以记住它捕获的变量状态</li>\n</ul>\n<p>闭包的用途</p>\n<ul>\n<li>数据封装\n<ul>\n<li>使用闭包隐藏变量，使其只对特定函数可见</li>\n<li>类似于类的私有成员变量</li>\n</ul>\n</li>\n<li>回调和事件监听\n<ul>\n<li>在事件驱动编程中，闭包可以用来保存上下文状态</li>\n</ul>\n</li>\n<li>高阶函数\n<ul>\n<li>通过闭包实现函数式编程的特性，如偏函数应用、柯里化等</li>\n</ul>\n</li>\n<li>模拟对象\n<ul>\n<li>在没有面向对象支持的语言中，闭包可以用来模拟对象的行为</li>\n</ul>\n</li>\n</ul>\n<p>举例</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">create_counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">local</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">-- 外部函数的局部变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回一个匿名函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">-- 捕获并修改外部变量 count</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> count</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 创建一个计数器闭包</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>counter <span class=\"token operator\">=</span> <span class=\"token function\">create_counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 调用闭包函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 3</span></pre></td></tr></table></figure><p>闭包的内存管理</p>\n<ul>\n<li>闭包捕获的变量会被保存在堆内存中，只要闭包仍然被引用，这些变量就不会被垃圾回收。如果闭包不再被使用，捕获的变量会被回收</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 闭包的生命周期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">create_closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> x <span class=\"token operator\">=</span> <span class=\"token number\">42</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">local</span> closure <span class=\"token operator\">=</span> <span class=\"token function\">create_closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 输出 42</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>closure <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>  <span class=\"token comment\">-- 闭包不再引用，x 被垃圾回收</span></pre></td></tr></table></figure><h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<p>泛型 for</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- ipairs () 是 Lua 默认提供的迭代函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- k 是索引，v 是值，全都是局部变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">-- body</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>执行过程</p>\n<ol>\n<li>初始化，计算 in 后面表达式的值，表达式应该返回泛型 for 需要的三个值：迭代函数、状态常量、控制变量。与多值赋值一样，如果表达式返回的结果个数不足三个会自动用 nil 补足，多出部分会被忽略</li>\n<li>将状态常量和控制变量作为参数调用迭代函数（注意：状态常量储存的是引用）</li>\n<li>将迭代函数返回的值赋给变量列表</li>\n<li>如果返回的第一个值为 nil 循环结束，否则执行循环体</li>\n<li>回到第二步再次调用迭代函数</li>\n</ol>\n<p>Lua 迭代器</p>\n<ul>\n<li>无状态的迭代器\n<ul>\n<li>不保留任何状态的迭代器</li>\n<li>例如：ipairs ()，它遍历数组的每一个元素，元素的索引需要是数值</li>\n</ul>\n</li>\n<li>多状态的迭代器\n<ul>\n<li>迭代器需要保存多个状态信息</li>\n<li>使用 闭包 或者将信息封装到 table 中</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 无状态的迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 自定义 ipairs ()</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">local</span> v <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> v <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">,</span> v</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">my_ipairs</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">-- 迭代函数 iter, 状态常量 a, 控制变量的初始值 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">-- 这些值将被 for 循环用于控制迭代</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> iter<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- iter 的两个返回值分别赋值给了 i 和 v</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 从第二次开始，每次迭代只会调用函数 iter</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 状态常量 a 引用了 array 的内存地址</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">-- 之后的迭代过程中，即使 array 发生改变，也不会影响迭代结果</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">my_ipairs</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 多状态的迭代器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 计算斐波那契数列</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fibonacci_iterator</span><span class=\"token punctuation\">(</span>max_count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">-- 控制变量：记录当前是第几个斐波那契数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">local</span> prev<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token comment\">-- 状态变量：两个数用于计算下一个斐波那契数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">-- 定义迭代器函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> count <span class=\"token operator\">>=</span> max_count <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span> <span class=\"token comment\">-- 当达到最大次数时结束迭代</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">-- 更新控制变量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">local</span> next_value <span class=\"token operator\">=</span> prev <span class=\"token operator\">+</span> curr</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        prev<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">,</span> next_value <span class=\"token comment\">-- 更新状态变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">,</span> prev <span class=\"token comment\">-- 返回当前的索引和斐波那契数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> iter <span class=\"token comment\">-- 返回迭代器函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">fibonacci_iterator</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h2 id=\"元表和元方法\"><a class=\"anchor\" href=\"#元表和元方法\">#</a> 元表和元方法</h2>\n<ul>\n<li>元表（metatable）用于自定义 table 的行为</li>\n<li>注意：元表不会继承</li>\n<li>算术操作\n<ul>\n<li>__add：定义加法 +</li>\n<li>__sub：定义减法 -</li>\n<li>__mul：定义乘法 *</li>\n<li>__div：定义除法 /</li>\n<li>__mod：定义取模 %</li>\n<li>__pow：定义幂运算 ^</li>\n</ul>\n</li>\n<li>比较操作\n<ul>\n<li>__eq：定义相等 ==</li>\n<li>__lt：定义小于 &lt;</li>\n<li>__le：定义小于等于 &lt;=</li>\n</ul>\n</li>\n<li>索引操作\n<ul>\n<li>__index：当访问 table 中不存在的字段时调用</li>\n<li>__newindex：当给 table 中不存在的字段赋值时调用</li>\n</ul>\n</li>\n<li>其他操作\n<ul>\n<li>__call：让 table 像函数一样被调用</li>\n<li>__tostring：自定义 tostring 函数的输出</li>\n<li>__metatable：保护元表，不允许外部修改或查看</li>\n</ul>\n</li>\n<li>相关函数\n<ul>\n<li>setmetatable (,)：将元表绑定到目标 table</li>\n<li>getmetatable ()：获取目标 table 的元表</li>\n</ul>\n</li>\n<li>Lua 查找一个表元素的规则\n<ol>\n<li>在表中查找，如果找到，返回该元素，找不到则继续</li>\n<li>判断该表是否有元表，如果没有元表，返回 nil，有元表则继续</li>\n<li>判断元表有没有 __index 方法<br />\n如果 __index 方法为 nil，则返回 nil<br />\n 如果 __index 方法是一个表，则重复 1、2、3<br />\n 如果 __index 方法是一个函数，则返回该函数的返回值</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 算术操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 定义目标 table</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 定义元表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mt <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    __add <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 设置元表到目标 table</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 使用自定义的加法操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">+</span> t2<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出: 4</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 比较操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    value <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    value <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>mt <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    __lt <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">&lt;</span> t2<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出: true</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 索引操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 定义元表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mt <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    __index <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"默认值\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    __newindex <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在设置新的键值对:\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">rawset</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 手动设置值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>someKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出：默认值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>t<span class=\"token punctuation\">.</span>someKey <span class=\"token operator\">=</span> <span class=\"token string\">\"新值\"</span> <span class=\"token comment\">-- 输出：正在设置新的键值对: someKey 新值</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 其他操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mt <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __call <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"被当作函数调用\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    __tostring <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"这是一个自定义的 table\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出：这是一个自定义的 table</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出：被当作函数调用</span></pre></td></tr></table></figure><h1 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h1>\n<p>模块类似于一个封装库，把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。</p>\n<p>Lua 的模块是由变量、函数等已知元素组成的 table</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- mod.lua 文件中的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mod<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">fun_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public function\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"private function\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> mod<span class=\"token punctuation\">.</span><span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">return</span> mod</pre></td></tr></table></figure><p>使用  <code>require(&quot;name&quot;)</code>  或  <code>require &quot;name&quot;</code>  加载模块</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mod<span class=\"token punctuation\">.</span><span class=\"token function\">fun_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mod<span class=\"token punctuation\">.</span><span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>m<span class=\"token punctuation\">.</span><span class=\"token function\">fun_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>m<span class=\"token punctuation\">.</span><span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>加载机制</p>\n<ul>\n<li>Lua 首先会检查全局表 package.loaded，该表存储了所有已加载的模块</li>\n<li>如果模块未加载，Lua 会根据 package.path（Lua 文件路径）和 package.cpath（C 程序库）搜索模块文件</li>\n<li>根据文件后缀，Lua 调用不同的加载器\n<ul>\n<li>.lua 文件：通过 loadfile () 加载并执行</li>\n<li>.so 或 .dll 文件：通过动态链接库加载</li>\n</ul>\n</li>\n<li>加载完成后，Lua 会将模块的返回值保存到 package.loaded 中，并返回给调用者</li>\n</ul>\n<p>临时修改路径</p>\n<ul>\n<li>通过代码对 package.path 的修改是临时的，只在当前 Lua 程序的运行期间有效</li>\n<li><code>package.path = package.path .. &quot;;.\\\\my_modules\\\\?.lua&quot;</code>\n<ul>\n<li><code>;</code>  用于分割多个路径</li>\n<li><code>.\\\\my_modules\\\\?.lua</code>  是新增路径</li>\n<li><code>?</code>  是占位符，也就是  <code>require(&quot;name&quot;)</code>  中的  <code>name</code></li>\n</ul>\n</li>\n</ul>\n<p>永久更改路径</p>\n<ul>\n<li>Windows 在系统环境变量中设置<br />\n新增一个环境变量 LUA_PATH，值为  <code>.\\\\my_modules\\\\?.lua;;</code>\n<ul>\n<li><code>;;</code>  表示新加的路径后面加上原来的默认路径</li>\n</ul>\n</li>\n<li>Linux/macOS 在 .bashrc 或 .zshrc 中设置<br />\n <code>export LUA_PATH=&quot;./my_modules/?.lua;;&quot;</code></li>\n</ul>\n<h1 id=\"c-包\"><a class=\"anchor\" href=\"#c-包\">#</a> C 包</h1>\n<ul>\n<li>C 包在使用以前必须首先加载并连接，在大多数系统中最容易的实现方式是通过动态连接库机制</li>\n<li>Lua 在 package.loadlib 函数内提供了所有的动态连接的功能\n<ul>\n<li>这个函数有两个参数：库的绝对路径 和 初始化函数</li>\n</ul>\n</li>\n<li>一般情况下，将需要的库归类存放，创建一个 .lua 文件存放索引，然后将文件所在的目录加入到 LUA_PATH</li>\n</ul>\n<p>创建 C 包流程</p>\n<ol>\n<li>在 Visual Studio 中创建空项目，将配置类型改为动态库 (.dll)</li>\n<li>导入所有 lua 源码（除了 lua.c、luac.c、Makefile）</li>\n<li>新建 .cpp 代码</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lua.hpp\"</span> <span class=\"token comment\">// Lua 头文件</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 一个简单的加法函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lua_add</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checkinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checkinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">lua_pushinteger</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回结果数量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 函数注册表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> luaL_Reg mylib<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> lua_add<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 注册函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span>      <span class=\"token comment\">// 结束标记</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 模块初始化函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//luaopen_mylib 就是 初始化函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 命名规则 luaopen_XXX 其中 XXX 就是 .dll 文件的文件名（或者在生成 .dll 文件后，将 .dll 文件的名称改为 XXX）</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> <span class=\"token function\">luaopen_mylib</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">luaL_newlib</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> mylib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建模块表</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回模块表</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>生成项目，然后在 Debug 或 Release 文件夹中找到生成的 .dll 文件。将它复制到 你觉得合适的位置（例如：lua 源文件目录）</li>\n<li>在 Lua 中编写代码调用</li>\n</ol>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 我把 .dll 文件放到了 lua 源文件目录，所以可以直接这样写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 否则，必须写出文件的完整路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>path <span class=\"token operator\">=</span> <span class=\"token string\">\"mylib.dll\"</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 初始化函数，必须与 cpp 代码中的初始化函数 相同</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>init <span class=\"token operator\">=</span> <span class=\"token string\">\"luaopen_mylib\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mylib <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span><span class=\"token function\">loadlib</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 链接库</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>mylib <span class=\"token operator\">=</span> <span class=\"token function\">mylib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 打开库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 检查是否加载成功</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> mylib <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to load DLL: \"</span> <span class=\"token operator\">..</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">or</span> <span class=\"token string\">\"unknown error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">-- 调用导出函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mylib<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"协同程序\"><a class=\"anchor\" href=\"#协同程序\">#</a> 协同程序</h1>\n<p>Lua 协同程序（Coroutine）是 Lua 中的一种轻量级线程机制，它允许以非抢占式多任务的方式实现并发。协同程序在 Lua 中被认为是线程的一个子集，它更接近于一种函数的挂起和恢复机制<br />\n Lua 协同程序拥有独立的堆栈，独立的局部变量，独立的指令指针</p>\n<p>协同程序由 coroutine 模块提供支持</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>coroutine.create()</td>\n<td>创建 coroutine，返回 coroutine， 参数是一个函数，当和 resume 配合使用的时候就唤醒函数调用</td>\n</tr>\n<tr>\n<td>coroutine.resume()</td>\n<td>重启 coroutine，和 create 配合使用。第一个返回值：布尔值，表示协同程序是否成功恢复。后续返回值：协同程序挂起时通过 coroutine.yield () 返回的值</td>\n</tr>\n<tr>\n<td>coroutine.yield()</td>\n<td>挂起 coroutine</td>\n</tr>\n<tr>\n<td>coroutine.status()</td>\n<td>查看 coroutine 的状态，有三种：dead，suspended，running</td>\n</tr>\n<tr>\n<td>coroutine.wrap()</td>\n<td>创建 coroutine，返回一个函数，该函数在调用时会直接运行协同程序</td>\n</tr>\n<tr>\n<td>coroutine.running()</td>\n<td>返回正在运行的 coroutine，一个 coroutine 就是一个线程，当使用 running 的时候，就是返回一个 coroutine 的线程号</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 定义协同程序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>co <span class=\"token operator\">=</span> coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Coroutine running: \"</span> <span class=\"token operator\">..</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 挂起协同程序</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 恢复协同程序</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- suspended</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 Coroutine running: 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- suspended</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 Coroutine running: 2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- suspended</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 Coroutine running: 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>co<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- dead</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 生产者 - 消费者问题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Producing: \"</span> <span class=\"token operator\">..</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 将值返回给消费者</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span>prod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">local</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">local</span> value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">-- 获取生产者的值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        status<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>prod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        status<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> coroutine<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>prod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">-- 如果协同程序结束</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> status<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> status<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"dead\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consuming: \"</span> <span class=\"token operator\">..</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">-- 测试</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>线程和协同程序区别</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Lua 线程</th>\n<th>Lua 协同程序</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建方式</td>\n<td>使用 Lua C API 创建</td>\n<td>使用  <code>coroutine.create</code>  创建</td>\n</tr>\n<tr>\n<td>底层依赖</td>\n<td>操作系统的多线程机制</td>\n<td>纯 Lua 实现，运行在单线程环境中</td>\n</tr>\n<tr>\n<td>并行能力</td>\n<td>支持多核并行</td>\n<td>不支持并行，只能切换执行权</td>\n</tr>\n<tr>\n<td>切换方式</td>\n<td>操作系统调度</td>\n<td>显式调用  <code>coroutine.resume</code> / <code>yield</code></td>\n</tr>\n<tr>\n<td>开销</td>\n<td>高（需要操作系统资源）</td>\n<td>低（轻量级，纯 Lua 实现）</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>复杂的多任务或计算密集型场景</td>\n<td>游戏开发、简单的状态管理和异步任务</td>\n</tr>\n<tr>\n<td>线程隔离性</td>\n<td>独立的 Lua 堆栈和环境</td>\n<td>共享同一个 Lua 环境</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"io\"><a class=\"anchor\" href=\"#io\">#</a> I/O</h1>\n<p>操作文件的语句： <code>file = io.open (filename [, mode])</code></p>\n<table>\n<thead>\n<tr>\n<th>mode</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>只读。文件必须存在</td>\n</tr>\n<tr>\n<td>w</td>\n<td>只写。若文件存在则清空文件内容，若文件不存在则新建文件</td>\n</tr>\n<tr>\n<td>a</td>\n<td>以附加的方式打开只写文件。若文件存在，写入的数据会被加到文件尾，若文件不存在则新建文件</td>\n</tr>\n<tr>\n<td>r+</td>\n<td>在 r 的基础上增加 写</td>\n</tr>\n<tr>\n<td>w+</td>\n<td>在 w 的基础上增加 读</td>\n</tr>\n<tr>\n<td>a+</td>\n<td>在 a 的基础上增加 读</td>\n</tr>\n<tr>\n<td>b</td>\n<td>二进制模式，用于二进制文件</td>\n</tr>\n</tbody>\n</table>\n<p>全局模式  <code>io.function</code></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>io.open</code></td>\n<td>打开并返回一个文件句柄</td>\n</tr>\n<tr>\n<td><code>io.input</code></td>\n<td>获取或设置当前默认输入文件</td>\n</tr>\n<tr>\n<td><code>io.output</code></td>\n<td>获取或设置当前默认输出文件</td>\n</tr>\n<tr>\n<td><code>io.read</code></td>\n<td>从默认输入文件读取内容</td>\n</tr>\n<tr>\n<td><code>io.write</code></td>\n<td>写入内容到默认输出文件</td>\n</tr>\n<tr>\n<td><code>io.flush</code></td>\n<td>刷新默认输出文件的缓冲区</td>\n</tr>\n<tr>\n<td><code>io.close</code></td>\n<td>关闭默认文件（输入或输出）</td>\n</tr>\n<tr>\n<td><code>io.popen</code></td>\n<td>执行系统命令（获取命令的输出或与其交互）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 以附加的方式打开文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>file <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 设置默认输入文件为 test.lua</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 输出文件第一行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 关闭打开的文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 写入到 test.lua</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>file <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a+\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--Hello, Lua!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>io<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 刷新缓冲区</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- io.popen 执行系统命令并读取输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- \"r\": 读取命令的输出（默认）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- \"w\": 向命令输入数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> handle <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">popen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls -l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> handle <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">local</span> result <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 读取所有输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    handle<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to execute command\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>句柄模式  <code>file:function</code></p>\n<ul>\n<li>通过文件句柄操作文件</li>\n<li>每个文件句柄是独立的，适合同时操作多个文件</li>\n<li>不依赖全局的默认输入或输出文件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>file:read</code></td>\n<td>按指定模式从文件中读取内容</td>\n</tr>\n<tr>\n<td><code>file:write</code></td>\n<td>写入内容到文件</td>\n</tr>\n<tr>\n<td><code>file:lines</code></td>\n<td>返回一个迭代器，用于逐行读取文件内容</td>\n</tr>\n<tr>\n<td><code>file:flush</code></td>\n<td>刷新文件的缓冲区</td>\n</tr>\n<tr>\n<td><code>file:seek</code></td>\n<td>设置或获取文件指针的位置</td>\n</tr>\n<tr>\n<td><code>file:close</code></td>\n<td>关闭文件</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 打开文件以写入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> file <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>file<span class=\"token punctuation\">:</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--Hello, Lua!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 写入内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>file<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 关闭文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 打开文件以读取</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>file <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">local</span> content <span class=\"token operator\">=</span> file<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*all\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 读取整个文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出: Hello, Lua!</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>file<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 关闭文件</span></pre></td></tr></table></figure><p>二者的主要区别</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>io.function</code>  全局模式</th>\n<th><code>file:function</code>  句柄模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>适用范围</td>\n<td>作用于全局的默认文件</td>\n<td>作用于特定的文件句柄</td>\n</tr>\n<tr>\n<td>多文件操作</td>\n<td>只能同时操作一个默认文件</td>\n<td>可以同时操作多个文件</td>\n</tr>\n<tr>\n<td>灵活性</td>\n<td>较低，需要频繁更改默认文件</td>\n<td>更高，操作独立文件句柄</td>\n</tr>\n<tr>\n<td>效率</td>\n<td>较低，因为频繁更改默认文件影响效率</td>\n<td>较高，专注于特定文件操作</td>\n</tr>\n<tr>\n<td>函数接口</td>\n<td>与全局输入 / 输出文件交互的函数</td>\n<td>文件句柄的成员函数</td>\n</tr>\n</tbody>\n</table>\n<p>其他常用操作</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 删除文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>os<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 执行系统命令（只能检查是否成功，无法交互）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>os<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mkdir my_folder\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 创建文件夹</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>  <span class=\"token comment\">-- 检查是否成功</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File deleted successfully\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to delete file\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 复制文件（手动复制）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> srcFile <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 以二进制模式读取</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> srcFile <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无法打开源文件：\"</span> <span class=\"token operator\">..</span> src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">local</span> destFile <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 以二进制模式写入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> destFile <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无法创建目标文件：\"</span> <span class=\"token operator\">..</span> dest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        srcFile<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    destFile<span class=\"token punctuation\">:</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 读取整个文件并写入</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    srcFile<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    destFile<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件复制成功：\"</span> <span class=\"token operator\">..</span> src <span class=\"token operator\">..</span> <span class=\"token string\">\" → \"</span> <span class=\"token operator\">..</span> dest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"backup\\\\test.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">-- 复制文件（系统命令）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>os<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy \"example.txt\" \"backup\\\\example.txt\"'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h1>\n<ul>\n<li>对象由属性和方法组成，在 lua 中使用 table 和 function 模拟出来</li>\n<li>可以使用 metetable 实现继承</li>\n<li>将 lua 中的一个 table 看做一个类，基于这个 table 声明变量和函数，即可实现一个类的模拟</li>\n<li>命名规则：类中使用  <code>:</code>  定义和访问函数，使用  <code>.</code>  访问变量</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- Class.lua 中的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Class <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">-- 类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Class<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> Class <span class=\"token comment\">-- 设置索引元方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Class<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">-- 公共变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">local</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\">-- 私有变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">local</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> Class<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 设置元表，使对象继承类的方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> obj</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">fun_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public function\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"private function\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">function</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> obj <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj<span class=\"token punctuation\">:</span><span class=\"token function\">fun_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>obj<span class=\"token punctuation\">:</span><span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>封装、继承、多态</p>\n<ul>\n<li>继承：设置子类的元表</li>\n<li>方法重写：在子类中以相同的名称重新定义方法</li>\n<li>变量  <code>self</code> ： <code>Class:new()</code>  中  <code>self</code>  就是  <code>Class</code></li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 父类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Class <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Class<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> Class</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Class<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">local</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span> <span class=\"token comment\">-- 封装</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> obj</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class:func()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">function</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">-- 子类</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>SubClass_1 <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>SubClass_1<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> SubClass_1</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>SubClass_1<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">function</span> SubClass_1<span class=\"token punctuation\">:</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 重写</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass_1:func()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">-- 子类</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>SubClass_2 <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>SubClass_2<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> SubClass_2</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">function</span> SubClass_2<span class=\"token punctuation\">:</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 重写</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass_2:func()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">-- 创建子类的对象</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">local</span> obj_1 <span class=\"token operator\">=</span> SubClass_1<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>obj_1<span class=\"token punctuation\">:</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass_1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>obj_1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">local</span> obj_2 <span class=\"token operator\">=</span> SubClass_2<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>obj_2<span class=\"token punctuation\">:</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass_2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>obj_2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">-- 多态</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>obj_1<span class=\"token punctuation\">:</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>obj_2<span class=\"token punctuation\">:</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"事件\"><a class=\"anchor\" href=\"#事件\">#</a> 事件</h1>\n<p>使用 table 实现事件系统</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 定义一个简单的事件管理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> EventManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    events <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> EventManager<span class=\"token punctuation\">:</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> EventManager<span class=\"token punctuation\">:</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 使用事件管理器</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>EventManager<span class=\"token punctuation\">:</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"player_jump\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>name <span class=\"token operator\">..</span> <span class=\"token string\">\" 跳跃了！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">-- 触发事件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">local</span> player <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"玩家1\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>EventManager<span class=\"token punctuation\">:</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"player_jump\"</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>模拟一个按钮对象</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">create_button</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">local</span> button <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>          <span class=\"token comment\">-- 用来模拟对象的表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> event_listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">-- 用来存储事件监听器的表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> is_enabled <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>    <span class=\"token comment\">-- 按钮是否可用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">-- 方法：设置按钮标签</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">set_label</span><span class=\"token punctuation\">(</span>new_label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        label <span class=\"token operator\">=</span> new_label</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">-- 方法：获取按钮标签</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">get_label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> label</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">-- 方法：设置按钮状态</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">function</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">set_enabled</span><span class=\"token punctuation\">(</span>enabled<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        is_enabled <span class=\"token operator\">=</span> enabled</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">-- 方法：获取按钮状态</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">function</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">is_enabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> is_enabled</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">-- 方法：注册事件监听器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">function</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>event_name<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> event_listeners<span class=\"token punctuation\">[</span>event_name<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            event_listeners<span class=\"token punctuation\">[</span>event_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>event_listeners<span class=\"token punctuation\">[</span>event_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">-- 方法：触发事件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">function</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>event_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_enabled <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button is disabled\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">local</span> listeners <span class=\"token operator\">=</span> event_listeners<span class=\"token punctuation\">[</span>event_name<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> listeners <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> listener <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 调用回调函数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> button</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">-- 创建按钮对象</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">local</span> button <span class=\"token operator\">=</span> <span class=\"token function\">create_button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Submit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">-- 注册事件监听器</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button was clicked!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Another listener for the same click event.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hover\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button is hovered.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">-- 模拟事件触发</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial label:\"</span><span class=\"token punctuation\">,</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">get_label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 Submit</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\">-- 触发 click 事件</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hover\"</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\">-- 触发 hover 事件</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">-- 更新按钮标签和状态</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">set_label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Send\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">set_enabled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 禁用按钮</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Updated label:\"</span><span class=\"token punctuation\">,</span> button<span class=\"token punctuation\">:</span><span class=\"token function\">get_label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 Send</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">-- 再次触发事件（按钮被禁用，事件不执行）</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>button<span class=\"token punctuation\">:</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出 Button is disabled</span></pre></td></tr></table></figure><h1 id=\"错误处理\"><a class=\"anchor\" href=\"#错误处理\">#</a> 错误处理</h1>\n<ul>\n<li>错误捕获：通过 pcall 和 xpcall 捕获错误</li>\n<li>错误抛出：通过 error 和 assert 抛出自定义错误</li>\n<li>调试信息：通过 debug.traceback 获取错误发生时的调用栈信息</li>\n</ul>\n<p>错误捕获  <code>pcall(function, ...)</code></p>\n<ul>\n<li>第一个值为布尔值，true 表示成功，false 表示发生错误</li>\n<li>后续值为函数的返回值或错误信息</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>status<span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>divide<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 安全调用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> status <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出错误信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>错误捕获  <code>xpcall(function, errorHandler)</code></p>\n<ul>\n<li>与 pcall 类似，但允许提供一个错误处理函数，用于处理错误信息</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">errorHandler</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Caught error: \"</span> <span class=\"token operator\">..</span> error</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>status<span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token function\">xpcall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> errorHandler<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> status <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>抛出错误  <code>error(message, level)</code></p>\n<ul>\n<li>message：错误信息</li>\n<li>level：堆栈级别\n<ul>\n<li>0 不添加错误位置信息</li>\n<li>1 默认，指出错误位置（文件 + 行号）</li>\n<li>2 二层堆栈</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">checkValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value must be non-negative!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 抛出错误，2 表示上两层堆栈</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> value</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">checkValue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 运行到这里会报错</span></pre></td></tr></table></figure><p>抛出错误  <code>assert(condition, message)</code></p>\n<ul>\n<li>简化错误抛出</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">~=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Division by zero!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 条件不满足时抛出错误</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出: 5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 运行到这里会报错</span></pre></td></tr></table></figure><p>调试信息  <code>debug.traceback(message, level)</code></p>\n<ul>\n<li>提供错误发生时的调用栈信息</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">level1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occurred!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">level2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">level1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    status<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>level2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> status <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">.</span><span class=\"token function\">traceback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出调用栈信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"debug\"><a class=\"anchor\" href=\"#debug\">#</a> Debug</h1>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>debug.traceback(message, level)</code></td>\n<td>返回调用栈信息。 <code>message</code>  是前缀错误信息， <code>level</code>  指定从第几层堆栈开始</td>\n</tr>\n<tr>\n<td><code>debug.getinfo(thread, func or level, [what])</code></td>\n<td>获取函数或调用栈的元信息。 <code>what</code>  是可选参数，指定返回哪些信息，在表格下方有更多解释</td>\n</tr>\n<tr>\n<td><code>debug.getlocal(thread, level, local_index)</code></td>\n<td>获取指定调用栈层级的局部变量。 <code>local_index</code>  是变量的索引（从 1 开始）</td>\n</tr>\n<tr>\n<td><code>debug.setlocal(thread, level, local_index, value)</code></td>\n<td>修改指定调用栈层级的局部变量值</td>\n</tr>\n<tr>\n<td><code>debug.getupvalue(func, upvalue_index)</code></td>\n<td>获取闭包的上值。 <code>upvalue_index</code>  是上值的索引（从 1 开始）</td>\n</tr>\n<tr>\n<td><code>debug.setupvalue(func, upvalue_index, value)</code></td>\n<td>修改闭包的上值</td>\n</tr>\n<tr>\n<td><code>debug.upvalueid(func, upvalue_index)</code></td>\n<td>获取闭包上值的唯一标识 ID，用于比较两个上值是否相同</td>\n</tr>\n<tr>\n<td><code>debug.upvaluejoin(func1, upvalue_index1, func2, upvalue_index2)</code></td>\n<td>将  <code>func1</code>  的上值与  <code>func2</code>  的上值绑定，两个函数共享同一个上值</td>\n</tr>\n<tr>\n<td><code>debug.gethook([thread])</code></td>\n<td>获取指定线程的调试钩子函数及其设置</td>\n</tr>\n<tr>\n<td><code>debug.sethook([thread], hook, mask, [count])</code></td>\n<td>设置调试钩子函数。 <code>mask</code>  可以是 &quot;c&quot;（函数调用）、&quot;r&quot;（函数返回）、&quot;l&quot;（每行代码）</td>\n</tr>\n<tr>\n<td><code>debug.getmetatable(value)</code></td>\n<td>获取指定对象的元表</td>\n</tr>\n<tr>\n<td><code>debug.setmetatable(value, metatable)</code></td>\n<td>设置指定对象的元表</td>\n</tr>\n<tr>\n<td><code>debug.getregistry()</code></td>\n<td>返回 Lua 的全局注册表，用于存储全局变量和内部状态</td>\n</tr>\n<tr>\n<td><code>debug.debug()</code></td>\n<td>启动一个简单的交互调试器</td>\n</tr>\n</tbody>\n</table>\n<p><code>debug.getinfo</code>  中的可选参数用来指定需要返回的函数信息的类型</p>\n<ul>\n<li>n：函数的名称及相关信息（如果有）。包括以下字段：\n<ul>\n<li>name：函数名称（如果可以推断出来）</li>\n<li>namewhat：函数名称的来源描述（如 &quot;global&quot;、&quot;local&quot;、&quot;method&quot; 或 &quot;&quot;）</li>\n</ul>\n</li>\n<li>S：函数定义的来源信息。包括以下字段：\n<ul>\n<li>source：定义函数的源码文件路径（以 @ 开头）或字符串（以 = 开头）</li>\n<li>short_src：简短的源码路径（仅文件名）</li>\n<li>linedefined：函数起始定义的行号</li>\n<li>lastlinedefined：函数定义结束的行号</li>\n<li>what：函数类型（如 &quot;Lua&quot; 表示 Lua 函数，&quot;C&quot; 表示 C 函数）</li>\n</ul>\n</li>\n<li>l：当前函数调用时的行号\n<ul>\n<li>currentline：当前执行的行号</li>\n</ul>\n</li>\n<li>f：函数本身\n<ul>\n<li>func：返回该函数的引用</li>\n</ul>\n</li>\n<li>L：一个布尔值，表示函数中所有行的可执行代码是否存在（不常用）</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 获取调用栈信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">.</span><span class=\"token function\">traceback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 获取函数信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>info <span class=\"token operator\">=</span> debug<span class=\"token punctuation\">.</span><span class=\"token function\">getinfo</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token string\">\"nSl\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>short_src<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>linedefined<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 获取并修改局部变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">local</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">.</span><span class=\"token function\">getlocal</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出: a 10</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    debug<span class=\"token punctuation\">.</span><span class=\"token function\">setlocal</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 输出: 20</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 设置调试钩子</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>debug<span class=\"token punctuation\">.</span><span class=\"token function\">sethook</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hook triggered:\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"crl\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"垃圾回收\"><a class=\"anchor\" href=\"#垃圾回收\">#</a> 垃圾回收</h1>\n<ul>\n<li>Lua 采用了自动内存管理，不需要关心内存的分配和回收</li>\n<li>Lua 运行了一个垃圾收集器来收集所有不可能再访问到的对象</li>\n<li>收集器使用这两个数字来控制垃圾收集循环： 垃圾收集器间歇率 和 垃圾收集器步进倍率\n<ul>\n<li>垃圾收集器间歇率：控制收集频率</li>\n<li>垃圾收集器步进倍率：控制收集器运作速度相对于内存分配速度的倍率。增大这个值不仅会让收集器更加积极，还会增加每个增量步骤的长度。默认值是 200，这表示收集器以内存分配的 &quot;两倍&quot; 速度工作</li>\n</ul>\n</li>\n</ul>\n<p>垃圾回收器函数  <code>collectgarbage()</code></p>\n<ul>\n<li><code>collectgarbage(&quot;collect&quot;)</code> ：做一次完整的垃圾收集循环</li>\n<li><code>collectgarbage(&quot;count&quot;)</code> ：以 K 字节数为单位返回 Lua 使用的总内存数。 这个值有小数部分，所以只需要乘上 1024 就能得到 Lua 使用的准确字节数（除非溢出）</li>\n<li><code>collectgarbage(&quot;restart&quot;)</code> ：重启垃圾收集器的自动运行</li>\n<li><code>collectgarbage(&quot;setpause&quot;)</code> ：将 arg 设为收集器的 间歇率。 返回 间歇率 的前一个值</li>\n<li><code>collectgarbage(&quot;setstepmul&quot;)</code> ：返回 步进倍率 的前一个值</li>\n<li><code>collectgarbage(&quot;step&quot;)</code> ：单步运行垃圾收集器。 步长 &quot;大小&quot; 由 arg 控制。 传入 0 时，收集器步进（不可分割的）一步。 传入非 0 值， 收集器收集相当于 Lua 分配这些多（K 字节）内存的工作。 如果收集器结束一个循环将返回 true</li>\n<li><code>collectgarbage(&quot;stop&quot;)</code> ：停止垃圾收集器的运行。 在调用重启前，收集器只会因显式的调用运行</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>table <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">collectgarbage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>table <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">collectgarbage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">collectgarbage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">collectgarbage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Lua",
                "Lua"
            ]
        },
        {
            "id": "https://maikire.xyz/2025/01/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://maikire.xyz/2025/01/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "正则表达式",
            "date_published": "2025-01-10T04:00:00.000Z",
            "content_html": "<h1 id=\"正则表达式regular-expression\"><a class=\"anchor\" href=\"#正则表达式regular-expression\">#</a> 正则表达式 (Regular Expression)</h1>\n<p>正则表达式是一种文本模式，用于模式匹配、查找、替换、验证、提取文本数据<br />\n正则表达式可以应用于各种编程语言和文本处理工具中</p>\n<h1 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h1>\n<h2 id=\"常用字符\"><a class=\"anchor\" href=\"#常用字符\">#</a> 常用字符</h2>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[ABC]</td>\n<td>匹配 [] 中出现的所有字符。例如：[ABC] 匹配字符串 &quot;AEBECE&quot; 结果为  <span class=\"blue\">A</span>E<span class=\"blue\">B</span>E<span class=\"blue\">C</span>E</td>\n</tr>\n<tr>\n<td>[^ABC]</td>\n<td>匹配除了 [^A] 中出现的所有字符。例如：[^ABC] 匹配字符串 &quot;AEBECE&quot; 结果为 A<span class=\"blue\">E</span>B<span class=\"blue\">E</span>C<span class=\"blue\">E</span></td>\n</tr>\n<tr>\n<td>[A-Z]</td>\n<td>匹配范围内的所有字符，区分大小写</td>\n</tr>\n<tr>\n<td>[\\s\\S]</td>\n<td>匹配所有</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配换行符以外的字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母、数字、下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配非字母、数字、下划线</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配任意数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配任意非数字</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配所有空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配所有非空白符，不包括换行</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界匹配</td>\n</tr>\n<tr>\n<td>\\cx</td>\n<td>匹配由 x 指明的控制字符。例如： \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符</td>\n</tr>\n<tr>\n<td>\\xn</td>\n<td>n 为十六进制转义值。正则表达式中可以使用 ASCII 编码</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>匹配 num，其中 num 是一个正整数</td>\n</tr>\n<tr>\n<td>\\nm</td>\n<td>标识一个八进制转义值或一个向后引用</td>\n</tr>\n<tr>\n<td>\\nml</td>\n<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml</td>\n</tr>\n<tr>\n<td>\\un</td>\n<td>n 是一个用四个十六进制数字表示的 Unicode 字符</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配输入字符串的结尾位置。使用 \\ 匹配特殊字符本身</td>\n</tr>\n<tr>\n<td>()</td>\n<td>标记一个子表达式的开始和结束位置。用圆括号 () 将所有选择项括起来，相邻的选择项之间用 | 分隔</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符 (非贪婪匹配是最小匹配)</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配换行符以外的字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义符</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置，当该符号在 [] 表达式中使用时，表示不接受该方括号表达式中的字符集合</td>\n</tr>\n<tr>\n<td>[</td>\n<td>标记一个中括号表达式的开始</td>\n</tr>\n<tr>\n<td>{</td>\n<td>标记限定符表达式的开始</td>\n</tr>\n<tr>\n<td>|</td>\n<td>指明两项之间的一个选择</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>匹配确定的 n 次。 A {n} 表示匹配 ‘A’ n 次</td>\n</tr>\n<tr>\n<td><code>&#123;n,&#125;</code></td>\n<td>至少匹配 n 次</td>\n</tr>\n<tr>\n<td><code>&#123;n,m&#125;</code></td>\n<td>最少匹配 n 次，且最多匹配 m 次</td>\n</tr>\n<tr>\n<td>?=</td>\n<td>正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串。A (?=B) 查找 B 前面的 A</td>\n</tr>\n<tr>\n<td>?&lt;=</td>\n<td>(?&lt;=B) A 查找 B 后面的 A</td>\n</tr>\n<tr>\n<td>?!</td>\n<td>负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。A (?!B) 查找后面不是 B 的 A</td>\n</tr>\n<tr>\n<td>?&lt;!</td>\n<td>(?&lt;!B) A 查找前面不是 B 的 A 的</td>\n</tr>\n<tr>\n<td>?:</td>\n<td>非捕获。 (?:a) 匹配 a 但是不捕获 a</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"捕获组\"><a class=\"anchor\" href=\"#捕获组\">#</a> 捕获组</h2>\n<p>捕获组是用来提取匹配字符串中的子串的一种机制<br />\n一个括号就是一个捕获组，它不仅用于逻辑分组（改变运算优先级），还会自动捕获匹配的内容，供后续使用</p>\n<p>所有捕获的组都按从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式<br />\n group (0) 始终代表整个匹配结果，group (n) 表示第 n 个捕获组</p>\n<p>命名捕获组：(?P&lt;name&gt; 表达式)，使用 group (&quot;name&quot;) 获取命名捕获组</p>\n<h2 id=\"反向引用\"><a class=\"anchor\" href=\"#反向引用\">#</a> 反向引用</h2>\n<p>反向引用是正则表达式中一种用来 引用之前捕获的分组内容 的机制。它允许在模式中或替换操作中重复使用已经匹配的内容</p>\n<p>语法：使用 \\1 \\2 \\3 ... 表示之前捕获的组</p>\n<p>反向引用的最简单的、最有用的应用之一就是查找文本中两个相同且相邻的单词<br />\n字符：A is is the ...<br />\n 表达式为： <code>\\b([a-z]+) \\1\\b</code>  或  <code>\\b([\\w]+) \\1\\b</code> <br />\n 如果结尾不添加 \\b，则会错误的匹配 &quot;is issued&quot; 或 &quot;this is&quot; 等单词<br />\n另外 (.)\\1+ 可以匹配多个连续的字符</p>\n<h2 id=\"非捕获元字符\"><a class=\"anchor\" href=\"#非捕获元字符\">#</a> 非捕获元字符</h2>\n<p>非捕获组的作用是匹配模式中的内容，但不会将其存储为一个捕获组。这在需要匹配一些内容但不希望占用捕获组编号时非常有用<br />\n非捕获元字符  <code>?:</code>  或  <code>?=</code>  或  <code>?!</code>  来重写捕获，忽略对相关匹配的保存<br />\n例如： <code>(?:a|b|c)\\d</code>  匹配字符 ab2 的结果为 b2 但是 b2 不在捕获组中<br />\n例如： <code>(?:https)</code>  在匹配网址的时候匹配 https 但是不捕获</p>\n<h1 id=\"修饰符标记\"><a class=\"anchor\" href=\"#修饰符标记\">#</a> 修饰符（标记）</h1>\n<p>标记也称为修饰符，用于指定额外的匹配策略。标记不写在正则表达式里，格式为 /flags 例如 /gi</p>\n<p>下表列出了常用的修饰符</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>ignore - 不区分大小写</td>\n</tr>\n<tr>\n<td>g</td>\n<td>global - 全局匹配</td>\n</tr>\n<tr>\n<td>m</td>\n<td>multi line - 多行匹配</td>\n</tr>\n<tr>\n<td>s</td>\n<td>. 匹配换行符 \\n</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"运算符优先级\"><a class=\"anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h1>\n<p>相同优先级的从左到右进行运算，不同优先级的先高后低，可以使用括号 () 来提升优先级</p>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>\\</td>\n<td>转义符，用于转义元字符或特殊含义字符</td>\n</tr>\n<tr>\n<td>2</td>\n<td>[]</td>\n<td>字符类，用于匹配字符集合</td>\n</tr>\n<tr>\n<td>3</td>\n<td>()</td>\n<td>分组和捕获，用于分组表达式或指定优先级</td>\n</tr>\n<tr>\n<td>4</td>\n<td>?，*，+，{}</td>\n<td>量词运算符，用于指定字符或子表达式的重复次数</td>\n</tr>\n<tr>\n<td>5</td>\n<td>^，$</td>\n<td>锚点，用于匹配字符串的开头或结尾</td>\n</tr>\n<tr>\n<td>6</td>\n<td>|</td>\n<td>或运算符，用于匹配多个选项中的一个</td>\n</tr>\n<tr>\n<td>7</td>\n<td>字面值或模式</td>\n<td>普通字符或模式，用于直接匹配指定字符或表达式</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"正则表达式应用\"><a class=\"anchor\" href=\"#正则表达式应用\">#</a> 正则表达式应用</h1>\n<ul>\n<li>捕获组和非捕获组需要根据实际情况自行更改</li>\n<li>验证用户名和密码（不同平台有不同的规则，以下只是举一个例子）\n<ul>\n<li>用户名： <code>^[a-zA-Z]\\w&#123;5,15&#125;$</code></li>\n<li>密码： <code>(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[_#@]+$).&#123;8,&#125;</code>  组成，并且第一个字必须为字母 6~16 位</li>\n</ul>\n</li>\n<li>验证手机号码： <code>^1[3|4|5|7|8][0-9]\\d&#123;8&#125;$</code></li>\n<li>验证身份证号 (15 位或 18 位数字)： <code>\\d&#123;14&#125;[[0-9],0-9xX]</code></li>\n<li>验证 Email 地址： <code>\\b[\\w.%+-]+@[\\w.-]+\\.[a-zA-Z]&#123;2,&#125;\\b</code>  或  <code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code></li>\n<li>只能输入由数字和 26 个英文字母组成的字符串： <code>^[A-Za-z0-9]+$</code></li>\n<li>整数或小数： <code>^[-]?[0-9]+([.][0-9]+)&#123;0,1&#125;$</code></li>\n<li>只能输入数字： <code>^[0-9]*$</code></li>\n<li>只能输入 n 位的数字： <code>^\\d&#123;n&#125;$</code></li>\n<li>只能输入至少 n 位的数字： <code>^\\d&#123;n,&#125;$</code></li>\n<li>只能输入 m~n 位的数字： <code>^\\d&#123;m,n&#125;$</code></li>\n<li>只能输入零和非零开头的数字： <code>^(0|[1-9][0-9]*)$</code></li>\n<li>只能输入有两位小数的正实数： <code>^[0-9]+(\\.[0-9]&#123;2&#125;)?$</code></li>\n<li>只能输入有 1~3 位小数的正实数： <code>^[0-9]+(\\.[0-9]&#123;1,3&#125;)?$</code></li>\n<li>只能输入非零的正整数： <code>^\\+?[1-9][0-9]*$</code></li>\n<li>只能输入非零的负整数： <code>^\\-[1-9][0-9]*$</code></li>\n<li>只能输入长度为 3 的字符： <code>^.&#123;3&#125;$</code></li>\n<li>只能输入由 26 个英文字母组成的字符串： <code>^[A-Za-z]+$</code></li>\n<li>只能输入由 26 个大写英文字母组成的字符串： <code>^[A-Z]+$</code></li>\n<li>只能输入由 26 个小写英文字母组成的字符串： <code>^[a-z]+$</code></li>\n<li>验证是否含有  <code>^ % &amp; ; = ? $ \\ &quot; '</code>  等字符： <code>[%&amp;',;=?$\\\\^]+</code></li>\n<li>只能输入汉字： <code>^[\\u4e00-\\u9fa5]+$</code></li>\n<li>验证 URL： <code>(http[s]?://)?([\\w-]+\\.)+[\\w-]+(/[\\w|\\.|/|?|%|&amp;|=|_|-]*)?</code></li>\n<li>验证一年的 12 个月： <code>^(0?[1-9]|1[0-2])$</code></li>\n<li>验证一个月的 31 天： <code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li>\n<li>获取日期正则表达式： <code>\\d&#123;4&#125;[年\\-\\.\\/\\|\\\\]0?(1[0-2]|[1-9])[月\\-\\.\\/\\|\\\\]\\b0?(3[01]|[12][0-9]|[1-9])\\b日?</code></li>\n<li>匹配双字节字符 (包括汉字在内)： <code>[^\\x00-\\xff]</code>\n<ul>\n<li>可以用来计算字符串的长度（一个双字节字符长度计 2，ASCII 字符计 1）</li>\n</ul>\n</li>\n<li>匹配空白行的正则表达式： <code>\\n\\s*\\r</code>\n<ul>\n<li>可以用来删除空白行</li>\n</ul>\n</li>\n<li>匹配 HTML 标记的正则表达式： <code>&lt;(\\w+)([^&gt;]*?)&gt;(.*?)&lt;/\\1&gt;|&lt;(\\w+)([^&gt;]*?)\\s?/&gt;</code>\n<ul>\n<li>这个方法只能匹配简单的 HTML 标记</li>\n</ul>\n</li>\n<li>匹配首尾空白字符的正则表达式： <code>^\\s*|\\s*$</code>\n<ul>\n<li>可以用来删除行首行尾的空白字符（包括空格、制表符、换页符等）</li>\n</ul>\n</li>\n<li>匹配帐号是否合法（字母开头，允许 5-16 字节，允许字母数字下划线）： <code>^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</code>\n<ul>\n<li>表单验证时很实用</li>\n</ul>\n</li>\n<li>匹配腾讯 QQ 号： <code>[1-9][0-9]&#123;4,&#125;</code>\n<ul>\n<li>腾讯 QQ 号从 10 000 开始</li>\n</ul>\n</li>\n<li>匹配中国邮政编码： <code>^[1-9]\\d&#123;5&#125;$</code>\n<ul>\n<li>中国邮政编码为 6 位数字</li>\n</ul>\n</li>\n<li>匹配 IPv4 地址： <code>\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b</code></li>\n<li>匹配 MAC 地址： <code>([0-9A-Fa-f]&#123;2&#125;[:|-])&#123;5&#125;[0-9A-Fa-f]&#123;2&#125;</code></li>\n</ul>\n",
            "tags": [
                "正则表达式",
                "正则表达式"
            ]
        },
        {
            "id": "https://maikire.xyz/2024/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "url": "https://maikire.xyz/2024/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "title": "操作系统",
            "date_published": "2024-10-01T05:00:00.000Z",
            "content_html": "<p>王道 408 操作系统笔记</p>\n<h1 id=\"操作系统概述\"><a class=\"anchor\" href=\"#操作系统概述\">#</a> 操作系统概述</h1>\n<h2 id=\"概念-功能-目标\"><a class=\"anchor\" href=\"#概念-功能-目标\">#</a> 概念、功能、目标</h2>\n<p>概念</p>\n<ul>\n<li>作为系统资源的管理者（基本功能）</li>\n<li>作为用户和计算机硬件之间的接口（用户接口）\n<ul>\n<li>命令接口\n<ul>\n<li>联机命令接口，又称交互式命令接口</li>\n<li>脱机命令接口，又称批处理命令接口</li>\n</ul>\n</li>\n<li>程序接口：由系统调用组成</li>\n<li>图形用户接口：GUI，图形用户界面</li>\n<li>首选 系统调用 和 图形用户界面</li>\n</ul>\n</li>\n<li>实现对计算机资源的扩充</li>\n<li>覆盖了软件的机器称为扩充机器或虚拟机</li>\n</ul>\n<p>目标（方便用户使用）</p>\n<ul>\n<li>方便性</li>\n<li>有效性</li>\n<li>可扩充性</li>\n<li>开放性</li>\n</ul>\n<p><img data-src=\"213081351.jpg\" alt=\"img\" /></p>\n<h2 id=\"特征\"><a class=\"anchor\" href=\"#特征\">#</a> 特征</h2>\n<p>四大特征：并发、共享、虚拟、异步 （并发和共享是最基本的特征）</p>\n<p>并发和并行</p>\n<ul>\n<li>并发：多个事件交替发生，并发 = 串行 = 同步 = 单线程</li>\n<li>并行：多个事件同时发生，并行 = 异步 = 多线程</li>\n</ul>\n<p>共享</p>\n<ul>\n<li>互斥共享方式：一个时间段内只允许一个进程访问该资源</li>\n<li>同时共享方式：允许一个时间段内由多个进程 “同时” 对它们进行访问</li>\n</ul>\n<p>虚拟</p>\n<ul>\n<li>把一个物理上的实体变为若干个逻辑上的对应物</li>\n<li>时分复用技术，例如虚拟处理器</li>\n<li>空分复用技术，例如虚拟存储器</li>\n</ul>\n<p>异步</p>\n<ul>\n<li>又称多道程序设计。在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进。</li>\n<li>只有系统拥有并发性，才有可能导致异步性。</li>\n</ul>\n<h2 id=\"发展-分类\"><a class=\"anchor\" href=\"#发展-分类\">#</a> 发展、分类</h2>\n<ul>\n<li>手工操作阶段\n<ul>\n<li>纸带机：用户独占全机、人机速度矛盾</li>\n</ul>\n</li>\n<li>批处理阶段（多任务集中处理）\n<ul>\n<li>单道批处理系统\n<ul>\n<li>外围机 —— 磁带</li>\n</ul>\n</li>\n<li>多道批处理系统\n<ul>\n<li>提高：系统资源利用率、I/O 设备利用率、吞吐量（首选吞吐量）</li>\n<li>增加系统开销</li>\n<li>作业的结构：程序 数据 作业说明书</li>\n<li>硬件支持：中断、通道</li>\n<li>操作系统开始出现、中断、并发</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>分时操作系统\n<ul>\n<li>轮流处理作业</li>\n<li>不能处理紧急任务</li>\n<li>多用户、交互性</li>\n<li>优先保证响应时间（交互性）</li>\n<li>主要解决交互性问题</li>\n<li>最关键的问题是：能在一短的时间内，使所有用户程序都能运行</li>\n<li>分时操作系统的响应与系统时钟的频率无关</li>\n<li>操作系统正式形成</li>\n</ul>\n</li>\n<li>实时操作系统\n<ul>\n<li>短时间内做出正确的响应</li>\n<li>优先处理紧急任务</li>\n<li>硬实时系统：必须在严格的时间内完成处理</li>\n<li>软实时系统：可以偶尔犯错</li>\n</ul>\n</li>\n<li>网络操作系统\n<ul>\n<li>数据通信</li>\n</ul>\n</li>\n<li>分布式操作系统\n<ul>\n<li>由多个计算机组成的一个系统，这些计算机之间可以通信来交换信息，互相之间无主次之分，它们共享系统资源，程序由系统中的全部或部分计算机协同执行</li>\n</ul>\n</li>\n<li>个人计算机操作系统</li>\n</ul>\n<h2 id=\"运行机制-体系结构\"><a class=\"anchor\" href=\"#运行机制-体系结构\">#</a> 运行机制、体系结构</h2>\n<p>运行机制</p>\n<ul>\n<li>两种指令\n<ul>\n<li>特权指令，例如：写时钟、I/O、中断处理、关中断、内存清零、停机、各种调度</li>\n<li>非特权指令，例如：读时钟、取数、寄存器清零</li>\n</ul>\n</li>\n<li>两种处理器状态\n<ul>\n<li>核心态（root），又称管态、内核态，CPU 在核心态中可以执行除了陷入指令以外的全部指令</li>\n<li>用户态，又称目态。在用户态发生 不等于 在用户态执行</li>\n</ul>\n</li>\n<li>两种程序\n<ul>\n<li>内核程序（运行在核心态）</li>\n<li>应用程序</li>\n</ul>\n</li>\n</ul>\n<p>操作系统内核</p>\n<ul>\n<li>内核是计算机上配置的底层软件</li>\n<li>时钟管理（实现计时功能）</li>\n<li>中断机制（在中断机制中，只有一小部分功能属于内核）</li>\n<li>原语（程序运行具有原子性，不可中断）</li>\n<li>支撑功能</li>\n<li>对系统资源进行管理的功能\n<ul>\n<li>进程管理</li>\n<li>存储器管理</li>\n<li>设备管理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"中断-异常\"><a class=\"anchor\" href=\"#中断-异常\">#</a> 中断、异常</h2>\n<p>中断机制</p>\n<ul>\n<li>中断机制是操作系统必须提供的功能，由操作系统介入，开展管理工作</li>\n<li>用户态 —&gt; 核心态 的唯一途径是中断，状态转换由硬件（硬件中的中断隐指令）完成</li>\n<li>CPU 一旦响应中断，则会关闭中断屏蔽，以防止其他低级或同级中断的干扰，但更高级别的中断依然可能打断当前的任务</li>\n<li>中断向量：提供中断服务程序的入口地址或中断服务程序的首地址</li>\n<li>发生中断时\n<ul>\n<li>操作系统：提供中断服务、初始化中断向量表、保存中断屏蔽字（关闭中断屏蔽）、保存通用寄存器、保存栈指针（SP）、保存任务控制块（TCB）</li>\n<li>中断隐指令：保存断点、保存当前程序计数器（PC）、保存当前处理器状态字（PSW）、关中断、触发中断服务程序、状态转换（用户态 —&gt; 核心态）</li>\n<li>硬件机构：保存返回地址、保存中断向量地址、保存快表（TLB）、保存 Cache</li>\n</ul>\n</li>\n<li>中断结束后：恢复断点信息，继续执行被中断的指令</li>\n</ul>\n<p>中断的分类</p>\n<ul>\n<li>内中断（异常），信号来源于 CPU 内部\n<ul>\n<li>在用户态执行（在用户态发生），随后进入内核态</li>\n<li>软件中断\n<ul>\n<li>陷入（trap），在用户态下使用特权指令会引发陷入中断</li>\n<li>故障（fault），例如：缺页中断</li>\n</ul>\n</li>\n<li>硬件中断\n<ul>\n<li>中止（abort）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>外中断，信号来源于 CPU 外部\n<ul>\n<li>例如：I/O 中断、时钟中断（发生时钟中断后，由时钟中断服务程序更新所有与时间相关的内容）</li>\n<li>可屏蔽中断 INTR</li>\n<li>不可屏蔽中断 NMI</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"21155618.jpg\" alt=\"img\" /></p>\n<h2 id=\"系统调用\"><a class=\"anchor\" href=\"#系统调用\">#</a> 系统调用</h2>\n<p>概念：应用程序通过系统调用请求操作系统的服务。保证系统的稳定性和安全性。</p>\n<p>系统调用的过程</p>\n<ul>\n<li>传递系统调用参数</li>\n<li>执行 trap 指令</li>\n<li>执行响应的服务程序</li>\n<li>返回用户态</li>\n</ul>\n<p>系统调用和库函数的区别</p>\n<ul>\n<li>系统调用是操作系统向上层提供的接口</li>\n<li>有的库函数是对系统调用的进一步封装</li>\n<li>当今编写的应用程序大多是通过高级语言提供的库函数间接地进行系统调用</li>\n</ul>\n<h2 id=\"操作系统结构\"><a class=\"anchor\" href=\"#操作系统结构\">#</a> 操作系统结构</h2>\n<ul>\n<li>分层法</li>\n<li>模块化</li>\n<li>宏内核：又称大内核，将操作系统的主要功能模块都作为系统内核，运行在核心态。不利于扩展</li>\n<li>微内核：只把最基本的功能保留在内核。频繁的状态切换会导致性能问题</li>\n<li>外核：为虚拟机分配资源，使每个虚拟机都认为它拥有完整的资源，能保持多个虚拟机不发生冲突</li>\n</ul>\n<h2 id=\"操作系统引导\"><a class=\"anchor\" href=\"#操作系统引导\">#</a> 操作系统引导</h2>\n<ul>\n<li>BIOS 是固化在主板 ROM 芯片上的程序，包含系统设置程序、基本输入输出程序、开机自检程序、系统启动自举程序等</li>\n<li>引导程序储存在装有操作系统的硬盘的引导分区中</li>\n</ul>\n<p>操作系统引导过程</p>\n<ol>\n<li>激活 CPU</li>\n<li>硬件自检</li>\n<li>加载带有操作系统的硬盘</li>\n<li>加载主引导记录（MBR）</li>\n<li>扫描硬盘分区表，加载硬盘活动分区</li>\n<li>加载分区引导记录（PBR）</li>\n<li>加载启动管理器</li>\n<li>加载操作系统</li>\n</ol>\n<h2 id=\"虚拟机\"><a class=\"anchor\" href=\"#虚拟机\">#</a> 虚拟机</h2>\n<ul>\n<li>第一类虚拟机管理程序：最高特权的程序，向上层提供多个虚拟机，不同的虚拟机可以运行不同的操作系统</li>\n<li>第二类虚拟机管理程序：在主操作系统中运行第二类虚拟机管理程序，由它控制另一个操作系统。本质是在主操作系统中运行的一个进程。例如：VMware</li>\n</ul>\n<h1 id=\"进程与线程\"><a class=\"anchor\" href=\"#进程与线程\">#</a> 进程与线程</h1>\n<h2 id=\"进程的定义-组成-组织方式-特征\"><a class=\"anchor\" href=\"#进程的定义-组成-组织方式-特征\">#</a> 进程的定义、组成、组织方式、特征</h2>\n<p>不同的角度有不同的定义</p>\n<ul>\n<li>进程是一个正在执行程序的实例</li>\n<li>进程是一个程序及其数据从磁盘加载到内存后，在 CPU 上的执行过程</li>\n<li>进程是一个具有独立功能的程序在一个数据集合上运行的过程</li>\n<li>进程 = PCB + 程序 + 数据</li>\n</ul>\n<p>组成：PCB（进程控制块，进程存在的唯一标志）、程序段、数据段</p>\n<p>组织方式：链接方式（指针指向不同的队列）、索引方式（索引表）</p>\n<p>特征：动态性、并发性、独立性、异步性、结构性</p>\n<p>进程是从操作系统出发的，由系统生成，是操作系统资源分配的基本单位</p>\n<h2 id=\"进程的状态与转换\"><a class=\"anchor\" href=\"#进程的状态与转换\">#</a> 进程的状态与转换</h2>\n<p>状态：</p>\n<ul>\n<li>运行状态：占有 CPU，并在 CPU 上运行，单核只能一个进程（双核两个）（CPU ✔，其它资源 ✔）</li>\n<li>就绪状态：已经具备运行条件，但是没有空闲的 CPU，暂时不能运行（CPU ✘，其它资源 ✔）</li>\n<li>阻塞状态：为了等待某个事件的发生，暂时不能运行（CPU ✘，其它资源 ✘）</li>\n<li>创建状态：创建 PCB，程序段，数据段</li>\n<li>终止状态：回收内存，程序段，数据段，撤销 PCB</li>\n</ul>\n<p>进程状态间的转换（只能这样转化）</p>\n<ul>\n<li>创建态 -&gt; 就绪态</li>\n<li>就绪态 -&gt; 运行态</li>\n<li>运行态 -&gt; 就绪态</li>\n<li>运行态 -&gt; 中止态（比如数组越界）</li>\n<li>运行态 -&gt; 阻塞态（主动）</li>\n<li>阻塞态 -&gt; 就绪态（被动）</li>\n</ul>\n<h2 id=\"进程控制\"><a class=\"anchor\" href=\"#进程控制\">#</a> 进程控制</h2>\n<p>进程控制：用 “原语” 实现各种进程状态转换</p>\n<p>原语做的事情：</p>\n<ol>\n<li>更新 PCB 中的信息</li>\n<li>将 PCB 插入合适的队列</li>\n<li>分配 / 回收资源</li>\n</ol>\n<p>进程控制相关的原语</p>\n<ul>\n<li>进程的创建\n<ul>\n<li>创建原语：申请空白 PCB、为新进程分配所需资源、初始化 PCB、将 PCB 插入就绪队列</li>\n<li>引起进程创建的事件：用户登录、作业调度、提供服务、应用请求</li>\n</ul>\n</li>\n<li>进程的终止\n<ul>\n<li>撤销原语</li>\n<li>引起进程中止的事件：正常结束、异常结束、外界干预</li>\n</ul>\n</li>\n<li>进程的阻塞\n<ul>\n<li>阻塞原语：运行态 -&gt; 阻塞态</li>\n<li>阻塞是主动行为，自我阻塞</li>\n<li>引起进程阻塞的事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作</li>\n</ul>\n</li>\n<li>进程的唤醒：\n<ul>\n<li>唤醒原语：阻塞态 -&gt; 就绪态</li>\n<li>唤醒是被动行为，被唤醒</li>\n<li>引起进程唤醒的事件：等待的事件发生</li>\n</ul>\n</li>\n<li>进程的切换\n<ul>\n<li>切换原语</li>\n<li>引起进程切换的事件：当前进程事件片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止</li>\n</ul>\n</li>\n</ul>\n<p>父进程与子进程</p>\n<ul>\n<li>可以并发</li>\n<li>共享部分资源，不共享虚拟地址空间，子进程在创建时会分配虚拟地址空间</li>\n<li>每个进程都有自己的 PCB</li>\n</ul>\n<h2 id=\"进程通信\"><a class=\"anchor\" href=\"#进程通信\">#</a> 进程通信</h2>\n<p>共享存储（分配共享空间，且互斥（P、V 操作））</p>\n<ul>\n<li>基于数据结构的共享：固定分配（低级）</li>\n<li>基于存储区的共享：划分存储区（高级）</li>\n<li>操作系统只提供共享空间和相关的工具，数据交换由用户自己完成</li>\n</ul>\n<p>消息传递</p>\n<ul>\n<li>消息：消息头 消息体</li>\n<li>直接通信方式：直接挂载消息到 PCB 的消息队列中</li>\n<li>间接通信方式：间接利用信箱发送消息</li>\n</ul>\n<p>管道通信（pipe）</p>\n<ul>\n<li>管道实际上就是缓冲区</li>\n<li>单个管道只能半双工通信</li>\n<li>互斥（没写满，不能读，反之同理）</li>\n<li>管道的大小固定</li>\n</ul>\n<h2 id=\"线程概念和多线程模型\"><a class=\"anchor\" href=\"#线程概念和多线程模型\">#</a> 线程概念和多线程模型</h2>\n<p>线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位。引入线程后，进一步提高了系统的并发度。</p>\n<p>资源分配、调度发生变化：进程是资源分配的基本单位，线程是调度的基本单位<br />\n并发性：各线程间也能并发，提升了并发度<br />\n系统开销：可以只在进程中切换，减小了 CPU 切换环境的系统开销</p>\n<p>线程有哪些重要的属性</p>\n<ul>\n<li>线程是处理机调度的基本单位</li>\n<li>多 CPU 计算机中，各个线程可占用不同的 CPU</li>\n<li>每个线程都有一个线程 ID、线程控制块（TCB）</li>\n<li>线程也有就绪、阻塞、运行三种基本状态</li>\n<li>线程几乎不拥有系统资源</li>\n<li>同一进程的不同线程间共享进程的资源</li>\n<li>由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预</li>\n<li>同一进程中的线程切换，不会引起进程切换</li>\n<li>不同进程中的线程切换，会引起进程切换</li>\n<li>切换同进程内的线程，系统开销很小</li>\n<li>切换进程，系统开销较大</li>\n</ul>\n<p>线程的实现方式</p>\n<ul>\n<li>用户级线程（ULT）\n<ul>\n<li>由应用管理，从用户的视角看能看到的线程</li>\n<li>各进程轮流执行时间片，进程内的各线程共用进程的时间片</li>\n<li>用户级线程的调度以进程为单位，同一进程内的线程不能并行</li>\n<li>用户级线程被阻塞，整个进程也会被阻塞</li>\n<li>用户级线程的创建和调度不需要内核的支持。跨进程的线程调度需要内核的支持</li>\n</ul>\n</li>\n<li>内核级线程（KLT）\n<ul>\n<li>由操作系统管理，从操作系统内核视角看能看到的线程</li>\n<li>内核级线程才是处理机分配的单位</li>\n<li>同一进程的线程切换，需要由用户态转到内核态进行</li>\n</ul>\n</li>\n<li>n 个 ULT 可以映射到 m 个 KLT 上（n&gt;=m）</li>\n</ul>\n<p>多线程模型（用户线程对内核线程）</p>\n<ul>\n<li>多对一模型\n<ul>\n<li>n 个 ULT 映射到 1 个 KLT</li>\n<li>优点：开销小，效率高</li>\n<li>缺点：容易阻塞，并发度不高</li>\n</ul>\n</li>\n<li>一对一模型\n<ul>\n<li>n 个 ULT 映射到 n 个 KLT</li>\n<li>优点：并发能力很强</li>\n<li>缺点：占用成本高，开销大</li>\n</ul>\n</li>\n<li>多对多模型\n<ul>\n<li>n 个 ULT 映射到 m 个 KLT 上（n&gt;=m）</li>\n<li>中和以上两种优缺点</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"处理机调度的概念-层次\"><a class=\"anchor\" href=\"#处理机调度的概念-层次\">#</a> 处理机调度的概念、层次</h2>\n<p>作业：一个具体的任务（向系统提交作业 ≈ 让操作系统启动一个程序）。作业是从用户角度出发的，由用户提交，以用户为单位。</p>\n<p>调度：通常进程数量大于处理机数量，所以要按照一定的算法选择一个进程，并将处理机分配给它运行，以实现进程的并发执行</p>\n<p>三个层次</p>\n<ul>\n<li>高级调度（作业调度）\n<ul>\n<li>辅助外存与内存之间的调度，作业调入时会建立相应的 PCB，作业调出时才撤销 PCB，调入可由操作系统决定，作业运行结束才调出</li>\n</ul>\n</li>\n<li>中级调度（内存调度）\n<ul>\n<li>将暂时不用的进程放到外存（PCB 不外放），提高内存利用率和系统吞吐量，进程状态为挂起状态，形成挂起队列</li>\n</ul>\n</li>\n<li>低级调度（进程调度）\n<ul>\n<li>最基本，用算法为进程分配处理机资源，几十 ms 一次</li>\n</ul>\n</li>\n</ul>\n<p>七状态模型（有两个版本）</p>\n<p>王道版本：<br />\n<img data-src=\"215522977.jpg\" alt=\"img\" /></p>\n<p>汤小丹版本：<br />\n<img data-src=\"215522978.jpg\" alt=\"img\" /></p>\n<h2 id=\"进程调度的时机-切换与过程-调度方式\"><a class=\"anchor\" href=\"#进程调度的时机-切换与过程-调度方式\">#</a> 进程调度的时机、切换与过程、调度方式</h2>\n<p>进程调度的时机</p>\n<ul>\n<li>什么时候需要进程调度\n<ul>\n<li>主动放弃（进程正常终止、运行过程中发生异常而终止、进程主动请求阻塞）</li>\n<li>被动放弃（分给进程的时间片用完、有更紧急的事需要处理、有更高优先级的进程进入就绪队列）</li>\n</ul>\n</li>\n<li>什么时候不能进行进程调度\n<ul>\n<li>在处理中断的过程中</li>\n<li>在操作系统内核程序临界区中\n<ul>\n<li>临界资源：一个时段段内各进程互斥地访问临界资源</li>\n<li>临界区：访问临界资源的那段代码（一段程序）</li>\n<li>内核程序临界区会访问就绪队列，导致其上锁</li>\n</ul>\n</li>\n<li>在原子操作过程中（原语）</li>\n</ul>\n</li>\n</ul>\n<p>2012 年 408 真题：进程处于临界区时不能进行处理机调度（✘）</p>\n<ul>\n<li>原因：操作系统内核程序临界区中不能进行处理机调度。普通的临界区不会直接影响操作系统内核的管理工作，可以进行处理机调度。</li>\n</ul>\n<p>进程的切换与过程</p>\n<ul>\n<li>“狭义的调度” 与 “进程切换” 的区别\n<ul>\n<li>狭义的进程调度：选择一个进程</li>\n<li>广义的进程调度：选择一个进程 + 进程切换</li>\n</ul>\n</li>\n<li>进程切换的过程需要做什么\n<ul>\n<li>对原来运行进程各种数据的保存</li>\n<li>对新的进程各种数据的恢复</li>\n</ul>\n</li>\n</ul>\n<p>调度方式</p>\n<ul>\n<li>非剥夺调度方式（非抢占式）：只允许进程主动放弃处理机</li>\n<li>剥夺调度方式（抢占式）：进程被动放弃，可以优先处理紧急任务，适合分时操作系统、实时操作系统</li>\n</ul>\n<h2 id=\"调度算法的评价指标\"><a class=\"anchor\" href=\"#调度算法的评价指标\">#</a> 调度算法的评价指标</h2>\n<p>CPU 利用率 = CPU 忙碌的时间 / 总时间</p>\n<p>系统吞吐量 = 总共完成了多少道作业 / 总共用了多少时间</p>\n<p>周转时间</p>\n<ul>\n<li>周转时间 = 提交作业 到 完成作业 所花费的时间</li>\n<li>平均周转时间 = 各作业周转时间之和 / 作业数</li>\n<li>带权周转时间 = 作业周转时间 / 作业实际运行的时间</li>\n<li>平均带权周转时间 = 各作业带权周转时间 / 作业数</li>\n<li>周转时间是批处理系统的评价指标（缩短周转时间以提升系统吞吐量）</li>\n</ul>\n<p>等待时间（进程或作业等待处理机状态时间的和）</p>\n<ul>\n<li>进程：等待被服务的时间之和</li>\n<li>作业：建立后的等待时间 + 作业在外存后备队列中等待的时间</li>\n</ul>\n<p>响应时间 = 用户提交请求 到 首次产生响应 所花费的时间</p>\n<h2 id=\"fcfs-sjf-hrrn调度算法适合早期的批处理系统\"><a class=\"anchor\" href=\"#fcfs-sjf-hrrn调度算法适合早期的批处理系统\">#</a> FCFS、SJF、HRRN 调度算法（适合早期的批处理系统）</h2>\n<p>1、先来先服务（FCFS）</p>\n<ul>\n<li>先到达先进行服务</li>\n<li>作业 - 后备队列；进程 - 就绪队列</li>\n<li>非抢占式</li>\n<li>公平、算法简单</li>\n<li>对长作业有利、对短作业不利、不会饥饿</li>\n</ul>\n<p>2、短作业优先（SJF，shortest job first）</p>\n<ul>\n<li>最短（服务时间最短）的作业优先得到服务，时间相同，先到达的先被服务</li>\n<li>非抢占式（SJF）：选最短需要时间的作业先进入运行态</li>\n<li>抢占式（SRTN）：有新作业进入就绪队列或有作业完成时，检查队列中需要时间最小的作业</li>\n<li>在所有进程都几乎同时到达时，采用 SJP 调度算法的平均等待时间、平均周转时间最少。若没有这个前提，则抢占式的短作业 / 进程优先的平均时间最少</li>\n<li>优点：“最短的” 平均等待时间、平均周转时间</li>\n<li>缺点：对短作业有利，对长作业不利，可能产生饥饿现象</li>\n</ul>\n<p>3、高响应比优先（HRRN）</p>\n<ul>\n<li>响应比 = (等待时间 + 要求服务时间) / 要求服务时间\n<ul>\n<li>因此，等待时间是响应比的主要因素</li>\n</ul>\n</li>\n<li>要综合考虑作业 / 进程的等待时间和要求服务的时间</li>\n<li>在每次调度时先计算各个作业 / 进程的响应比，选择响应比最高的作业 / 进程为其服务</li>\n<li>进程主动放弃 CPU 时，需要该算法选取就绪队列的作业</li>\n<li>非抢占式、不会饥饿</li>\n</ul>\n<h2 id=\"时间片轮转-优先级调度-多级反馈队列适合交互式系统\"><a class=\"anchor\" href=\"#时间片轮转-优先级调度-多级反馈队列适合交互式系统\">#</a> 时间片轮转、优先级调度、多级反馈队列（适合交互式系统）</h2>\n<p>1、时间片轮转算法（RR）</p>\n<ul>\n<li>算法思想：公平轮流地位各个进程服务，让每个进程在一定时间间隔内都可以得到响应</li>\n<li>算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（例如 100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列重新排队</li>\n<li>只能用于进程调度、抢占式</li>\n<li>优点：公平，响应快，适用于分时操作系统，不会饥饿</li>\n<li>缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度</li>\n</ul>\n<p>2、优先级调度算法</p>\n<ul>\n<li>算法思想：根据任务的紧急程度来决定处理顺序</li>\n<li>算法规则：每个进程 / 作业有各自的优先级，调度时选择优先级最高的作业 / 进程</li>\n<li>适用：作业 / 进程 / IO</li>\n<li>抢占式 / 不可抢占均有</li>\n<li>静态优先级：不变</li>\n<li>动态优先级：可以变</li>\n<li>就绪队列可以有多个，可以按照不同的优先级组织</li>\n<li>一般情况下的进程优先级：系统进程 &gt; 用户进程，前台进程 &gt; 后台进程，I/O 进程 &gt; 计算进程</li>\n<li>可以从追求公平（运行时间和等待时间）、提升资源利用率（IO 密集型进程优先）等角度考虑改变优先级</li>\n<li>可能会饥饿</li>\n</ul>\n<p>3、多级反馈队列调度算法</p>\n<ul>\n<li>算法实现：设置多级就绪队列，各级队列优先级从高到低，时间片从小到大。新进程到达时先进入第一级队列，按照 FCFS 原则排队等待被分配时间片。若用完时间片进程还未结束，则进程进入下一级队列队尾。如果此时已经在最下级的队列，则重新放回最下级队列末尾。只有第 K 级队头的进程为空时，才会为 K+1 级对头的进程分配时间片，被抢占处理机的进程重新放回原队列队尾。</li>\n<li>优点：对各个进程相对公平（FCFS 的优点），每个新到达的进程都可以很快就得到响应（RR 的优点）；短进程只用较少的时间就可以完成（SPF 的优点）；不必实现估计进程的运行时间（避免用户作假）；可灵活地调整对各类进程的偏好程度，比如 CPU 密集型进程、IO 密集型进程（可以将 IO 密集型进程放回原队列）</li>\n<li>默认抢占式、会饥饿</li>\n</ul>\n<p>下列进程调度算法中，可能引起进程长时间得不到运行的算法是？<br />\nA. 时间片轮转算法<br />\n B. 不可抢占式静态优先级算法<br />\n C. 可抢占式静态优先级算法<br />\n D. 不可抢占式动态优先级算法</p>\n<p>答案：B</p>\n<h2 id=\"进程同步-进程互斥\"><a class=\"anchor\" href=\"#进程同步-进程互斥\">#</a> 进程同步、进程互斥</h2>\n<p>1、进程同步</p>\n<ul>\n<li>指为了完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调他们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作</li>\n<li>总之：系统中各进程之间逻辑上的相互制约关系称为同步</li>\n</ul>\n<p>2、进程互斥</p>\n<p>把一个时间段内只允许一个进程使用的资源称为临界资源。</p>\n<p>对临界资源的互斥访问，可以在逻辑上分为四个部分：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    entry section<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 进入区 对访问的资源检查或进行上锁</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    critical section<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 临界区 访问临界资源的那部分代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    exit section<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 退出区 负责解锁</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    remainder section<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 剩余区 其它处理</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>准则</p>\n<ul>\n<li>空闲让进：空的可以直接进去（允许进程访问空闲资源）</li>\n<li>忙则等待：繁忙不能进去（两个进程不能同时进入临界区）</li>\n<li>有限等待：不能让进程等待无限长时间（进程等待进入临界区的时间是有限的）</li>\n<li>让权等待（非必要）：不能进去，不要堵着（不能进入临界区的执行态进程立即放弃 CPU）</li>\n</ul>\n<h2 id=\"进程互斥的软件实现方法\"><a class=\"anchor\" href=\"#进程互斥的软件实现方法\">#</a> 进程互斥的软件实现方法</h2>\n<p>1、单标志法</p>\n<ul>\n<li>两个进程在访问完临界区后会把使用临界区的权限教给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予</li>\n<li>可以实现互斥</li>\n<li>存在的问题：p1 要访问的话，必须 p0 先访问，违背空闲让进原则</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> turn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//p0 进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>turn <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>turn <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>turn <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>turn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、双标志先检查</p>\n<ul>\n<li>算法思想：设置一个 bool 数组 flag [] 来标记各进程是否想要进入临界区的意愿</li>\n<li>主要问题：由于进程是并发进行的，可能会违背忙则等待的原则</li>\n<li>解决方法：让 “检查” 和 “上锁” 这两个动作一气呵成</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//p0 进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3、双标志后检查</p>\n<ul>\n<li>算法思想：设置一个 bool 数组 flag [] 来标记各进程是否想要进入临界区的意愿，不过是先上锁后检查</li>\n<li>主要问题：由于进程是并发进行的，可能会两个同时上锁，都进不去，违反空闲让进原则和有限等待原则。会发生饥饿</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//p0 进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4、Peterson 算法</p>\n<ul>\n<li>主动让对方先使用处理器</li>\n<li>遵循空闲让进、忙则等待、有限等待三个原则，但是未遵循让权等待的原则</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各进程进入临界区的意愿</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> turn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 允许进入临界区的进程的编号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//p0 进程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>turn <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> turn <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//p1 进程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>turn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> turn <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>critical section<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>remainder section<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"进程互斥的硬件实现方法\"><a class=\"anchor\" href=\"#进程互斥的硬件实现方法\">#</a> 进程互斥的硬件实现方法</h2>\n<p>1、中断屏蔽方法</p>\n<ul>\n<li>简单、高效</li>\n<li>多处理机可能会同时访问临界资源（在一个 CPU 上关闭中断不会影响其他 CPU 的运行）</li>\n<li>使用 OS 内核进程</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关中断（不允许进程中断）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 临界区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开中断</span></pre></td></tr></table></figure><p>2、TestAndSet（TS 指令）</p>\n<ul>\n<li>别称：TestAndSetLock（TSL 指令）</li>\n<li>TSL 是用硬件实现的，不允许中断，上锁、检查一气呵成。“锁” 是共享的，适用于多处理器系统</li>\n<li>不满足让权等待，会盲等</li>\n<li>可能会饥饿（从等待的进程中随机选取一个进入临界区，有的进程可能一直选不上）</li>\n</ul>\n<p>C 语言描述逻辑</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//true 表示已经上锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool <span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span>bool<span class=\"token operator\">*</span> lock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bool old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span>lock <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 以下是使用 TSL 指令实现互斥的算法逻辑</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上锁并检查</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 临界区代码段；</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>lock <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 其他代码；</span></pre></td></tr></table></figure><p>3、Swap 指令</p>\n<ul>\n<li>别称：Exchange 指令、XCHG 指令</li>\n<li>Swap 指令是用硬件实现的，不允许中断</li>\n<li>简单、适用多处理机、支持多临界区</li>\n<li>不能让权等待</li>\n<li>可能会饥饿（从等待的进程中随机选取一个进入临界区，有的进程可能一直选不上）</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//true 表示已经上锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>bool<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> bool<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bool temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 以下是使用 Swap 指令实现互斥的算法逻辑</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>bool old <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>old <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 临界区代码段；</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>lock <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 剩余代码段；</span></pre></td></tr></table></figure><h2 id=\"信号量机制\"><a class=\"anchor\" href=\"#信号量机制\">#</a> 信号量机制</h2>\n<p>低级进程通信原语：wait (S) 原语和 signal (S) 原语，分别简称 P (S)、V (S)</p>\n<p>信号量</p>\n<ul>\n<li>信号量是一种变量，表示系统中某种资源的数量。信号量引入了阻塞机制，实现了让权等待</li>\n<li>4 种信号量：整型信号量、记录型信号量、AND 型信号量、信号量集</li>\n<li>填空：在操作系统中，信号量表示资源实体，是一个与队列有关的____变量，其值仅能用 P、V 操作来改变\n<ul>\n<li>答案：整型</li>\n</ul>\n</li>\n</ul>\n<p>1、整形信号量</p>\n<ul>\n<li>用一个整数表示系统资源的变量，用来表示系统中某种资源的数量</li>\n<li>可能会出现盲等</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> S <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 资源量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> S<span class=\"token punctuation\">)</span> <span class=\"token comment\">//wait 原语，相当于：进入区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>S <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果资源数不够，就循环等待</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    S <span class=\"token operator\">=</span> S <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果资源数够，则占用一个资源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> S<span class=\"token punctuation\">)</span> <span class=\"token comment\">//signal 原语，相当于 “退出区”</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    S <span class=\"token operator\">=</span> S <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用完资源后，在退出区释放资源</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2、记录型信号量</p>\n<ul>\n<li>记录型数据结构表示的信号量</li>\n<li>不会盲等</li>\n<li>除非特别说明，否则默认 S 为记录型信号量</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 记录型信号量的定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">semaphore</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 资源量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">process</span><span class=\"token operator\">*</span> L<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等待该资源的进程链表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 某进程需要使用资源时，通过 wait 原语申请</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>semaphore S<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">block</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻塞进程（运行态 -> 阻塞态），将该进程加入到信号量 S 的等待队列 (阻塞队列) 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 进程使用完资源后，通过 signal 原语释放</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>semaphore S<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>valie <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 唤醒进程（阻塞态 -> 就绪态）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"用信号量机制实现进程互斥-同步-前驱关系\"><a class=\"anchor\" href=\"#用信号量机制实现进程互斥-同步-前驱关系\">#</a> 用信号量机制实现进程互斥、同步、前驱关系</h2>\n<p>P 操作使资源减一，V 操作使资源加一</p>\n<p>1、实现进程互斥</p>\n<ol>\n<li>设置互斥信号量 mutex，初值为 1</li>\n<li>对不同的临界资源需要设置不同的互斥信号量</li>\n<li>PV 必须成对出现</li>\n</ol>\n<p>2、实现进程同步（保证一前一后的操作顺序）</p>\n<ol>\n<li>设置同步信号量 S，初始为 0</li>\n<li>在先执行的操作之后执行 V (S)</li>\n<li>在后执行的操作之前执行 P (S)</li>\n</ol>\n<p>3、实现进程的前驱关系<br />\n注意：部分题目给出的不是下面的前驱关系图，而是程序执行顺序图，此时要先画出前驱关系图，然后按照下面的步骤操作</p>\n<ol>\n<li>要为每一对前驱关系各设置一个同步变量</li>\n<li>在先执行的操作之后对相应的同步变量执行 V 操作</li>\n<li>在后执行的操作之前对相应的同步变量执行 P 操作</li>\n</ol>\n<p><img data-src=\"217713731.jpg\" alt=\"img\" /></p>\n<h2 id=\"生产者-消费者问题\"><a class=\"anchor\" href=\"#生产者-消费者问题\">#</a> 生产者 - 消费者问题</h2>\n<p>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待。只有缓冲区不空时，消费者才能从中取出产品，否则必须等待</p>\n<p>缓冲区是临界资源，各进程必须互斥访问，否则可能会发生数据覆盖（两个生产者向同一个区域写入数据）</p>\n<p>实现互斥的 P 操作要放在实现同步的 P 操作之后，不然会发生死锁</p>\n<p>V 操作不会导致进程发生阻塞的状态，所以部分 V 操作可以交换</p>\n<p>处理数据的操作最好不要放在临界区，不然并发度会降低</p>\n<p>遇到同步问题时应该以 生产者 - 消费者问题 为参考</p>\n<p>【2015 年 408 统考】进程 A、B 利用信箱（缓冲区）通信，进程在自己的信箱中取一个数据，同时向对方的信箱中放入一个数据。进程 A 的信箱当前容量为 x、最大容量为 M，进程 B 的信箱当前容量为 y、最大容量为 N</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 分析：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//    缓冲区需要互斥访问</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    2 个缓冲区对应 2 个信号量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    存在最大容量，需要额外设置信号量防止溢出 -> 容量满时，剩余容量为 0 -> 设置剩余容量可以阻塞进程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>semaphore mutexA <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 互斥访问信箱</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>semaphore mutexB <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>semaphore boxA <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 信箱当前容量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>semaphore boxB <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>semaphore surplusA <span class=\"token operator\">=</span> M <span class=\"token operator\">-</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 信箱剩余容量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>semaphore surplusB <span class=\"token operator\">=</span> N <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//A 进程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>boxA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutexA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 取数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutexA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>surplusA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 处理数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>surplusB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutexB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 放入数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutexB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>boxB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//B 进程</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>boxB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutexB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 取数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutexB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>surplusB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 处理数据</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>surplusA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutexA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 放入数据</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutexA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>boxA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"多生产者-多消费者模型\"><a class=\"anchor\" href=\"#多生产者-多消费者模型\">#</a> 多生产者 - 多消费者模型</h2>\n<p>在生产 - 消费者问题中，如果缓冲区大小为 1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区，如果没有时间分析就直接加上互斥信号量（注意：实现互斥的 P 操作要放在实现同步的 P 操作之后，不然会发生死锁）</p>\n<p>如果不同读者的行为不同，或者一份数据只允许读一次，可以用信号量数组控制每一个读进程</p>\n<p>分析同步问题时，应该从 “事件” 的角度来考虑</p>\n<p><img data-src=\"21153508.jpg\" alt=\"img\" /></p>\n<p><img data-src=\"217731751.jpg\" alt=\"img\" /></p>\n<h2 id=\"吸烟者问题\"><a class=\"anchor\" href=\"#吸烟者问题\">#</a> 吸烟者问题</h2>\n<p>解决 “可以让生产多个产品的单生产者” 问题提供一个思路；</p>\n<p>若一个生产者要生产多种产品（或者说会引发多种前驱事件），那么各个 V 操作应该放在各自对应的 “事件” 发生之后的位置</p>\n<p><img data-src=\"217739518.jpg\" alt=\"img\" /></p>\n<h2 id=\"读者-写者问题\"><a class=\"anchor\" href=\"#读者-写者问题\">#</a> 读者 - 写者问题</h2>\n<p>允许多个读者同时对文件执行读操作</p>\n<p>只允许一个写者往文件中写信息</p>\n<p>任一写者在完成写操作之前不允许其他读者或写者工作</p>\n<p>写者执行写操作前，应让已有的读者和写者全部退出</p>\n<p>遇到复杂的互斥问题时应该以 读者 - 写者问题 为参考，注意计数器 count 的使用</p>\n<p>有助于理解的并发情况：读者 1 -&gt; 写者 1 -&gt; 读者 2</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore rw <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于实现对文件的互斥访问。表示当前是否有进程在访问共享文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录当前有几个读进程在访问文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>semaphore mutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于保证对 count 变量的互斥访问</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>semaphore w <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于实现 “写优先”</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写之前 “加锁”</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写之后 “解锁”</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各读进程互斥访问 count</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 第一个读进程</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻止写进程</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问文件的读进程数 + 1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读文件</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各读进程互斥访问 count</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问文件的读进程数 - 1</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一个读进程负责 “解锁”</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"哲学家进餐问题\"><a class=\"anchor\" href=\"#哲学家进餐问题\">#</a> 哲学家进餐问题</h2>\n<p>五个人，必须拿左右的筷子才能吃饭</p>\n<p>目标：避免死锁发生</p>\n<p>解决方案：</p>\n<ol>\n<li>可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐，这样可以保证至少有一个哲学家是可以拿到左右两只筷子。</li>\n<li>要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一只后再等待另一只的情况。</li>\n<li>仅当一个哲学家左右两只筷子都可用时才允许他抓起筷子。</li>\n</ol>\n<p>方案 3 的代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore chopstick<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>semaphore mutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 互斥地取筷子</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 若将互斥信号量设置为 哲学家数量 - 1，可以在不发生死锁的情况下，尽可能提高并发量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 若有其他限制，例如哲学家要拿起两个筷子和一个碗才能就餐，此时互斥信号量可以设置为 min (哲学家数量 - 1, 碗数量)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Pi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//i 号哲学家的进程</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拿右</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拿左，注意取余</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 吃饭...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 思考...</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"管程\"><a class=\"anchor\" href=\"#管程\">#</a> 管程</h2>\n<p>1、为什么要引入管程：PV 操作容易出错、困难</p>\n<p>2、管程的定义和基本特征</p>\n<p>定义：</p>\n<ul>\n<li>局部于管程的共享数据结构说明（数据结构）</li>\n<li>对该数据结构进程操作的一组过程（函数）</li>\n<li>对局部于管程的共享数据设置初始值的语句（初始化变量）</li>\n<li>管程有一个名字（命名）</li>\n</ul>\n<p>基本特征</p>\n<ul>\n<li>局部于管程数据结构只能被局部于管程的过程所访问（private 变量）</li>\n<li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据（public 函数）</li>\n<li>每次仅允许一个进程在管程内执行某个内部过程（对管程的互斥访问）</li>\n<li>心得：管程类似于 C++ 的类，数据放在 private 中，函数放在 public 中</li>\n</ul>\n<p>常见操作</p>\n<ul>\n<li>wait (x) 对应 P 操作，正在调用管程的进程因为需要 x 条件而被阻塞或挂起。调用 wait () 就是将自己插入到 x 条件的等待队列中，并释放管程，此时其他进程可以使用管程</li>\n<li>signal (x) 对应 V 操作，当触发 x 条件时，进程调用 signal ()，重新启动</li>\n</ul>\n<p>拓展 1：用管程解决生产者消费者问题</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 由编译器实现互斥访问管程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>monitor producerconsumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    condition full<span class=\"token punctuation\">,</span> empty<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于实现同步（消费者队列和生产者队列）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 产品数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>Item item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">insert_item</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Item <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">remove_item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>end monitor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 使用</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        item <span class=\"token operator\">=</span> 生产一个产品<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        producerconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        item <span class=\"token operator\">=</span> producerconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        消费产品 item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>拓展 2：Java 中类似于管程的机制</p>\n<p>java 中用 synchronized 来描述一个函数，这个函数同一时间只能被一个线程调用</p>\n<h2 id=\"死锁的概念\"><a class=\"anchor\" href=\"#死锁的概念\">#</a> 死锁的概念</h2>\n<p>1、什么是死锁</p>\n<p>各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p>\n<p>2、进程死锁、饥饿、死循环的区别</p>\n<p>死锁：</p>\n<ul>\n<li>定义：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</li>\n<li>区别：至少有两个的进程同时发生死锁。必定处于阻塞态</li>\n</ul>\n<p>饥饿：</p>\n<ul>\n<li>定义：由于长期得不到想要的资源，某进程无法向前推进的现象。</li>\n<li>区别：可能只有一个进程发生饥饿。可能处于就绪态（长期得不到 CPU，例如 SJF 算法），也能处于阻塞态（例如长期得不到 I/O 设备）</li>\n</ul>\n<p>死循环：</p>\n<ul>\n<li>定义：某进程执行过程中一直跳不出某个循环的现象。</li>\n<li>区别：死循环是程序员的问题</li>\n</ul>\n<p>3、死锁产生的必要条件（产生死锁必须同时满足以下 4 个条件）</p>\n<ul>\n<li>互斥条件：多个进程争夺互斥资源</li>\n<li>不可剥夺条件：进程获得的资源不能由其它进程强行抢夺</li>\n<li>请求和保持条件：某个进程有了资源，还在请求其他资源，且对已有资源保持不放</li>\n<li>循环等待条件：存在资源的循环等待链，且每类资源都只有一个。循环等待未必死锁（同类资源数量大于 1），死锁必定循环等待</li>\n</ul>\n<p>4、什么时候会发生死锁</p>\n<ul>\n<li>对系统资源的竞争</li>\n<li>进程推进顺序非法</li>\n<li>信号量的使用不当</li>\n</ul>\n<p>5、死锁的处理策略</p>\n<ul>\n<li>预防死锁：静态策略，至少破坏一个死锁的必要条件</li>\n<li>避免死锁：动态检测，防止系统进入不安全的状态</li>\n<li>死锁的检测和解除：允许死锁发生，出现死锁后采取措施解除死锁</li>\n</ul>\n<h2 id=\"预防死锁\"><a class=\"anchor\" href=\"#预防死锁\">#</a> 预防死锁</h2>\n<ul>\n<li>破坏互斥条件\n<ul>\n<li>把互斥的资源改造为共享资源（例如：用 SPOOLing 技术将打印机在逻辑上改造为共享设备）</li>\n<li>缺点：有些互斥性不能破坏</li>\n</ul>\n</li>\n<li>破坏不剥夺条件\n<ul>\n<li>方案 1：当请求得不到满足的时候，立即释放手里的资源</li>\n<li>方案 2：由系统介入，强行帮助剥夺（例如：高优先级剥夺低优先级）</li>\n<li>缺点：复杂，造成之前工作失效，增加系统开销，降低系统吞吐量，会全部放弃，可能导致饥饿。</li>\n<li>适用性：常用于易于保存状态和恢复的资源，如 CPU 的寄存器和内存资源，一般不能用于打印机之类的资源</li>\n</ul>\n</li>\n<li>破坏请求和保持条件\n<ul>\n<li>预先静态分配方法\n<ul>\n<li>一次性全部申请，如果申请不到，不要允许</li>\n<li>缺点：资源利用率极低，可能会导致某些进程饥饿</li>\n</ul>\n</li>\n<li>允许进程只获得初期资源后就开始运行\n<ul>\n<li>运行过程中逐步释放已使用完毕的全部资源后，才能请求新的资源</li>\n<li>对静态分配法方法的改进</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>破坏循环等待条件\n<ul>\n<li>顺序资源分配法：对资源编号，进程按编号递增顺序请求资源</li>\n<li>缺点：不方便增加新的设备，实际使用与递增顺序不一致，会导致资源的浪费，必须按规定次序申请资源</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"避免死锁\"><a class=\"anchor\" href=\"#避免死锁\">#</a> 避免死锁</h2>\n<p>安全序列：按特定序列运行进程，为正在运行的进程分配其所需的资源，使每个进程都能顺利完成，不会使系统发生死锁</p>\n<p>安全状态：只要能找到一个安全系列，系统就是安全状态，反之则为不安全状态</p>\n<p>安全状态与死锁：如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就可能发生死锁（处于不安全状态未必发生了死锁，但发生死锁一定处于不安全状态）</p>\n<p>避免系统进入不安全状态：银行家算法</p>\n<ul>\n<li>初始分配完成后，优先全部分配给最少的，并且拿回资源</li>\n<li>结构：矩阵（资源作为列），a [i][j] 表示第 i 个进程所需的第 j 个资源的数量</li>\n<li>算法步骤：\n<ol>\n<li>检查此次申请是否超过了之前声明的最大需求数</li>\n<li>检查此时系统剩余的可用资源是否还能满足这次请求</li>\n<li>试探着分配，更改各数据结构</li>\n<li>用安全性算法检查此次所分配是否会导致系统进入不安全状态</li>\n</ol>\n</li>\n<li>找安全序列的步骤：多轮次检查，每轮找到能够满足最大需求的进程，将他们放入安全序列并取回他们持有的资源，然后开始下一轮检查（各轮次之间存在先后顺序，各轮次内找到的进程之间没有先后顺序）</li>\n</ul>\n<h2 id=\"检测和解除死锁\"><a class=\"anchor\" href=\"#检测和解除死锁\">#</a> 检测和解除死锁</h2>\n<p>死锁的检测</p>\n<ol>\n<li>用某种数据结构来保存资源的请求和分配信息（资源分配图）</li>\n<li>提供一种算法，利用上述信息来检测系统是否已进入死锁状态（死锁检测算法）</li>\n</ol>\n<p>资源分配图如下<br />\n<img data-src=\"21181059.jpg\" alt=\"img\" /></p>\n<p>死锁检测算法：依次消除与不阻塞进程（申请的资源数还足够的进程）相连的边，直到无边可消。如果不能消除所有的边，则发生死锁，剩余的进程为死锁进程，如果能消除所有的边，则称资源分配图是可完全简化的</p>\n<p>死锁定理：如果某时刻系统的资源分配图是不可完全简化的，那么此时系统死锁。（如果某时刻系统的资源分配图中没有环路，那么此时系统必定不会死锁）</p>\n<p>死锁的解除</p>\n<ul>\n<li>资源剥夺法：挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。（注意防止饥饿）</li>\n<li>撤销进程法：强制撤销部分，甚至全部死锁进程，并剥夺这些进程的资源。（代价非常大）</li>\n<li>进程回退法：让一个或多个死锁进程回退到足以避免死锁的地步。（要求系统设置还原点）</li>\n<li>如何决定 “对谁动手”：进程优先级、已执行时间、剩余执行时间、进程占用资源的数量、进程是交互式还是批处理式</li>\n</ul>\n<h2 id=\"进程数与同类资源数的关系\"><a class=\"anchor\" href=\"#进程数与同类资源数的关系\">#</a> 进程数与同类资源数的关系</h2>\n<ul>\n<li>不会发生死锁（存在安全序列）的情况\n<ul>\n<li>每个进程仅需要 1 个同类资源</li>\n<li>同类资源数 &gt;= 所有进程的最大需求之和 - 进程数 + 1</li>\n</ul>\n</li>\n<li>可能发生死锁的情况\n<ul>\n<li>同类资源数 &lt;= 所有进程的最大需求之和 - 进程数</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内存管理\"><a class=\"anchor\" href=\"#内存管理\">#</a> 内存管理</h1>\n<h2 id=\"内存的基础知识\"><a class=\"anchor\" href=\"#内存的基础知识\">#</a> 内存的基础知识</h2>\n<p>1、内存与地址</p>\n<ul>\n<li>1 字节 (1 Byte) = 8 个二进制位 (8 bit)</li>\n<li>2^a 写成二进制需要 a+1 位二进制数</li>\n<li>存储单元：每个地址对应一个存储单元</li>\n<li>如果计算机 “按字节编址”，则一个存储单元存放一字节的数据</li>\n<li>如果计算机 “按字编址”，则一个存储单元的大小为一个字。一个字可以由多个位组成，字的大小由计算机决定</li>\n<li>内存地址：2^a 字节的内存，地址需要用 a 个二进制位表示 0 ~ (2^a - 1)\n<ul>\n<li>注意区分：2^3 = 8，2^3 写成二进制为 1000，需要 4 位，但是内存是从 0 开始计数的，所以实际上的寻址范围是 0 ~ (8 - 1)，一共有 8 个数，最大为 7 = 111，所以需要 3 位</li>\n</ul>\n</li>\n</ul>\n<p>逻辑地址 与 物理地址</p>\n<ul>\n<li>逻辑地址：相对地址（相对于进程起始地址的地址，逻辑地址是从 0 开始的）</li>\n<li>物理地址：绝对地址（真正在内存中的地址）</li>\n</ul>\n<p>2、进程运行的基本原理</p>\n<p>从写程序到程序运行</p>\n<ol>\n<li>编辑：写代码</li>\n<li>编译：形成多组目标模块</li>\n<li>链接：形成一个完整的装入模块（例如 Windows 中的.exe 文件）、完整的逻辑地址</li>\n<li>装入：地址转换，将装入模块装入内存</li>\n</ol>\n<p>三种链接方式：</p>\n<ul>\n<li>静态链接：在程序运行前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件</li>\n<li>装入时动态链接：将各目标模块装入内存时，边装入边链接的链接方式</li>\n<li>运行时动态链接：在程序执行中需要该模块时，才对它进行链接，其优点时便于修改和更新</li>\n</ul>\n<p>三种装入方式</p>\n<ul>\n<li>绝对装入：在编译的时候就知道程序放在内存的哪个位置。只适合单道程序环境</li>\n<li>可重定位装入（静态重定位）：装入时将逻辑地址转换为物理地址。需要一次性全部装入</li>\n<li>动态运行时装入（动态重定位）：把地址转化推迟到程序真正要执行时才进行。</li>\n</ul>\n<p>可重装入程序通过共享来使用同一块存储空间，或通过动态链接法映射程序段，优点是减少了程序段的调入和调出，从而减少了对换数量。</p>\n<h2 id=\"内存管理的概念\"><a class=\"anchor\" href=\"#内存管理的概念\">#</a> 内存管理的概念</h2>\n<p>1、内存空间的分配与回收</p>\n<p>2、内存空间的扩充（内存的虚拟性）</p>\n<p>3、地址转换（逻辑地址与物理地址转换）</p>\n<p>4、存储保护</p>\n<ul>\n<li>设置上下限寄存器</li>\n<li>采用重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）</li>\n</ul>\n<h2 id=\"覆盖与交换\"><a class=\"anchor\" href=\"#覆盖与交换\">#</a> 覆盖与交换</h2>\n<p>内存空间的扩充</p>\n<p>覆盖技术：将程序分为多个段，内存分为 “固定区” 和 “覆盖区”，需要常驻的放在 “固定区”，调入后在运行结束前不再调出，不常用的段放在 “覆盖区”，不会同时使用的程序段共享同一块 “覆盖区”，需要用到时调入内存，用不到时掉出内存。对用户不透明，增加编程难度。适用于早期操作系统、单一连续区存储管理</p>\n<p>交换技术：内存空间紧张时，系统将内存中某些进程暂时换出外存（放入磁盘中的对换区），把外存中某些已具备运行条件的进程换入内存。PCB 会常驻内存，不会被换出。中级调度（内存调度）决定了将哪个处于挂起状态的进程换入内存。</p>\n<p>覆盖与交换是在逻辑上扩充内存，最终目的是提高 CPU 利用率</p>\n<p>虚拟存储技术</p>\n<h2 id=\"连续分配管理\"><a class=\"anchor\" href=\"#连续分配管理\">#</a> 连续分配管理</h2>\n<p>连续分配：系统为进程分配的内存是一个连续的内存空间</p>\n<p>分区分配中的存储保护采用基址寄存器和限长寄存器</p>\n<p>内存碎片</p>\n<ul>\n<li>内部碎片：分配给某进程的内存区域中，没有用上的部分</li>\n<li>外部碎片：是指内存中的某些空闲分区由于太小而难以利用\n<ul>\n<li>可以采用紧凑技术解决</li>\n</ul>\n</li>\n<li>固定大小分配必定有内部碎片，其余都有外部碎片</li>\n<li>固定和不固定同时存在：有内部碎片、有外部碎片</li>\n</ul>\n<p>连续分配</p>\n<ul>\n<li>单一连续分配\n<ul>\n<li>一个分区的储存管理又称单连续储存管理。内存被分配为系统区和用户区，系统区在低地址，用户区是一个用户进程独享</li>\n<li>不适用于多道程序设计</li>\n<li>有内部碎片，无外部碎片</li>\n<li>静态重定位</li>\n</ul>\n</li>\n<li>固定分区分配\n<ul>\n<li>将用户区分割为若干固定分区给各道程序，分割策略有分区大小相等和分区大小不相等，可以建立一个分区说明表来管理各个分区</li>\n<li>有内部碎片，无外部碎片</li>\n<li>静态重定位</li>\n</ul>\n</li>\n<li>动态分区分配\n<ul>\n<li>可变分区分配，不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要</li>\n<li>无内部碎片，无外部碎片</li>\n<li>动态重定位，需要重定位寄存器</li>\n<li>存储结构：空闲分区表或空闲分区链</li>\n<li>分配规则：动态分区分配算法（顺序分配算法和索引分配算法）</li>\n<li>回收规则：如果有相邻的空闲分区则合并分区，没有则新建表项</li>\n</ul>\n</li>\n<li>可再定位式分区分配\n<ul>\n<li>分区大小和位置可能会动态变化，内存中的空闲区可能是分散的。允许在运行时调整程序和数据的位置（重定位），以应对内存碎片和内存需求的变化</li>\n<li>有外部碎片</li>\n<li>需要进行紧凑操作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态分区分配算法\"><a class=\"anchor\" href=\"#动态分区分配算法\">#</a> 动态分区分配算法</h3>\n<p>顺序分配算法：首次适应算法、最佳适应算法、最坏适应算法、领近适应算法</p>\n<p>索引分配算法：快速适应算法、伙伴系统（可用于处理外部碎片）、哈希算法</p>\n<p>1、首次适应算法 (First Fit)</p>\n<ul>\n<li>算法思想：每次从低地址开始查找，找到第一个能满足大小的空闲分区</li>\n</ul>\n<p>2、最佳适应算法 (Best Fit)</p>\n<ul>\n<li>算法思想：为了保证 “大进程” 到来时能有连续的大片区域，可以尽可能留下大片的空闲区，优先使用更小的空闲区</li>\n<li>空闲分区按容量递增次序链接，分配内存时顺序查找空闲分区链</li>\n<li>缺点：最容易产生内存碎片（外部碎片）</li>\n</ul>\n<p>3、最坏适应算法 (Worst Fit)</p>\n<ul>\n<li>算法思想：和最佳适应算法相反，按容量递减次序排列，每次尽可能用大的分区</li>\n<li>缺点：“大进程” 可能得不到分区</li>\n</ul>\n<p>4、领近适应算法 (Next Fit)</p>\n<ul>\n<li>算法思想：每次从上次查找结束的位置开始检索</li>\n<li>缺点：大空间容易被用完</li>\n</ul>\n<p>5、对比</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>算法思想</th>\n<th>分区排列顺序</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首次适应</td>\n<td>从头到尾找适合的分区</td>\n<td>空闲分区以地址递增次序排列</td>\n<td>综合看性能最好。算法开销小，回收分区后一般不需要对空闲分区队列重新排序</td>\n<td></td>\n</tr>\n<tr>\n<td>最佳适应</td>\n<td>优先使用更小的分区，以保留更多大分区</td>\n<td>空闲分区以容量递增次序排列</td>\n<td>会有更多的大分区被保留下来，更能满足大进程需求</td>\n<td>会产生很多太小的、难以利用的碎片。算法开销大，回收分区后可能需要对空闲分区队列重新排序</td>\n</tr>\n<tr>\n<td>最坏适应</td>\n<td>优先使用更大的分区，以防止产生太小的不可用的碎片</td>\n<td>空闲分区以容量递减次序排列</td>\n<td>可以减少难以利用的小碎片</td>\n<td>大分区容易被用完，不利于大进程。算法开销大（原因同上）</td>\n</tr>\n<tr>\n<td>邻近适应</td>\n<td>由首次适应演变而来，每次从上次查找结束位置开始查找</td>\n<td>空闲分区以地址递增次序排列（可排列成循环链表）</td>\n<td>不用每次都从低地址的小分区开始检索。算法开销小（原因同首次适应算法）</td>\n<td>会使高地址的大分区也被用完</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"非连续分配管理\"><a class=\"anchor\" href=\"#非连续分配管理\">#</a> 非连续分配管理</h2>\n<p>非连续分配：为用户进程分配分散的内存空间，允许一个进程分散地装入到许多不相邻的位置。动态重定位</p>\n<ul>\n<li>基本分页存储管理（有内部碎片）</li>\n<li>基本分段存储管理（有外部碎片）</li>\n<li>段页式存储管理（有内部碎片、有外部碎片）</li>\n</ul>\n<h3 id=\"基本分页存储管理\"><a class=\"anchor\" href=\"#基本分页存储管理\">#</a> 基本分页存储管理</h3>\n<p>基本分页存储管理</p>\n<ul>\n<li>目的：提高内存利用率、提升性能</li>\n<li>分页：将内存分为大小相等的小分区，称为页框、页帧、物理块、物理页、内存块 <s>“你知道茴香豆的茴字有几种写法吗？”</s> 。将用户的进程空间（连续的空间）也分为大小相等的一个个区域，称为页、页面。操作系统以页框为基本单位分配给每个进程片，进程的页面与内存的页框一一对应</li>\n<li>页框号（或物理块号）：每个页框的编号，从 0 开始</li>\n<li>页号：每个页的编号，从 0 开始</li>\n<li>页面大小：计算机中用 2 的整数次幂表示页面的大小，单位为字节</li>\n<li>页表：存放页号和块号的对应关系，实现页号到页框号的地址映射，支持随机存取。一个进程对应一个页表，进程的每一个页面对应一个页表项，每个页表项由页号和块号组成，块号对应页框号。页表通常储存在 PCB 中（驻留在内存中）</li>\n<li>页表项长度：每个页表项的大小</li>\n<li>有内部碎片，没有外部碎片</li>\n</ul>\n<p>地址计算</p>\n<ul>\n<li>一般情况下以字节为单位分配存储空间</li>\n<li>页号不占用存储空间，页号信息是通过页表索引来隐含表示的，不需要在页表条目中重复存储</li>\n<li>设：物理内存为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>a</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^a \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，页框大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>b</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，页表项从内存地址为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">x \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 的地方开始连续存放，页表项的大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">t \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，页号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，页号数最大值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^m \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>页号数 = 页面数</li>\n<li>页框大小 = 页面大小</li>\n<li>页框数量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^{a-b} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> = 物理内存 / 页框大小</li>\n<li>页框号的取值范围 = 0 ~ (页框数量 - 1)</li>\n<li>页框号需要用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">a-b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个二进制位表示</li>\n<li>页框的起始地址 = 页面在物理内存中的起始地址 = 页框号 * 页框大小</li>\n<li>页表项的大小 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mo stretchy=\"false\">⌈</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow><mn>8</mn></mfrac></mstyle><mo stretchy=\"false\">⌉</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">t = \\lceil \\dfrac{a - b}{8} \\rceil \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> （向上取整）</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 号页表项的存放地址 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mi>x</mi><mo>+</mo><mi>t</mi><mspace width=\"0.1em\"/><mi>i</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">= x + t \\kern 1pt i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.1em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>页表大小 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mi>t</mi><mspace width=\"0.1em\"/><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.1em\"/><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mi>b</mi><mo>−</mo><mn>3</mn></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">= t \\kern 1pt 2^{a-b} = (a-b) \\kern 1pt 2^{a-b-3} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.1em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991079999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>页表长度 = 页号最大值 + 1</li>\n<li>页表最小值 = t * 页表长度</li>\n<li>页号 = ⌊逻辑地址 / 页面长度⌋（向下取整）</li>\n<li>页面大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>b</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，表示页内偏移量占 b 位</li>\n<li>页内偏移量 = 逻辑地址 % 页面长度</li>\n<li>逻辑地址的前 b 位表示页内偏移量，其余的 m 位表示页号</li>\n<li>物理地址 = 页框的起始地址 + 逻辑地址的页内偏移量</li>\n<li>注意：若题目给的数据不是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> <s>这题纯有病</s>，页框数量需要的二进制位数需要增加到能够大于 页框数量 的值，其他相关计算也需要看情况更改</li>\n</ul>\n<p>地址变换过程</p>\n<ol>\n<li>根据逻辑地址计算出页号、页内偏移量</li>\n<li>检查页号合法性（与页表长度对比），不合法会发生越界中断</li>\n<li>若页号合法，根据页表的起始地址、页号找到对应的页表项</li>\n<li>计算物理地址</li>\n<li>访问物理内存</li>\n</ol>\n<p>地址变换举例<br />\n<img data-src=\"21153559.jpg\" alt=\"img\" /></p>\n<p>地址变换机构</p>\n<ul>\n<li>硬件地址变换机构：一般用于动态重定位的情况。适用于页式存储管理、动态分区分配、页式虚拟存储管理</li>\n<li>页表寄存器（PTR），存放页表（多级页表中只储存一级页表）的起始物理地址 F 和页表长度 M，进程未执行时，页表的起始地址和页表的长度放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把它们放在页表寄存器中</li>\n</ul>\n<p>局部性原理</p>\n<ul>\n<li>时间局部性：访问某个变量后，在不久的将来还会被访问</li>\n<li>空间局部性：程序访问了某个存储单元，不久之后，其附近的存储单元也很有可能被访问</li>\n</ul>\n<p>快表（TLB）</p>\n<ul>\n<li>快表（Translation Lookaside Buffer, TLB）：是一种访问速度比内存快很多的高速缓冲存储器（又称高速缓存寄存器、联想存储器），用来存放当前访问的若干页表项，以加速地址变换的过程</li>\n<li>对应的，内存中的页表常称为慢表</li>\n</ul>\n<p>TLB 的工作过程可以总结如下</p>\n<ol>\n<li>CPU 生成一个逻辑地址</li>\n<li>检查 TLB 是否包含该逻辑地址的映射\n<ul>\n<li>如果 TLB 命中：直接使用 TLB 中的映射转换为物理地址</li>\n<li>如果 TLB 未命中：访问页表查找映射，并将结果加载到 TLB 中，然后进行地址转换</li>\n</ul>\n</li>\n<li>使用得到的物理地址访问实际的物理内存</li>\n</ol>\n<p>单级页表存在什么问题？如何解决？</p>\n<ul>\n<li>所有页表项必须连续存放，页表过大时需要很大的连续空间</li>\n<li>在一段时间内并非所有页面都用得到，因此没必要让整个页表常驻内存（利用虚拟存储技术解决）</li>\n</ul>\n<p>两级页表的原理、逻辑地址结构</p>\n<ul>\n<li>将长的页表分页，为离散的分页创建一个表，称为页目录表、外层页表、顶级页表</li>\n<li>页目录表中的编号是一级页号</li>\n<li>逻辑地址结构：一级页号 二级页号 页内偏移量</li>\n</ul>\n<p>实现地址变换：按照地址结构将逻辑地址拆分成三部分</p>\n<ol>\n<li>从 PCB 中读出页目录表始址，根据一级页号查页目录表，找到下一级页表在内存中的存放位置</li>\n<li>根据二级页号查表，找到最终想访问的内存块号</li>\n<li>结合页内偏移量得到物理地址</li>\n</ol>\n<p>多级页表</p>\n<ul>\n<li>多级页表中，各级页表的大小不能超过一个页面。若两级页表不够，可以分更多级</li>\n<li>多级页表的访问次数（假设没有快表结构）：N 级页表访问一个逻辑地址需要 N+1 次访存</li>\n<li>如果题目中说明了页号占用的空间，那就表明了系统使用多级页表结构</li>\n<li>逻辑地址空间大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>a</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^a \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，逻辑地址有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">a \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 位，页面大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>b</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，页内偏移量占 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 位，剩余 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">a-b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 位需要划分页表</li>\n<li>页表项大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>c</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^c \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，一个页面能存放 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>b</mi><mo>−</mo><mi>c</mi></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^{b-c} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个页表项，用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>−</mo><mi>c</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">b-c \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 位来表示某一级的页表索引</li>\n<li>页表数量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">⌈</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow><mrow><mi>b</mi><mo>−</mo><mi>c</mi></mrow></mfrac></mstyle><mo stretchy=\"false\">⌉</mo><mo>+</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">= \\lceil \\dfrac{a-b}{b-c} \\rceil + 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.14077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>前 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">a-b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 位划分页表后，不要忘了最后 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 位也是 1 个页表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基本分段存储管理\"><a class=\"anchor\" href=\"#基本分段存储管理\">#</a> 基本分段存储管理</h3>\n<p>1、什么是分段</p>\n<ul>\n<li>进程的地址空间：按照程序自身的逻辑关系划分为若干个大小不等的段，每段有段名，每段从 0 开始编址，每段在内存中占据连续的内存空间，各段之间可以不相邻</li>\n<li>段号的位数决定了每个进程最多可以分几个段，段内地址位数决定了每个段的最大长度是多少</li>\n<li>分段主要是为了满足用户的以下要求：方便编程、分段共享、分段保护、动态链接和动态增长</li>\n<li>分段是在编程时决定的</li>\n<li>有外部碎片，没有内部碎片</li>\n</ul>\n<p>2、什么是段表</p>\n<ul>\n<li>段表：段映射表，每个程序被分段后，用段表记录该程序在内存中存放的位置</li>\n<li>段表内容：段号 段长 基址</li>\n<li>一个进程只有一段表。各段表项长度相同。段号可以是隐含的，不占用存储空间。</li>\n</ul>\n<p>3、地址变换与分页类似</p>\n<p>4、分段、分页管理的对比</p>\n<ul>\n<li>页：信息的物理单位，实现离散分配，提高内存利用率，大小固定且由系统决定，地址是一维的，访存两次（查表 -&gt; 访问内存单元），有内部碎片</li>\n<li>段：信息的逻辑单位，对系统可见，大小不固定且由用户决定，地址是二维的，访存两次（查表 -&gt; 访问内存单元），没有内部碎片</li>\n<li>分段比分页更容易实现信息的共享和保护（将能共享的代码放到同一个段中、让段表项指向同一个段可以实现共享，对段做标记可以控制其他进程的访问，而分页不容易实现这些功能）</li>\n</ul>\n<h3 id=\"段页式管理\"><a class=\"anchor\" href=\"#段页式管理\">#</a> 段页式管理</h3>\n<p>1、分页、分段管理方式最大的优缺点</p>\n<ul>\n<li>分页：利用率高，碎片少，不方便进行信息共享和保护</li>\n<li>分段：方便信息共享和保护，如果段长大，容易产生外部碎片</li>\n</ul>\n<p>2、段页式管理方式</p>\n<ul>\n<li>先分段再分页。用分段的方法来分配和管理用户地址空间，用分页的方法来管理物理储存空间。</li>\n<li>逻辑地址结构（二维）：段号 页号 页内偏移量</li>\n</ul>\n<p>3、段表、页表</p>\n<ul>\n<li>每个进程有一张段表，每个段有一张页表。</li>\n<li>段表：段号 页表长度 页表存放块号（页表起始地址）</li>\n<li>页表：页号 块号</li>\n</ul>\n<p>4、地址变换</p>\n<ul>\n<li>段表 -&gt; 页表 -&gt; 内存单元</li>\n</ul>\n<h2 id=\"虚拟内存\"><a class=\"anchor\" href=\"#虚拟内存\">#</a> 虚拟内存</h2>\n<p>1、传统存储管理方式（例如：基本分页存储管理）的特征、缺点</p>\n<ul>\n<li>一次性：作业必须全部装入内存后才能开始运行，并发性下降</li>\n<li>驻留性：一旦作业被装入内存，就会一直驻留在内存</li>\n</ul>\n<p>2、局部性原理</p>\n<ul>\n<li>时间局部性</li>\n<li>空间局部性</li>\n<li>高速缓存技术</li>\n</ul>\n<p>3、虚拟内存的定义</p>\n<ul>\n<li>虚拟存储技术基于局部性原理，只能用于非连续分配</li>\n<li>提高内存利用率</li>\n<li>虚拟内存最大容量是计算机地址结构确定的</li>\n<li>虚拟内存的实际容量 = min (内存和外存容量之和，CPU 寻址范围)\n<ul>\n<li>例：某计算机地址结构为 32 位，按字节编址，内存大小为 512MB，外存大小为 2GB</li>\n<li>虚拟内存的最大容量为 2^32B = 4GB</li>\n<li>虚拟内存的实际容量 = min (512MB + 2GB, 4GB) = 2GB + 512MB</li>\n</ul>\n</li>\n</ul>\n<p>4、虚拟内存的特征</p>\n<ul>\n<li>多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调用内存。最基本的特征</li>\n<li>对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入换出</li>\n<li>虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量</li>\n</ul>\n<p>5、如何实现虚拟内存技术</p>\n<ul>\n<li>在程序执行过程中，当所访问的信息不再内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。</li>\n</ul>\n<p>虚拟内存技术的实现方式</p>\n<ul>\n<li>请求分页储存管理</li>\n<li>请求分段储存管理</li>\n<li>请求段页式储存管理</li>\n</ul>\n<p>虚拟内存技术的需求（做题时优先说明前三个）</p>\n<ul>\n<li>中断机构</li>\n<li>地址变换机构</li>\n<li>请求分页的页表机制</li>\n<li>请求分段的段表机制</li>\n<li>内存、外存</li>\n</ul>\n<h3 id=\"请求分页管理方式\"><a class=\"anchor\" href=\"#请求分页管理方式\">#</a> 请求分页管理方式</h3>\n<p>Linux 采用请求分页管理方式</p>\n<p>1、页表机制</p>\n<ul>\n<li>请求分页存储的页表结构（注意页号是隐含的）：页号 物理块号 状态位 访问字段 修改位 外存地址\n<ul>\n<li>状态位：是否调入内存。供程序访问时参考</li>\n<li>访问字段：被访问的次数或未被访问的时间。供选择页面换出时参考</li>\n<li>修改位：是否被修改过。供置换页面时参考</li>\n<li>外存地址：外存上的地址。供调入页面时参考</li>\n</ul>\n</li>\n<li>页表中的记录会动态修改</li>\n</ul>\n<p>2、缺页中断机构</p>\n<ul>\n<li>页面不在内存中时，发生缺页中断，进程进入阻塞态</li>\n<li>缺页中断属于内中断</li>\n<li>一条指令可能产生多次缺页中断</li>\n<li>发生缺页中断后，操作系统可能会执行 页面置换 或 分配内存</li>\n</ul>\n<p>3、地址变换机构</p>\n<p>地址转换过程</p>\n<ol>\n<li>查快表</li>\n<li>判断快表是否命中</li>\n<li>查页表，若未找到，则产生缺页中断，等待页面置换（页面的换入换出都需要启动 I/O 操作、修改页表、修改快表）</li>\n<li>根据物理块号和页内地址计算物理地址</li>\n</ol>\n<p>注意：缺页中断时未必发生页面置换，如果有空闲的内存块，就不会发生页面置换。<br />\n页面置换次数 = 缺页中断次数 - 物理块数量</p>\n<h3 id=\"页面置换算法\"><a class=\"anchor\" href=\"#页面置换算法\">#</a> 页面置换算法</h3>\n<p>计算</p>\n<ul>\n<li>页面置换次数 = 缺页中断次数 - 物理块数量</li>\n<li>缺页率 = 缺页中断次数 / 页面数量</li>\n</ul>\n<p>Belady 异常</p>\n<ul>\n<li>当分配的内存块增大时，缺页次数反而增加。</li>\n<li>堆栈类算法不可能出现 Belady 异常。只有先进先出置换算法会发生 Belady 异常（进先出置换算法基于队列实现，不是堆栈类算法）</li>\n</ul>\n<p>1、最佳置换算法（OPT）</p>\n<ul>\n<li>每次选择淘汰的页面是以后永不使用或者在最长时间内不再被访问的页面，这样可以保证最低的缺页率</li>\n<li>性能：最好。但是实际上不知道后面的页面访问序列，因此最佳置换算法是无法实现的</li>\n<li>计算：从当前位置向后扫描（向右扫描），与已经装入内存的页做对比，最后一个第一次出现的就是被淘汰的</li>\n</ul>\n<p>2、先进先出置换算法（FIFO）</p>\n<ul>\n<li>每次选择淘汰的页面是最早进入内存的页面。</li>\n<li>性能：较差，没有利用局部性原理。</li>\n<li>计算：先进先出</li>\n</ul>\n<p>3、最近最久未使用置换算法（LRU）</p>\n<ul>\n<li>每次淘汰最近最久未使用的页面。每次都要对页进行排序</li>\n<li>性能：最接近最佳置换算法，但是需要硬件支持，算法开销大</li>\n<li>计算：从当前位置向前扫描（向左扫描），与已经装入内存的页做对比，最后一个第一次出现的就是被淘汰的</li>\n</ul>\n<p>4、时钟置换算法（最近未使用算法，CLOCK 算法、NRU 算法）</p>\n<ul>\n<li>添加访问位，优先淘汰最近未用的</li>\n<li>性能：性能和算法开销较均衡的算法。</li>\n<li>计算：最多经历两轮扫描，初始为 1，扫一下为 0，再扫一下被踢。</li>\n</ul>\n<p>5、改进型的时钟置换算法</p>\n<ul>\n<li>添加访问位和修改位，优先淘汰没有被修改过的，因为没有修改过的不用进行 I/O 操作。</li>\n<li>性能：减少了 I/O 操作，但算法本身的开销可能会增加</li>\n<li>计算：多轮扫描，最多四次。淘汰次序：00 -&gt; 01（访问位改 0）-&gt; 00 -&gt; 01</li>\n</ul>\n<p>6、对比</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>算法规则</th>\n<th>优缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OPT</td>\n<td>优先淘汰最长时间内不会被访问的页面</td>\n<td>缺页率最小，性能最好。但无法实现</td>\n</tr>\n<tr>\n<td>FIFO</td>\n<td>优先淘汰最先进入内存的页面</td>\n<td>实现简单，但性能很差，可能出现 Belady 异常</td>\n</tr>\n<tr>\n<td>LRU</td>\n<td>优先淘汰最近最久没访问的页面</td>\n<td>性能很好，但需要硬件支持，算法开销大</td>\n</tr>\n<tr>\n<td>CLOCK (NRU)</td>\n<td>循环扫描各页面。第一轮淘汰访问位为 0 的，并将扫描过的页面的访问位改为 0。若第一轮没选中，则进行第二轮扫描</td>\n<td>实现简单，算法开销小。但未考虑页面是否被修改过</td>\n</tr>\n<tr>\n<td>改进型 CLOCK （改进型 NRU）</td>\n<td>用（访问位，修改位）的形式表述。第一轮：淘汰 (0, 0) -&gt; 第二轮：淘汰 (0, 1)，并将扫描过的页面的访问位都置为 0 -&gt; 第三轮：淘汰 (0, 0) -&gt; 第四轮：淘汰 (0, 1)</td>\n<td>算法开销较小，性能也不错</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"页面分配策略-抖动-工作集-内存映射文件\"><a class=\"anchor\" href=\"#页面分配策略-抖动-工作集-内存映射文件\">#</a> 页面分配策略、抖动、工作集、内存映射文件</h3>\n<p>1、驻留集</p>\n<ul>\n<li>指请求分页存储管理中给进程分配的物理块的集合。</li>\n<li>注意驻留集过大和过小的优缺点</li>\n</ul>\n<p>2、页面分配、置换策略</p>\n<ul>\n<li>不存在固定分配全局置换</li>\n<li>固定分配局部置换：驻留集大小不可改变。可能导致频繁缺页或者由内存块过多而浪费空间</li>\n<li>可变分配全局置换：可以将操作系统保留的空闲物理块分配给缺页进程，只要缺页就给分配新的物理块</li>\n<li>可变分配局部置换：只能选进程自己的物理块置换。根据缺页率动态分配物理块</li>\n</ul>\n<p>3、物理块调入算法</p>\n<ul>\n<li>平均分配算法</li>\n<li>按比例分配算法</li>\n<li>优先权分配算法</li>\n</ul>\n<p>4、调入页面的时机</p>\n<ul>\n<li>预调页策略：根据空间局部性，一次调用若干个相邻页面，运行前调入</li>\n<li>请求调页策略：运行时缺页再调入</li>\n</ul>\n<p>5、从何处调入页面</p>\n<ul>\n<li>对换区：快，采用连续分配方式</li>\n<li>文件区：慢，采用离散分配方式</li>\n<li>系统有足够的对换区空间：可以全部从对换区调入所需页面，需要将文件从文件区复制到对换区</li>\n<li>系统缺少对换区空间：不会修改的文件从文件区调入内存，可能会修改的文件在换出时放入对换区</li>\n<li>UNIX 方式：进程有关的文件放在文件区，运行过但是被换出的页面放在对换区，共享页面不需要重复调入</li>\n</ul>\n<p>6、如何调入</p>\n<ul>\n<li>缺页中断 -&gt; 磁盘 I/O -&gt; 修改页表 -&gt; 被置换的页面是否被修改过（是否需要写入磁盘） -&gt; 调入目标页面</li>\n</ul>\n<p>7、抖动（颠簸）现象</p>\n<ul>\n<li>刚刚换出的页面又要换入，刚刚换入的页面又要换出，物理块不够。所有页面调度策略都不可能完全避免抖动现象。</li>\n<li>发生抖动的主要原因：页面置换算法选择不当。</li>\n<li>发生抖动时的有效措施：撤销部分进程。</li>\n</ul>\n<p>8、工作集</p>\n<ul>\n<li>指在某段时间间隔里，进程实际访问过的页面的集合</li>\n<li>为了解决抖动现象</li>\n<li>基于局部性原理</li>\n<li>注意工作集的大小，重复页面只记录一次</li>\n</ul>\n<p>9、内存映射文件</p>\n<ul>\n<li>将物理内存中的文件映射到多个进程的虚拟内存中。</li>\n<li>映射页面后不会实际的读入，而是在访问页面时才会每次一页的读入。进程退出或关闭文件映射时才会写入磁盘文件。</li>\n</ul>\n<h1 id=\"文件管理\"><a class=\"anchor\" href=\"#文件管理\">#</a> 文件管理</h1>\n<h2 id=\"初识文件管理\"><a class=\"anchor\" href=\"#初识文件管理\">#</a> 初识文件管理</h2>\n<p>提供的功能</p>\n<ul>\n<li>处理机管理</li>\n<li>存储器管理</li>\n<li>文件管理</li>\n<li>设备管理</li>\n</ul>\n<p>目标：安全高效</p>\n<ul>\n<li>安全：文件保护</li>\n<li>高效：提高存储空间利用率、减少存取时间</li>\n</ul>\n<h2 id=\"文件的逻辑结构\"><a class=\"anchor\" href=\"#文件的逻辑结构\">#</a> 文件的逻辑结构</h2>\n<p>1、无结构文件（流式文件）</p>\n<ul>\n<li>文件由一系列二进制文件流组成（例如.txt 文件）</li>\n</ul>\n<p>2、有结构文件（记录式文件）</p>\n<ul>\n<li>记录：有结构文件由多个记录构成。</li>\n<li>变长记录：无法随机存取，只能顺序查找，查找速度慢。</li>\n<li>定长记录：可以随机存取，查找速度快。</li>\n<li>记录组成分解技术：将多个逻辑记录存入一个物理块，一个逻辑记录不能跨越两个物理块</li>\n<li>逻辑记录是对文件进行存取操作的基本单位</li>\n</ul>\n<p>按记录的组织形式分类</p>\n<ul>\n<li>顺序文件：文件中的记录一个接一个的顺序排列，定长或变长，串结构或顺序结构，顺序存储或链式存储。\n<ul>\n<li>串结构：记录的顺序与关键字无关，无法快速找到关键字</li>\n<li>顺序结构：记录按关键字排序，可以快速查找关键字（采用折半查找之类的算法）</li>\n<li>链式存储：无法随机存取</li>\n<li>顺序存储：逻辑上相邻的数据在物理上也是相邻的</li>\n</ul>\n</li>\n<li>索引文件：为变长记录的顺序文件创建索引表，索引表本身是定长的顺序文件。储存各文件对应的物理块号</li>\n<li>索引顺序文件：为变长记录的顺序文件创建多级索引表，多级索引表嵌套查找</li>\n<li>直接文件或散列文件：高速存取，但是相同的哈希值会引起冲突</li>\n</ul>\n<p>计算</p>\n<ul>\n<li>使用索引顺序文件，有 n 条数据，最好的情况是分为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 组，每组有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 条数据，索引表中存储每组的第一个数据的索引。</li>\n<li>先查找索引表，平均 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><msqrt><mi>n</mi></msqrt><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{\\sqrt{n}}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.16328em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.47728em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 次，组内查找，平均 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><msqrt><mi>n</mi></msqrt><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{\\sqrt{n}}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.16328em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.47728em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 次，共需 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 次</li>\n</ul>\n<h2 id=\"文件目录\"><a class=\"anchor\" href=\"#文件目录\">#</a> 文件目录</h2>\n<p>1、文件控制块（FCB）</p>\n<ul>\n<li>FCB 是文件系统内部用来管理文件的详细结构，文件与 FCB 一一对应</li>\n<li>它包含了指向文件物理存储位置的指针、文件大小、文件类型、文件权限、拥有者信息、文件创建和修改的时间戳等数据</li>\n<li>FCB 的有序集合称为文件目录，一个 FCB 就是一个文件目录项</li>\n</ul>\n<p>2、文件目录</p>\n<ul>\n<li>文件目录也被视为一个文件，称为目录文件</li>\n<li>文件目录用于查找和管理文件，主要是面向用户的视图，帮助用户定位文件，类似于书的目录</li>\n<li>它记录了文件的名称、路径、文件类型、权限、大小和创建、修改时间等信息</li>\n<li>常见操作：搜索、创建文件、删除文件、显示目录、修改目录</li>\n<li>设置当前目录可以加快文件的查找速度</li>\n<li>文件的符号名与物理地址之间的转换是通过文件目录实现的</li>\n</ul>\n<p>3、目录结构（同一个目录内不允许重名）</p>\n<ul>\n<li>单级目录结构</li>\n<li>两级目录结构：主文件目录（MFD）+ 用户文件目录（UFD），不能对文件分类</li>\n<li>多级目录结构（树形目录结构）：当代操作系统采用的方法，不便于文件共享\n<ul>\n<li>为了允许不同用户的文件使用相同的文件名，通常采用 多级目录结构</li>\n<li>树形目录结构中，对某文件的 首次访问 通常采用 从当前目录开始的路径名</li>\n</ul>\n</li>\n<li>无环图目录结构：可以共享（用计数器记录共享数量）</li>\n</ul>\n<p>4、索引节点（对文件控制块的索引）</p>\n<ul>\n<li>将文件描述信息从目录项中分离，只储存文件名和指针，一个数据项就是一个索引节点，磁盘块可以储存多个目录项，减少了查找文件时的 I/O 信息量</li>\n<li>单个文件长度不会改变索引节点的总数</li>\n</ul>\n<h2 id=\"文件的物理结构文件分配方式\"><a class=\"anchor\" href=\"#文件的物理结构文件分配方式\">#</a> 文件的物理结构（文件分配方式）</h2>\n<p>1、文件块、磁盘块</p>\n<ul>\n<li>磁盘块：对磁盘中的存储单元分块，称为块、磁盘块、物理块。一般情况下，磁盘块的大小与内存块、页面的大小相同。结构：磁盘块号 块内地址</li>\n<li>文件块：对文件的逻辑地址分块，称为文件块。结构：逻辑块号 块内地址</li>\n<li>内存与磁盘之间的数据交换（磁盘 I/O）是以块为单位进行的。</li>\n<li>磁盘块号 = 起始块号 + 逻辑块号</li>\n</ul>\n<p>2、对非空闲磁盘块的管理</p>\n<p>连续分配</p>\n<ul>\n<li>连续分配方式要求每个文件在磁盘上占有一组连续的块</li>\n<li>支持随机访问，顺序读写速度快，顺序访问效率最高</li>\n<li>对文件的拓展不方便，有很多磁盘碎片</li>\n</ul>\n<p>链接分配</p>\n<ul>\n<li>隐式分配\n<ul>\n<li>采用链式结构</li>\n<li>方便拓展，外存利用率高</li>\n<li>只支持顺序访问，不支持随机访问</li>\n</ul>\n</li>\n<li>显示分配\n<ul>\n<li>用文件分配表（FAT）显式记录下一块磁盘块的位置，一个磁盘只有一张文件分配表</li>\n<li>方便拓展，支持随机访问</li>\n<li>文件分配表在系统启动时读入内存，并且常驻内存，占用内存空间</li>\n</ul>\n</li>\n<li>如果题目没说明是哪一种，默认隐式分配</li>\n</ul>\n<p>索引分配</p>\n<ul>\n<li>索引分配允许文件离散地分配在各个磁盘块中，系统会为每个文件建立一张索引表，索引表记录了文件的各个逻辑块对应的磁盘块</li>\n<li>存放索引表的磁盘块称为索引块，存放数据的磁盘块称为数据块。在 FCB 中存放的是索引块对应的磁盘块号，可以根据磁盘块号找到索引块</li>\n<li>索引分配支持 文件长度可变、随机访问</li>\n<li>磁盘块号大小 = 索引表项大小</li>\n<li>索引表的大小不能超过磁盘块的大小，索引表中的逻辑块号可以是隐含的</li>\n<li>方便拓展，支持随机访问，随机访问效率最高</li>\n<li>索引表需要占用外存空间</li>\n</ul>\n<p>索引分配方案</p>\n<ul>\n<li>单级索引\n<ul>\n<li>一张索引表</li>\n<li>对于小文件，索引块的利用率低</li>\n<li>对于大文件，可以使用链接方案（链接多个索引块），查找时需要读入多个索引块，查找效率低</li>\n</ul>\n</li>\n<li>多级索引\n<ul>\n<li>建立多级索引表。</li>\n<li>加快了大文件的查找速度</li>\n<li>多级查找导致 I/O 次数增加</li>\n</ul>\n</li>\n<li>混合索引\n<ul>\n<li>结构：直接地址 一次间接地址 多次间接地址</li>\n<li>直接地址指向磁盘块，一次间接地址指向一张索引表，多次间接地址指向多级索引结构的顶级索引表</li>\n</ul>\n</li>\n</ul>\n<p>计算多级索引</p>\n<ul>\n<li>n 级索引表，磁盘块大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>a</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^a \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 字节，一个索引表项大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>b</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^b \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 字节，逻辑块号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">c \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>一个磁盘块能存放索引项个数的最大值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">= 2^{a-b} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>多级索引能索引到的磁盘块数最大为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow></msup><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">(2^{a-b})^n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991079999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>文件大小的最大值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow></msup><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><msup><mn>2</mn><mi>a</mi></msup><mo>=</mo><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>a</mi><mo>−</mo><mi>n</mi><mi>b</mi></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">= (2^{a-b})^n 2^a = 2^{(n+1)a-nb} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991079999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>在第 n 级索引表中的第几号表项 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mi>c</mi><mi mathvariant=\"normal\">%</mi><msup><mn>2</mn><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">= c \\% 2^{a-b} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9046679999999998em;vertical-align:-0.05556em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">%</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>磁盘块号大小 = 索引表项大小</li>\n<li>顶级索引表没有调入内存的情况下，需要 n+1 次 I/O 操作</li>\n</ul>\n<p>3、对比</p>\n<p><img data-src=\"21185753.jpg\" alt=\"img\" /></p>\n<h2 id=\"逻辑结构与物理结构对比\"><a class=\"anchor\" href=\"#逻辑结构与物理结构对比\">#</a> 逻辑结构与物理结构对比</h2>\n<ul>\n<li>数据结构部分\n<ul>\n<li>逻辑结构：线性结构、非线性结构。逻辑结构描述数据元素之间的逻辑关系。它是数据在抽象层面上的组织方式，与具体存储方式无关。</li>\n<li>物理结构：顺序存储、链式存储。物理结构描述数据在计算机中的存储形式。它包括数据元素的存储位置和存取方法。</li>\n<li>注意：程序执行时，数组在虚拟内存中的地址是连续的，而在物理内存中不一定连续\n<ul>\n<li>数组的元素存储在一块连续的内存区域中，这种连续性体现在虚拟地址空间中</li>\n<li>分页机制使物理内存的页框分布在任意地方</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>操作系统部分\n<ul>\n<li>文件的逻辑结构：无结构文件、有结构文件。文件的逻辑结构是指文件内容的组织方式和结构，它描述了文件内部数据的结构。储存方式由用户决定。</li>\n<li>文件的物理结构：连续分配、链接分配、索引分配。文件的物理结构指的是文件在存储介质（如磁盘、固态硬盘等）上的存储方式。储存方式由操作系统决定。</li>\n</ul>\n</li>\n<li>区别：数据结构中的逻辑结构和物理结构更通用，涉及各种数据的组织和存储；而操作系统中的文件结构则专注于文件管理系统，旨在优化文件存储和访问效率。</li>\n</ul>\n<p>文件的逻辑结构与文件的物理结构对比<br />\n<img data-src=\"21165304.jpg\" alt=\"img\" /></p>\n<h2 id=\"文件存储空间管理空闲空间的管理\"><a class=\"anchor\" href=\"#文件存储空间管理空闲空间的管理\">#</a> 文件存储空间管理（空闲空间的管理）</h2>\n<p>磁盘空间管理的两个问题：空闲空间的分配、空闲空间的管理</p>\n<p>1、存储空间的划分与初始化</p>\n<ul>\n<li>文件卷（逻辑卷、逻辑盘）：将物理磁盘在逻辑上进行划分。一个物理磁盘可以划分多个卷。一个卷可以由多个物理磁盘组成（部分操作系统可能不允许你这样做，这是出于安全考虑而禁用的，而不是真的不能这样做）</li>\n<li>目录区与文件区：每一个卷都分为目录区和文件区\n<ul>\n<li>目录区：存放目录信息（FCB）和用于空闲空间管理的信息</li>\n<li>文件区：存放文件</li>\n</ul>\n</li>\n</ul>\n<p>2、几种管理方法</p>\n<p>空闲表法</p>\n<ul>\n<li>属于连续分配方式，与内存管理中的动态分区分配类似（分配和回收的方式都很类似）。首位置 + 长度，回收时注意修改。</li>\n<li>高速分配，I/O 频率低，小文件可以分配几个相邻的盘块</li>\n</ul>\n<p>空闲链表法</p>\n<ul>\n<li>空闲盘块链\n<ul>\n<li>以盘块为单位组成一条链。系统保存链头与链尾的指针</li>\n<li>分配和回收的过程简单</li>\n<li>效率低，I/O 频率高，空闲盘块链很长</li>\n</ul>\n</li>\n<li>空闲盘区链\n<ul>\n<li>连续的空闲盘块组成盘区，以盘区为单位组成一条链。系统保存链头与链尾的指针</li>\n<li>效率高，空闲盘块链短</li>\n<li>分配和回收的过程复杂</li>\n</ul>\n</li>\n<li>文件分配表（FAT）</li>\n</ul>\n<p>位示图法</p>\n<ul>\n<li>此时，计算机按字编址</li>\n<li>用一个二进制位表示磁盘块是否空闲（0 表示空闲），位示图是一个储存二进制位的二维数组</li>\n<li>描述方式：(行号，列号) = (字号，位号)</li>\n<li>涉及二维数组相关的计算，注意字号和位号是从 0 开始还是从 1 开始</li>\n<li>容易检索，可以通过常驻内存减小 I/O 频率</li>\n<li>磁盘越大位示图就越大，因此常用于小型计算机</li>\n<li>注意位图的储存位置与目标位置的转换</li>\n</ul>\n<p>成组链接法（UNIX 系统）</p>\n<ul>\n<li>文件卷的目录区中专门用一个磁盘块作为超级块，当系统启动时需要将超级内存块读入内存，并且保证内存与外存中的超级块数据一致。超级块是用来描述文件系统的</li>\n<li>将空闲盘块分组，每一组的第一个盘块记录了下一组空闲磁盘块的数量和下一组所有的磁盘块的块号（超级块记录第一组）</li>\n<li>第一组保存在内存的专用栈中，称为空闲盘块号栈</li>\n</ul>\n<h2 id=\"文件的基本操作\"><a class=\"anchor\" href=\"#文件的基本操作\">#</a> 文件的基本操作</h2>\n<p>创建文件 (create 系统调用)</p>\n<ul>\n<li>在外存中找到文件所需的空间</li>\n<li>创建该文件对应的目录项</li>\n</ul>\n<p>删除文件 (delete 系统调用)</p>\n<ul>\n<li>找到文件名对应的目录项</li>\n<li>回收文件占用的磁盘块</li>\n<li>删除文件对应的目录项</li>\n</ul>\n<p>打开文件表</p>\n<ul>\n<li>系统维护一个包含所有打开文件信息的表，称为打开文件表。其他进程有各自的打开文件表，记录了该进程打开的文件的索引号和相关信息</li>\n</ul>\n<p>打开文件 (open 系统调用)</p>\n<ul>\n<li>在 “文件系统的全局结构” 中有图片描述</li>\n<li>找到文件名对应的目录项</li>\n<li>检查访问权限</li>\n<li>将目录项复制到系统的打开文件表中，将表项的索引号（文件描述符）返回给用户（进程）\n<ul>\n<li>打开文件的主要作用就是装入文件目录项</li>\n</ul>\n</li>\n<li>在进程的打开文件表创建对应的表项</li>\n<li>注意：文件没有读入内存</li>\n<li>读写文件之前一定要先打开文件，进行 open 系统调用后，其他文件操作的系统调用不再使用文件名，而是使用索引号（文件描述符）</li>\n<li>每个打开文件都具有的关联信息\n<ul>\n<li>文件指针</li>\n<li>文件打开计数</li>\n<li>文件磁盘位置</li>\n<li>访问权限</li>\n</ul>\n</li>\n</ul>\n<p>读文件 (read 系统调用)</p>\n<ul>\n<li>根据索引号，在进程的打开文件表中找到对应的文件信息</li>\n<li>将文件读入内存</li>\n<li>用打开文件表中的读指针进行读操作</li>\n</ul>\n<p>写文件 (write 系统调用)</p>\n<ul>\n<li>根据索引号，在进程的打开文件表中找到对应的文件信息</li>\n<li>将文件读入内存</li>\n<li>用打开文件表中的写指针进行写操作，每次写操作都会更新写指针</li>\n</ul>\n<p>关闭文件 (close 系统调用)</p>\n<ul>\n<li>删除进程的打开文件表项</li>\n<li>回收资源</li>\n<li>系统的打开文件表的文件打开计数减 1，计数为 0 时，删除系统的打开文件表的表项，并将内存中的文件控制信息写到磁盘</li>\n</ul>\n<h2 id=\"文件共享\"><a class=\"anchor\" href=\"#文件共享\">#</a> 文件共享</h2>\n<p>多用户共享同一个文件 = 系统中只有一份文件数据</p>\n<p>1、基于索引节点的共享方式（硬链接）</p>\n<ul>\n<li>多个文件名指向同一个文件的索引节点。硬链接文件的内容是相同的，但是他们有不同的文件名和文件描述符。索引节点的链接计数为 0 时才会删除文件。</li>\n<li>例：若文件 F 的硬链接为 G，则 F 和 G 有以下特点：共享同一个索引节点、各自的文件描述符分别指向各自的用户打开文件表中的一项、读写指针位置不同（因为文件描述符不同）</li>\n</ul>\n<p>2、基于符号链的共享方式（软链接）</p>\n<ul>\n<li>相当于 Windows 的快捷方式、软链接。删除目标文件会导致软链接失效。</li>\n<li>访问文件时会有多次磁盘 I/O 操作，访问速度比硬链接慢。</li>\n</ul>\n<h2 id=\"文件保护\"><a class=\"anchor\" href=\"#文件保护\">#</a> 文件保护</h2>\n<p>1、口令保护</p>\n<ul>\n<li>设置密码，访问文件需要提供密码。密码直接储存在 FCB 中</li>\n<li>保密性弱</li>\n</ul>\n<p>2、加密保护</p>\n<ul>\n<li>用加密密码对文件进行加密，解密时需要提供对应的解密密码。例如：异或加密</li>\n<li>保密性强</li>\n<li>编码 / 译码，需要花费一定时间</li>\n</ul>\n<p>3、访问控制</p>\n<ul>\n<li>在每个文件的 FCB 中增加一个访问控制表（ACL），该表记录了各个用户可以对该文件执行哪些操作</li>\n<li>访问权限表</li>\n<li>访问控制表和访问权限表统称为存取控制表</li>\n<li>用户数量 * 权限数量 * 记录一个权限所占用的空间（例如 1bit） = 权限占用空间量</li>\n</ul>\n<p>以下哪一项不是文件存取控制要实现的目标？<br />\nA. 防止未经核准的用户存取文件<br />\n B. 防止冒名顶替者存取文件<br />\n C. 防止以不正确的方式使用文件<br />\n D. 防止以不正确的方式删除文件</p>\n<p>答案：D</p>\n<h2 id=\"文件系统的层次结构\"><a class=\"anchor\" href=\"#文件系统的层次结构\">#</a> 文件系统的层次结构</h2>\n<p>有多个版本，都是正确的</p>\n<p>王道视频<br />\n<img data-src=\"21155951.jpg\" alt=\"img\" /></p>\n<p>王道书<br />\n<img data-src=\"21553429.jpg\" alt=\"img\" /></p>\n<p>汤小丹<br />\n<img data-src=\"21154820.jpg\" alt=\"img\" /></p>\n<h2 id=\"文件系统的全局结构局部\"><a class=\"anchor\" href=\"#文件系统的全局结构局部\">#</a> 文件系统的全局结构（局部）</h2>\n<p>1、外存</p>\n<ul>\n<li>物理格式化（低级格式化）：划分扇区（每个扇区采用特别的数据结构，包括校验码），检测坏扇区并用备用扇区替换。对操作系统透明</li>\n<li>逻辑格式化：<br />\n<img data-src=\"21162509.jpg\" alt=\"img\" /></li>\n</ul>\n<p>【2017 年 408 统考】磁盘逻辑格式化程序所做的工作是？<br />\nⅠ. 对磁盘进行分区<br />\n Ⅱ. 建立文件系统的根目录<br />\n Ⅲ. 确定磁盘扇区校验码所占的位数<br />\n Ⅳ. 对保存空闲磁盘块信息的数据结构进行初始化</p>\n<p>答案：Ⅱ、Ⅳ</p>\n<p>2、内存</p>\n<p><img data-src=\"21164812.jpg\" alt=\"img\" /></p>\n<h2 id=\"文件系统-虚拟文件系统-文件系统挂载\"><a class=\"anchor\" href=\"#文件系统-虚拟文件系统-文件系统挂载\">#</a> 文件系统、虚拟文件系统、文件系统挂载</h2>\n<p>1、文件系统</p>\n<ul>\n<li>文件系统就是存储设备（不同的逻辑分区视为不同的设备）</li>\n<li>文件系统的主要目的：实现对文件的按名存取</li>\n<li>常见的格式：FAT16、FAT32、NTFS、exFAT</li>\n</ul>\n<p>2、虚拟文件系统（VFS）</p>\n<ul>\n<li>采用面向对象的思想，抽象出一个通用的文件系统模型</li>\n<li>使用统一的数据结构储存文件信息：v 节点，只储存在内存中，打开一个文件就新建一个 v 节点。v 节点中的函数功能指针指向各自文件系统中对应的函数</li>\n<li>对用户开放一个统一的接口，其他文件系统必须实现这个接口（向虚拟文件系统提供需要的信息）</li>\n<li>用户调用一个接口就可以使用所有的文件系统，解决了不同文件系统的差异。</li>\n</ul>\n<p>3、文件系统挂载（安装）</p>\n<ul>\n<li>在 VFS 中注册新挂载的文件系统。内存中的挂载表包含每个文件系统的相关信息，包括文件系统类型、容量大小等。</li>\n<li>新挂载的文件系统要向 VFS 提供一个函数地址列表</li>\n<li>将新文件系统加到挂载点，也就是将新文件系统挂载在某个父目录下。例如：Windows 系统中的 C 盘，盘符 “C” 就是挂载点</li>\n</ul>\n<h1 id=\"io管理\"><a class=\"anchor\" href=\"#io管理\">#</a> I/O 管理</h1>\n<p>I/O 管理需要完成以下内容</p>\n<ul>\n<li>状态跟踪：要能实时掌握外部设备的状态</li>\n<li>设备存取：要实现对设备的存取操作</li>\n<li>设备分配：在多用户环境下，负责设备的分配与回收</li>\n<li>设备控制：包括设备的驱动、完成和故障的中断处理</li>\n</ul>\n<h2 id=\"io设备的概念和分类\"><a class=\"anchor\" href=\"#io设备的概念和分类\">#</a> I/O 设备的概念和分类</h2>\n<p>1、I/O 设备</p>\n<ul>\n<li>输入 / 输出设备</li>\n</ul>\n<p>2、按使用特性分类</p>\n<ul>\n<li>人机交互的外部设备</li>\n<li>存储设备</li>\n<li>网络通信设备</li>\n</ul>\n<p>3、按传输速率分类</p>\n<ul>\n<li>低俗设备</li>\n<li>中速设备</li>\n<li>高速设备</li>\n</ul>\n<p>4、按信息交换的单位分类</p>\n<ul>\n<li>字符设备：以字符为单位，速度慢、不可寻址，例如打印机</li>\n<li>块设备：以块为单位，速度快、可寻址，例如磁盘（又称外存、辅存）</li>\n</ul>\n<p>5、系统为每台设备确定一个编号以区分和识别设备，称为设备的绝对号</p>\n<h2 id=\"io接口设备控制器\"><a class=\"anchor\" href=\"#io接口设备控制器\">#</a> I/O 接口（设备控制器）</h2>\n<p>设备控制器是硬件，用于管理和控制其他外设，负责处理与设备的低级交互，确保计算机系统与外设之间的通信能够顺利进行。</p>\n<p>外设部件</p>\n<ul>\n<li>机械部件：鼠标、键盘等</li>\n<li>电子部件：直接插入主板的电路板（例如硬盘、显卡）</li>\n</ul>\n<p>I/O 控制器的组成<br />\n<img data-src=\"212328366.jpg\" alt=\"img\" /></p>\n<p>功能</p>\n<ul>\n<li>接受和识别 CPU 发出的命令：使用控制寄存器</li>\n<li>向 CPU 报告设备的状态：使用状态寄存器</li>\n<li>数据交换：使用数据寄存器</li>\n<li>地址识别</li>\n<li>数据缓冲</li>\n<li>差错控制</li>\n</ul>\n<p>I/O 端口</p>\n<ul>\n<li>设备控制器可以接入多个设备，对应的寄存器也会有多个。因此，需要为寄存器设置端口</li>\n<li>端口编址方式\n<ul>\n<li>统一编址（内存映射 I/O）：与内存使用统一的地址，占用内存的地址空间</li>\n<li>独立编址：使用单独的 I/O 地址空间，不占用内存地址空间</li>\n</ul>\n</li>\n</ul>\n<p>【2017 年 408 统考】I/O 指令实现的数据传送通常发生在（通用寄存器和 I/O 端口之间）</p>\n<h2 id=\"io控制方式\"><a class=\"anchor\" href=\"#io控制方式\">#</a> I/O 控制方式</h2>\n<p>1、程序直接控制方式</p>\n<ul>\n<li>使用轮询（完成一次读 / 写操作的流程）的 I/O 方式</li>\n<li>CPU 干预频繁</li>\n<li>每次读写一个字（需要 CPU 处理）</li>\n<li>实现简单</li>\n<li>会使 CPU 忙等</li>\n</ul>\n<p>2、中断驱动方式</p>\n<ul>\n<li>让 cpu 发出 I/O 指令后做其它的事情</li>\n<li>大量中断会使 cpu 效率低</li>\n<li>每次读写一个字（需要 CPU 处理）</li>\n<li>cpu 和 I/O 可并行工作</li>\n</ul>\n<p>3、DMA 方式（直接存储器存取）</p>\n<ul>\n<li>数据单位：连续的多个块</li>\n<li>数据直接从设备到内存（不需要 CPU 处理）</li>\n<li>减少了 cpu 干预</li>\n<li>传送一个数据需要挪用一个储存周期</li>\n<li>DMA 控制器中的寄存器\n<ul>\n<li>命令 / 状态寄存器（CR）</li>\n<li>内存地址寄存器（MAR）</li>\n<li>数据寄存器（DR）</li>\n<li>数据计数器（DC）</li>\n</ul>\n</li>\n<li>DMA 执行流程\n<ul>\n<li>初始化 DMA 并启动磁盘</li>\n<li>从磁盘传输数据到内存缓冲区</li>\n<li>DMA 控制器发出中断请求</li>\n<li>执行 “DMA 结束” 中断服务程序</li>\n</ul>\n</li>\n</ul>\n<p>4、通道控制方式</p>\n<ul>\n<li>通道是一个硬件，是一种 I/O 专用处理器，可以理解为小型 cpu</li>\n<li>通道程序：通道指令的集合（任务清单）</li>\n<li>cpu 发送命令给通道，然后让通道处理 I/O 操作就行了，处理完后向 cpu 发送中断信号</li>\n<li>分类：高速通道、数组多路通道、字节多路通道</li>\n</ul>\n<p>5、对比<br />\n<img data-src=\"21161802.jpg\" alt=\"img\" /></p>\n<h2 id=\"io软件层次结构\"><a class=\"anchor\" href=\"#io软件层次结构\">#</a> I/O 软件层次结构</h2>\n<p>在 “I/O 核心子系统” 中有图片描述</p>\n<p>1、用户层软件</p>\n<ul>\n<li>向上层提供库函数</li>\n</ul>\n<p>2、设备独立性软件（设备无关性软件）</p>\n<ul>\n<li>向上层提供统一的系统调用接口</li>\n<li>设备的保护</li>\n<li>差错处理</li>\n<li>设备的分配与回收</li>\n<li>数据缓冲区管理</li>\n<li>建立逻辑设备名到物理设备名的映射关系（使用逻辑设备表）</li>\n<li>根据设备类型选择调用相应的驱动程序</li>\n</ul>\n<p>3、设备驱动程序（比如打印机驱动）</p>\n<ul>\n<li>将上层的指令转化为自己的设备能识别的指令</li>\n<li>设置设备寄存器、检查设备状态</li>\n<li>一般情况下，驱动程序会以进程的方式存在</li>\n</ul>\n<p>4、中断处理程序</p>\n<ul>\n<li>进行中断处理</li>\n</ul>\n<p>5、硬件</p>\n<ul>\n<li>执行 I/O 操作，由机械部件、电子部件组成</li>\n</ul>\n<p>6、判断某个处理是在哪个层次完成的</p>\n<ul>\n<li>直接涉及到硬件具体细节、且与中断无关的操作肯定是在设备驱动程序层完成的（例如：地址转换）</li>\n<li>没有涉及硬件的、对各种设备都需要进行的管理工作都是在设备独立性软件层完成的</li>\n</ul>\n<h2 id=\"应用程序接口\"><a class=\"anchor\" href=\"#应用程序接口\">#</a> 应用程序接口</h2>\n<p>1、应用程序 I/O 接口</p>\n<p>接口分类</p>\n<ul>\n<li>字符设备接口：例如打印机</li>\n<li>块设备接口：例如磁盘</li>\n<li>网络设备接口：例如网络套接字接口</li>\n</ul>\n<p>阻塞 I/O 和非阻塞 I/O</p>\n<ul>\n<li>阻塞 I/O：发出 I/O 请求后，进程进入阻塞态。大多数操作系统采用阻塞 I/O</li>\n<li>非阻塞 I/O：发出 I/O 请求后，进程不进入阻塞态，需要不断检查 I/O 操作是否完成</li>\n</ul>\n<p>2、设备驱动程序接口</p>\n<ul>\n<li>设备独立性软件提供统一的标准接口，其他驱动程序必须实现这个接口</li>\n<li>处理顺序\n<ol>\n<li>将上层的指令转化为自己的设备能识别的指令</li>\n<li>对服务请求进行校验</li>\n<li>检查设备状态</li>\n<li>传送参数</li>\n<li>启动 I/O 设备</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"io核心子系统\"><a class=\"anchor\" href=\"#io核心子系统\">#</a> I/O 核心子系统</h2>\n<p><img data-src=\"21163807.jpg\" alt=\"img\" /></p>\n<h2 id=\"假脱机技术\"><a class=\"anchor\" href=\"#假脱机技术\">#</a> 假脱机技术</h2>\n<p>1、什么是脱机技术，脱机技术可以解决什么问题</p>\n<ul>\n<li>脱离主机的控制进行输入 / 输出控制</li>\n<li>SPOOLing 系统：必须要有多道程序并发进行</li>\n</ul>\n<p>2、假脱机技术的实现原理（空间换时间）</p>\n<ul>\n<li>输入井和输出井（磁盘）</li>\n<li>输入缓冲区和输出缓冲区（内存）</li>\n<li>输入进程和输出进程</li>\n<li>井管理程序</li>\n</ul>\n<p>3、共享打印机的原理分析</p>\n<ul>\n<li>在磁盘缓冲区中为进程申请一个空闲盘块，并将要打印的数据送入其中暂存</li>\n<li>用户进程申请一张空白的用户请求打印表，并将用户的打印要求填入其中，再将该表挂到假脱机文件队列上</li>\n</ul>\n<h2 id=\"设备的分配与回收\"><a class=\"anchor\" href=\"#设备的分配与回收\">#</a> 设备的分配与回收</h2>\n<p>1、设备分配时应考虑的因素</p>\n<ul>\n<li>设备的固有属性：独占设备、共享设备、虚拟设备</li>\n<li>设备分配算法</li>\n<li>设备分配的安全性\n<ul>\n<li>安全分配方式：为进程分配一个设备后就将进程阻塞，本次 I/O 完成后才将进程唤醒</li>\n<li>不安全分配方式</li>\n</ul>\n</li>\n</ul>\n<p>2、静态分配与动态分配</p>\n<ul>\n<li>静态分配：进程运行前为其分配全部所需资源，运行结束后归还资源。破坏了请求和保持条件，不会发生死锁。适用于独占设备</li>\n<li>动态分配：运行中动态分配。适用于共享设备</li>\n</ul>\n<p>3、设备分配管理中的数据结构</p>\n<ul>\n<li>系统中有多个通道，通道控制多个控制器，控制器控制多个设备，树形结构</li>\n<li>设备控制表 DCT：设备类型、设备标识符、设备状态、指向控制器表的指针、重复执行次数或事件、设备队列的队首指针</li>\n<li>控制器控制表 COCT：控制器标识符、控制器状态、指向通道表的指针设备队列的队首指针、控制器队列的队尾指针</li>\n<li>通道控制表 CHCT：通道标识符、通道状态、与通道连接的控制器表首址、通道队列的队首指针、通道队列的队尾指针</li>\n<li>系统设备表 SDT：DCT、设备类型、设备标识符、驱动程序入口</li>\n</ul>\n<p>4、设备分配的步骤</p>\n<ul>\n<li>进程请求的物理设备名 ——&gt; 设备控制表 ——&gt; 控制器控制表 ——&gt; 通道</li>\n</ul>\n<p>5、设备分配步骤的改进方法</p>\n<ul>\n<li>建立逻辑设备名和设备的映射（逻辑设备表）</li>\n</ul>\n<h2 id=\"缓冲区管理\"><a class=\"anchor\" href=\"#缓冲区管理\">#</a> 缓冲区管理</h2>\n<p>1、缓冲区</p>\n<ul>\n<li>缓冲区是一个存储区域，一般情况下使用内存作为缓冲区</li>\n<li>缓和 CPU 与 I/O 设备之间速度不匹配的矛盾</li>\n<li>减少对 CPU 的中断频率</li>\n<li>解决数据粒度不匹配的问题</li>\n<li>提高 CPU 与 IO 设备之间的并行性</li>\n</ul>\n<p>2、单缓冲区</p>\n<ul>\n<li>在内存中分配一块缓冲区</li>\n<li>当缓冲区数据非空时，不能往缓冲区输入数据，只能从缓冲区把数据传出</li>\n<li>当缓冲区为空时，可以往缓冲区输入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出</li>\n<li>设备将一块数据输入到缓冲区的时间为 T，操作系统将缓冲区中的数据传送到工作区的时间为 M，CPU 处理一块数据的时间为 C</li>\n<li>处理每块数据的平均时间 = max (C, T) + M</li>\n</ul>\n<p>3、双缓冲区</p>\n<ul>\n<li>在内存中分配两块缓冲区</li>\n<li>处理每块数据的平均时间 = max (C + M, T)</li>\n</ul>\n<p>4、循环缓冲</p>\n<ul>\n<li>多个大小相等的缓冲区链接成一个循环队列</li>\n</ul>\n<p>5、缓冲池</p>\n<ul>\n<li>由多个系统公用的缓冲区组成，可管理多个缓冲区，可供多个进程共享使用</li>\n<li>缓冲区按使用状况分类\n<ul>\n<li>空缓冲队列</li>\n<li>装满输入数据的缓冲队列</li>\n<li>装满输出数据的缓冲队列</li>\n</ul>\n</li>\n<li>4 种工作缓冲区\n<ul>\n<li>收容输入数据的工作缓冲区 (hin)</li>\n<li>提取输入数据的工作缓冲区 (sin)</li>\n<li>收容输出数据的工作缓冲区 (hout)</li>\n<li>提取输出数据的工作缓冲区 (sout)</li>\n</ul>\n</li>\n</ul>\n<p>6、高速缓存与缓冲区的对比<br />\n<img data-src=\"21153618.jpg\" alt=\"img\" /></p>\n<h2 id=\"磁盘的结构\"><a class=\"anchor\" href=\"#磁盘的结构\">#</a> 磁盘的结构</h2>\n<p>磁盘是可共享设备（分时共享），某段时间内可以有多个用户访问，某一时刻只有一个作业可以访问。</p>\n<ul>\n<li>磁道：磁盘划分为多个圆环，称为磁道</li>\n<li>扇区：储存大小固定，一份扇区称为一个盘块。若按圆心角度划分扇区，越靠近圆心，数据密度越大</li>\n<li>盘面：磁盘片</li>\n<li>柱面：所有盘面上相对位置（垂直面）相同的磁道</li>\n<li>磁盘的物理地址：柱面号 盘面号 扇区号</li>\n<li>磁盘的分类\n<ul>\n<li>磁头是否可移动\n<ul>\n<li>固定头磁盘：每个磁道有一个磁头</li>\n<li>活动头磁盘：每个盘面有一个磁头</li>\n</ul>\n</li>\n<li>磁盘片是否可更换\n<ul>\n<li>固定盘磁盘、可换盘磁盘</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>计算</p>\n<ul>\n<li>每个柱面有 a 个磁道，每个磁道有 b 个扇区，数据在磁盘中从 0 开始顺序储存，目标所在的磁盘地址：(d, e, f)</li>\n<li>每个柱面的扇区数 = a * b</li>\n<li>磁盘地址对应第几个逻辑记录：d * a * b + e * b + f</li>\n</ul>\n<h2 id=\"磁盘调度算法\"><a class=\"anchor\" href=\"#磁盘调度算法\">#</a> 磁盘调度算法</h2>\n<p>​1、一次磁盘读写操作需要的时间</p>\n<ul>\n<li>启动磁头臂用时 s，跨越一个磁道用时 m，跨越磁道数为 n，磁盘旋转速度为 r，每次读写字节数为 b，每个磁道上的字节数为 N</li>\n<li>寻找时间 = s + m * n</li>\n<li>延迟时间 = 1 / 2r</li>\n<li>传输时间 = b / (r * N)</li>\n<li>总平均存取时间 = 寻找时间 + 延迟时间 + 传输时间</li>\n</ul>\n<p>2、磁盘调度算法</p>\n<ul>\n<li>先来先服务（FCFS）</li>\n<li>最短寻找时间优先（SSTF）\n<ul>\n<li>优先处理最近的磁道</li>\n<li>可能会产生饥饿现象</li>\n</ul>\n</li>\n<li>扫描算法（SCAN）\n<ul>\n<li>只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动</li>\n<li>各磁道的响应频率不平均</li>\n<li>LOOK：如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</li>\n<li>若没有特别说明，则默认为 LOOK</li>\n</ul>\n</li>\n<li>循环扫描算法（C-SCAN）\n<ul>\n<li>返回时直接快速移动至起始端而不处理任何请求</li>\n<li>C-LOOK：如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</li>\n<li>若没有特别说明，则默认为 C-LOOK</li>\n</ul>\n</li>\n</ul>\n<p>3、计算举例<br />\n<img data-src=\"21193468.jpg\" alt=\"img\" /></p>\n<h2 id=\"减小磁盘延迟时间的方法\"><a class=\"anchor\" href=\"#减小磁盘延迟时间的方法\">#</a> 减小磁盘延迟时间的方法</h2>\n<p>1、寻找时间（寻道时间）</p>\n<ul>\n<li>启动磁臂、移动磁头所花的时间</li>\n</ul>\n<p>2、延迟时间</p>\n<ul>\n<li>将目标扇区转到磁头下面所化的时间</li>\n<li>磁头读取一块内容后，需要一小段的时间处理，处理时无法读入数据</li>\n<li>采用交替编号策略</li>\n<li>错位命名</li>\n<li>物理地址结构中，柱面号在盘面号之前，可以减少磁头移动消耗的时间\n<ul>\n<li>柱面与磁头的关系：硬盘的每个磁盘面（盘面）都有一个对应的磁头，但所有盘面上的同一位置的磁道（即柱面）是共用的。换句话说，所有的磁头同时对同一个柱面上的磁道进行访问时，不需要移动磁头，只需要通过切换不同的磁头来选择不同的盘面。</li>\n<li>减少磁头的物理移动：如果先按照柱面号寻址，意味着所有的访问都是先在同一柱面上完成的，在访问过程中，磁头不需要进行物理移动，只需要切换就可以在不同盘面之间切换，这种切换比磁头物理移动要快得多。如果柱面号放在后面，磁头可能需要频繁移动到不同的柱面，增加了移动的时间开销。</li>\n<li>时间优化：将柱面号放在前面，能确保在同一个柱面内的读写操作尽可能集中，减少磁头频繁在不同柱面间的物理移动。这可以大大减少磁头的寻道时间，从而提升数据访问的整体效率。</li>\n</ul>\n</li>\n</ul>\n<p>3、传输时间</p>\n<ul>\n<li>读写数据花费的时间，只能由磁盘本身的性质决定</li>\n</ul>\n<h2 id=\"提高io速度的方法\"><a class=\"anchor\" href=\"#提高io速度的方法\">#</a> 提高 I/O 速度的方法</h2>\n<ul>\n<li>为文件分配连续的簇</li>\n<li>磁盘高速缓存（内存中的一个缓冲区）</li>\n<li>磁盘请求顺序（磁盘调度算法）</li>\n<li>提前读</li>\n<li>延迟写</li>\n<li>优化物理块的分布</li>\n<li>虚拟盘</li>\n<li>磁盘阵列 RAID</li>\n<li>启用多通路系统</li>\n</ul>\n<h2 id=\"磁盘的管理\"><a class=\"anchor\" href=\"#磁盘的管理\">#</a> 磁盘的管理</h2>\n<p>1、磁盘初始化</p>\n<ul>\n<li>低级格式化（物理格式化）：划分扇区（每个扇区采用特别的数据结构，包括校验码），检测坏扇区并用备用扇区替换。对操作系统透明</li>\n</ul>\n<p>2、分区</p>\n<ul>\n<li>物理分区：C 盘、D 盘...</li>\n<li>逻辑格式化：<img data-src=\"21162509.jpg\" alt=\"img\" /></li>\n</ul>\n<p>3、磁盘初始化流程</p>\n<ul>\n<li>物理格式化 -&gt; 物理分区 -&gt; 逻辑格式化</li>\n</ul>\n<p>4、引导块</p>\n<ul>\n<li>ROM 不可修改，ROM 中只存放很小的初始化程序（自举装入程序），完整的自举装入程序放在磁盘的引导块（启动块、启动分区）中，引导块的储存位置固定</li>\n<li>有引导块的磁盘称为启动磁盘、系统磁盘</li>\n</ul>\n<p>5、坏块的管理</p>\n<ul>\n<li>在 FAT 表上标明（坏块对操作系统不透明）</li>\n</ul>\n<p>6、磁盘镜像、磁盘双工</p>\n<ul>\n<li>磁盘镜像需要两台磁盘驱动器</li>\n<li>磁盘双工需要两台磁盘控制器</li>\n</ul>\n<h2 id=\"固态硬盘\"><a class=\"anchor\" href=\"#固态硬盘\">#</a> 固态硬盘</h2>\n<p><img data-src=\"21153955.jpg\" alt=\"img\" /></p>\n<p>注：静态磨损均衡算法的表现更优秀</p>\n",
            "tags": [
                "计算机基础",
                "操作系统"
            ]
        },
        {
            "id": "https://maikire.xyz/2024/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "https://maikire.xyz/2024/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "数据结构",
            "date_published": "2024-10-01T04:00:00.000Z",
            "content_html": "<p>王道 408 数据结构笔记</p>\n<h1 id=\"第一章-绪论\"><a class=\"anchor\" href=\"#第一章-绪论\">#</a> 第一章 绪论</h1>\n<h2 id=\"数据结构的基本概念\"><a class=\"anchor\" href=\"#数据结构的基本概念\">#</a> 数据结构的基本概念</h2>\n<p>基本概念和术语</p>\n<ul>\n<li>数据是信息的载体</li>\n<li>数据元素是数据的基本单位，由若干个数据项（最小单位）组成</li>\n<li>数据对象是具有相同性质的数据元素的集合</li>\n<li>数据类型分为原子类型、结构类型、抽象数据类型（抽象数据类型可以定义一个完整的数据结构）</li>\n<li>数据结构是存在某种关系的数据元素的集合，包括逻辑结构、存储结构与数据的运算</li>\n<li>不定长文件是指 记录的长度不固定</li>\n<li>存储数据时，要存储 元素的值 和 元素之间的关系</li>\n</ul>\n<p>数据结构三要素</p>\n<ul>\n<li>逻辑结构\n<ul>\n<li>逻辑结构指数据元素之间存在的逻辑关系，是固有的客观联系</li>\n<li>逻辑结构分为线性结构与非线性结构，比如：线性表、集合、树、图</li>\n</ul>\n</li>\n<li>存储结构\n<ul>\n<li>存储结构又称为物理结构，指数据结构在计算机中的表示（映像），是计算机内部的存储方法</li>\n<li>存储结构主要有：顺序存储、链式存储、索引存储、散列存储</li>\n</ul>\n</li>\n<li>数据的运算（算法）\n<ul>\n<li>算法包括运算的定义（取决于逻辑结构，体现算法功能）与实现（取决于存储结构，体现于操作步骤）</li>\n</ul>\n</li>\n<li>逻辑结构与存储结构的关系\n<ul>\n<li>一种逻辑结构通过映像便可以得到它的存储结构</li>\n<li>例如顺序表、哈希表、链表这样的表述，它们既体现了逻辑结构（均为线性），又体现了存储结构（顺序、散列、链式）。而这样的表述我们往往就直接称之为数据结构</li>\n<li>例如有序表，它只体现了逻辑结构（线性），而存储结构是未知的（可以是顺序、链式……）</li>\n<li>不存在只体现存储结构而不体现逻辑结构的表述</li>\n<li>逻辑结构独立于存储结构</li>\n</ul>\n</li>\n</ul>\n<details><summary>思维导图</summary><div>\n<p><img data-src=\"21192565.jpg\" alt=\"img\" /></p>\n</div></details>\n<h2 id=\"算法的基本概念\"><a class=\"anchor\" href=\"#算法的基本概念\">#</a> 算法的基本概念</h2>\n<ul>\n<li>算法是 问题求解步骤的描述</li>\n<li>算法是 解决问题的有限运算序列</li>\n<li>算法的 5 个重要特性：有穷性、确定性、有效性（可行性）、输入、输出</li>\n<li>一个好的算法的目标：正确性、可读性、健壮性、高效率与低存储量需求</li>\n<li>算法原地工作：不需要任何额外的辅助，算法所需要的辅助空间不随着问题的规模而变化，是一个确定的值</li>\n</ul>\n<h2 id=\"算法分析\"><a class=\"anchor\" href=\"#算法分析\">#</a> 算法分析</h2>\n<ul>\n<li>空间复杂度指算法耗费存储空间的数量级</li>\n<li>时间复杂度指算法所有语句被重复执行次数总和的数量级</li>\n<li>问题的规模：例如，某数组能存储 n 个变量，那么问题的规模就是 n</li>\n<li>时间复杂度是问题的规模的函数：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T(n) = O(f(n)) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>常见时间复杂度比较：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) &lt; O(\\log_2n) &lt; O(n) &lt; O(n \\log_2n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>巧记：常对幂指阶（常数 &lt; 对数 &lt; 幂函数 &lt; 指数 &lt; 阶乘）</li>\n<li>log 表示以 2 为底的对数</li>\n</ul>\n<h2 id=\"题目与总结\"><a class=\"anchor\" href=\"#题目与总结\">#</a> 题目与总结</h2>\n<p>时间复杂度的计算是考试重点。选择题直接计算即可，但如果出在应用题上，需要注意推导过程的书写</p>\n<p>计算方法</p>\n<ul>\n<li>循环条件包含主体变量，将执行次数 t 代入该条件再计算</li>\n<li>循环条件与主体变量无关，采用数学归纳法或直接循环计数</li>\n<li>复杂度是在最坏情况下取得的\n<ul>\n<li>多项相加：取数量级最大的</li>\n<li>线性表 (a1, a2, ..., an) 以链接方式存储时，访问第 i 位置元素的时间复杂度为 O (n)</li>\n</ul>\n</li>\n<li>常用公式\n<ul>\n<li>等差数列前 n 项和: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{n(a_1 + a_n)}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>等比数列前 n 项和：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><msub><mi>a</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msup><mi>r</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><mi>r</mi></mrow></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{a_1(1 - r^n)}{1 - r} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.19633em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n</li>\n<li>循环的时间复杂度总结：<br />\n<img data-src=\"21143565.jpg\" alt=\"img\" /></li>\n</ul>\n<p>例 1：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>每次 i *= 2，执行次数 t += 1，即 2^t &lt;= n，得 t &lt;= log n，则 T (n) = O (log n)</p>\n<p>例 2：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>i 的初值不为 1 或 0，则令 i = t + 3，有 (t + 3 + 1) * (t + 3 + 1) &lt; n，得 t &lt; √n - 4，即 T (n) = O (√n)</p>\n<p>例 3：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>外循环的迭代次数为 (n − 1) − 1，内循环每次的迭代次数为 i - 1，则 T (n) = 1 + 2 + 3 + ... + (n - 2) = (n - 2) * (n - 1) / 2 ，即 T (n) = O (n^2)</p>\n<p>例 4：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>设外循环的迭代次数为 t，则 i = 2^t &lt;n，内循环每次的迭代次数为 i，则 T (n) = 1 + 2 + 4 + ... + 2^t = 2^(t+1) - 1 &lt; 2n - 1，即 T (n) = O (n)</p>\n<p>例 5：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于递归函数，直接得 T (n) = 1 + T (n - 1) = k + T (n - k) = 1 * (n - 1) + T (1) = n，即 T (n) = O (n)</p>\n<p>例 6：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>T (n) = 1 + T (n / 2) = 1 + (1 + T (n / 4)) = 1 + 1 + 1 + ... + T (1)，递归调用次数为 t，则 2^t = n，t = log n，即 T (n) = O (log n)</p>\n<p>例 7：<br />\n两个长度分别为 m 和 n 的有序表，合并为长度为 m+n 的有序表，不论升序还是降序，结果都为：O (max (m, n))</p>\n<h1 id=\"第二章-线性表\"><a class=\"anchor\" href=\"#第二章-线性表\">#</a> 第二章 线性表</h1>\n<h2 id=\"线性表的基本概念\"><a class=\"anchor\" href=\"#线性表的基本概念\">#</a> 线性表的基本概念</h2>\n<p>线性表的定义</p>\n<ul>\n<li>线性表是具有相同数据类型的 n 个数据元素的有限序列</li>\n<li>线性表的特点\n<ul>\n<li>表中元素具有逻辑上的顺序性，有先后次序</li>\n<li>表中元素都是数据元素，每个元素都是单个元素</li>\n<li>表中元素的数据类型都相同，占有相同大小的存储空间</li>\n<li>表中元素具有抽象性，即仅讨论元素间的逻辑关系，不考虑具体内容</li>\n</ul>\n</li>\n<li>线性表是逻辑结构，表示元素一对一的相邻关系</li>\n<li>顺序表、链表是存储结构，表示在计算机中数据的存储方式</li>\n</ul>\n<h2 id=\"线性表的顺序表示\"><a class=\"anchor\" href=\"#线性表的顺序表示\">#</a> 线性表的顺序表示</h2>\n<p>顺序表的定义</p>\n<ul>\n<li>顺序表指线性表的顺序存储，用一组地址连续的存储单元存储</li>\n<li>顺序表是一种随机存取的存储结构，存储密度大</li>\n<li>顺序表最主要特点是随机访问，通过首地址与元素序号在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 找到指定元素</li>\n<li>一般用数组表示顺序表，线性表从 1 开始，数组下标从 0 开始</li>\n</ul>\n<p>顺序表上基本操作的实现</p>\n<ul>\n<li>插入结点 O (n)</li>\n<li>删除结点 O (n)</li>\n<li>按值查找 O (n)</li>\n</ul>\n<h2 id=\"线性链表及其操作\"><a class=\"anchor\" href=\"#线性链表及其操作\">#</a> 线性链表及其操作</h2>\n<p>单链表的定义</p>\n<ul>\n<li>单链表指线性表的链式存储，用一组任意的存储单元来存储数据元素</li>\n<li>为了建立元素之间的线性关系，对每个链表结点，还要存放一个指向后继的指针</li>\n<li>头指针用以标识单链表，如果其值为 NULL，表示空表</li>\n<li>在第一个结点前附加一个结点，成为头结点，可以不记录信息，也可以记录表长</li>\n<li>设置头结点，便于空表与非空表的统一处理</li>\n</ul>\n<p>单链表的基本操作</p>\n<ul>\n<li>建表 O (n)\n<ul>\n<li>头插法：将存有读入数据的新结点插入到当前链表表头\n<ul>\n<li>使用头插法会导致读入数据与生成链表顺序相反</li>\n</ul>\n</li>\n<li>尾插法：增加一个尾指针，以使新结点直接插入到表尾</li>\n</ul>\n</li>\n<li>查找 O (n)\n<ul>\n<li>按序号查找</li>\n<li>按值查找</li>\n</ul>\n</li>\n<li>插入结点 O (n)\n<ul>\n<li>一般指在某结点的后面插入新结点，即后插操作</li>\n</ul>\n</li>\n<li>删除结点 O (n)</li>\n<li>求表长 O (n)\n<ul>\n<li>注意：链表长度不包括头结点（如果有）</li>\n</ul>\n</li>\n</ul>\n<p>双链表</p>\n<ul>\n<li>在单链表基础上增加前驱指针</li>\n</ul>\n<p>循环链表</p>\n<ul>\n<li>对于循环单链表，尾结点指针不是指向 NULL，而是头结点</li>\n<li>对于循环双链表，在循环单链表基础上，头结点的前驱指针指向尾结点</li>\n</ul>\n<p>静态链表</p>\n<ul>\n<li>静态链表借助数组来描述链式存储结构，结点的指针域的值是下一结点的相对地址（数组下标），最后以 -1 或其他值域外的值表示结束</li>\n<li>静态链表的大小固定</li>\n<li>插入和删除时不需要移动元素</li>\n<li>查找元素和单链表一样，只能采用顺序访问方式</li>\n<li>静态链表操作起来明显不够方便，其存在的意义在于适用于不支持指针的语言</li>\n</ul>\n<p>存储密度</p>\n<ul>\n<li>结点大小为 k 的块链结构：表示一共有 k 个链表结点</li>\n<li>数据：单个结点中的数据所占的空间 a</li>\n<li>数据域：所有结点中的数据所占的空间之和 ak</li>\n<li>指针：单个结点中的指针所占的空间 b</li>\n<li>指针域：所有结点中的指针所占的空间之和 bk</li>\n<li>存储密度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>a</mi><mi>k</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi>k</mi></mrow></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">= \\dfrac{ak}{(a+b)k} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.30744em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n<p>顺序表与链表的比较</p>\n<ul>\n<li>从逻辑结构来看，都是线性结构。</li>\n<li>从物理结构来看，顺序表可以随机存取，存储数据密度高，但是分配与改变空间不变；链表空间离散，修改方便，但是不可随机存储，存储数据密度低。</li>\n<li>从创建来看，顺序表需要申请一片大小适合的空间；而链表无所谓。</li>\n<li>从销毁来看，顺序表需要将 length 设置为 0，从逻辑上销毁，再从物理上销毁空间，如果是静态分配的静态数组，系统会自动回收空间，而如果是动态数组，需要手动释放；链表逐点进行释放。</li>\n<li>从增加删除来看，顺序表都要对后续元素进行前移或后移，时间复杂度为 O (n)，主要来自于移动元素；而对于链表插入或删除元素只用修改指针就可以了，时间复杂度也为 O (n)，主要来自于查找目标元素，但是链表的查找元素所花费的时间可能远小于移动元素的时间。</li>\n<li>从查找来看，顺序表因为有顺序所以按位查找时间复杂度为 O (1)，如果按值查找时间复杂度为 O (n)，如果值是有序的则可以通过二分查找等方式降低在 O (log n) 的时间内找到；如果是链表的查找无论是按位还是按值都是 O (n) 的时间复杂度。</li>\n</ul>\n<h2 id=\"题目与总结-2\"><a class=\"anchor\" href=\"#题目与总结-2\">#</a> 题目与总结</h2>\n<ul>\n<li>算法题会给出一个很简单的需求，可以用比较常规的方法做，但往往会有很巧妙的做法，和面试试题的风格接近</li>\n<li>常见指针\n<ul>\n<li>双指针：用于同时遍历两个数组。例如：两个有序数组的合并</li>\n<li>快慢双指针：用于寻找数组或链表中的位置。例如：利用 “二倍速” 指针，一次遍历就能找到链表尾和链表的中间位置</li>\n</ul>\n</li>\n<li>数组\n<ul>\n<li>改变位置但是前后顺序不变：根据题目要求分成几个部分，分别逆置，最后整体逆置。假设分成 ab 两部分，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>b</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>b</mi><mi>a</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">(a^{-1}b^{-1})^{-1} = ba \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>删除第 i 个元素需要移动 n−i−1 次，插入到 i 位置需要移动 n-i 次</li>\n</ul>\n</li>\n<li>链表\n<ul>\n<li>在选择题中常考代码的执行顺序和指针的位置，可以通过画图快速解决</li>\n<li>单链表中，可以通过数据互换降低时间复杂度</li>\n<li>在 P 结点前插入新结点 X：将 X 结点插入 P 结点后面，然后将 P 与 X 中存储的数据互换</li>\n<li>删除 P 结点：将 P 结点的下一个结点的数据复制到 P 结点中，然后删除 P 结点的下一个结点\n<ul>\n<li>但是，当 P 指向尾结点时，这个方法就会出错（直接删除 P 指向的节点是错误的，因为 P 节点的前一个节点的 next 指针仍然指向 P 节点原来所在的地址，但是节点已经被删除了，next 指针指向的地址是无效的数据）。所以，最好的办法仍然是双指针</li>\n<li>注意：部分题目会忽略这种错误情况，怎么说呢...，如果出题人都没考虑这种情况，那也就别较真了～<s>毕竟，学习的目的是为了考试，做题的目的是为了得分</s></li>\n</ul>\n</li>\n<li>出现部分倒序：逆置部分结点，用三个结点（前中后）依次迭代，使中结点指向前结点，最后让头结点指向前结点</li>\n</ul>\n</li>\n<li>线性表需要在某位置进行某操作，选什么结构最适合\n<ul>\n<li>经常插入和删除：链表</li>\n<li>经常操作链表的表头和表尾：双循环链表 + 头结点 / 尾结点</li>\n<li>经常存取指定序号的元素 / 元素的前驱 / 元素的后继、在表尾插入删除：顺序表</li>\n</ul>\n</li>\n</ul>\n<p>【王道 2.2 应用第 12 题】【2013 408 真题】求长度为 n，值域为 n 的整数序列中出现次数大于 n / 2 的元素的值</p>\n<ul>\n<li>时间 O (n) 空间 O (n)：由于值域同样只有 n，可以另开辅助数组记录各元素出现次数，再根据次数是否大于 n / 2 求得结果（得分 10/15）</li>\n<li>时间 O (n log n) 空间 O (1)：将数组进行排序，则同值的元素连续出现，记录每个元素连续出现的次数求得结果，其中排序 O (n log n)，记录次数 O (n)（得分 11/15）</li>\n<li>时间 O (n) 空间 O (1)：将第一个整数假设为结果，计数器初始值为 1，从前向后扫描数组，如果当前元素与当前假设的结果的值一致，计数器 +1，否则 -1，当计数器为 0 时，将当前元素赋值给当前结果，计数器重新记为 1。重复上述过程直到扫描结束，如果最后计数器值大于 n / 2，则答案为当前结果，否则不存在主元素（得分 15/15）</li>\n</ul>\n<p>【王道 2.3 选择第 7 题】给定有 n 个元素的一维数组，建立一个有序单链表的最低时间复杂度是？</p>\n<ul>\n<li>虽然是求最低，但所给一维数组依旧认定为随机数组，不能认为已经有序，故答案为排序所需时间复杂度 O (n log n)，而非逐一插入的时间复杂度 O (n)</li>\n<li>若选择题没有 O (n log n) 这个选项，此时可以选 O (n^2)</li>\n</ul>\n<p>【算法题】逆置顺序表</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Inverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">;</span> left <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> left<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        l<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        l<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】逆置单链表（带头结点）<br />\n两种思路：3 指针正向遍历、2 指针正向遍历 + 插入头结点</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3 指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Inverse_3</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前一个结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前结点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下个结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        next <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存下一个结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        current<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前结点指向前一个结点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        prev <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前一个结点更新为当前结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        current <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前结点更新为下一个结点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    list<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 头结点指向新的头结点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//2 指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Inverse_2</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    list<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        prev <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        current <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        list<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Inverse_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 创建链表（有头结点）</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Node<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Node</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">Inverse_3</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">Inverse_2</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】删除顺序表中值等于 x 的元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DeleteX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等于 x 的个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            l<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    length <span class=\"token operator\">-=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】有序表合并<br />\n注意：写伪代码不要用 vector，直接用数组就行</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 思想：双指针遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CombineArray_0</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> size_a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> size_b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>size_a <span class=\"token operator\">+</span> size_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> p_a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> p_b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> p_t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p_a <span class=\"token operator\">&lt;</span> size_a <span class=\"token operator\">&amp;&amp;</span> p_b <span class=\"token operator\">&lt;</span> size_b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>p_a<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span>p_b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            t<span class=\"token punctuation\">[</span>p_t<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>p_a<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>p_a<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> b<span class=\"token punctuation\">[</span>p_b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            t<span class=\"token punctuation\">[</span>p_t<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>p_b<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            t<span class=\"token punctuation\">[</span>p_t<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>p_a<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            t<span class=\"token punctuation\">[</span>p_t<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>p_b<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p_a <span class=\"token operator\">>=</span> size_a <span class=\"token operator\">||</span> p_b <span class=\"token operator\">>=</span> size_b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p_a <span class=\"token operator\">&lt;</span> size_a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                t<span class=\"token punctuation\">[</span>p_t<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>p_a<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p_b <span class=\"token operator\">&lt;</span> size_b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                t<span class=\"token punctuation\">[</span>p_t<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>p_b<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CombineArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">CombineArray_0</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】将所有奇数移动到所有偶数之前</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 时间 O (n)，空间 O (1)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> q <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> q <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> q<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            a<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            a<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            q<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】最大连续子元素的和</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 思想：遍历数组，累加元素，累加后出现负数则跳过，每次计算都能得到当前元素的最大值，然后与整体的最大值对比即可</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MaxSum_0</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> max_temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max_temp <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            max_temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            max_temp <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> max_temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            max <span class=\"token operator\">=</span> max_temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"最大值：\"</span> <span class=\"token operator\">&lt;&lt;</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MaxSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">MaxSum_0</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】求两个数组的交集<br />\n注意：写伪代码不要用 algorithm 和 unordered_set，其他模版类也同样不能用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span> <span class=\"token comment\">// 用于哈希表</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span> <span class=\"token comment\">// 用于排序</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 哈希表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">Intersection_0</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr1<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">set1</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> set1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            set1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 防止重复加入</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 先排序，后遍历</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">Intersection_1</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr1<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> arr2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 去重</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Intersection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"哈希表: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">Intersection_0</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"排序: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">Intersection_1</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】去除重复元素</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间 O (n)，空间 O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 以单链表（没有头结点）为例，数组同理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveDuplicate</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Node<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Node<span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上一个结点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化哈希表，伪代码直接用数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 处理冲突，注意重复元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        key <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data <span class=\"token operator\">%</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> hash<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            hash<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            q<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        q <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RemoveDuplicate_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 20 15 14 7 15 21 7</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Node<span class=\"token operator\">*</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Node</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token number\">7</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">RemoveDuplicate</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】寻找未出现的最小正整数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 常规方法：遍历 n 次数组，每次寻找一个正整数，在某次没找到或者遍历完成时，得到答案</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 满分方法：分析正整数与数组的数量关系。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    正整数是连续的，若数组整体连续，数组中的最大值就是 n，那么未出现的最小正整数是 n+1，并且答案不会超过这个值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    若数组不连续，则中间必定有空位，而最小的空位就是答案</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    可以创建一个辅助数组，记录出现过的，然后遍历数组找到答案</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">FindMissingNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 伪代码这样写：int temp [length] = &#123; 0 &#125;;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            temp<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            res <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】两数相加（力扣）<br />\n题目描述：有两个非空链表。每个链表的第一个结点表示个位，第二个结点表示十位，第三个结点表示百位...... 要求将两数相加，返回一个相同形式的链表</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义链表结点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 链表两数相加的函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> l1<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建虚拟头结点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 进位</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 遍历两个链表，直到两个链表都为空</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> q <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> p<span class=\"token operator\">-></span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果 p 为空，取值为 0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> q<span class=\"token operator\">-></span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果 q 为空，取值为 0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> carry <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前位的和</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        carry <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新进位</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        curr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新结点存储当前位的数字</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        curr <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动 p 到下一个结点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> q <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动 q 到下一个结点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 如果有进位，创建新结点</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        curr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回结果链表（跳过虚拟头结点）</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 打印链表</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> node<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" -> \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">addTwoNumbers_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 示例链表 1: 342 (2 -> 4 -> 3)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> l1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    l1<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    l1<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 示例链表 2: 465 (5 -> 6 -> 4)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> l2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    l2<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    l2<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 相加</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> result <span class=\"token operator\">=</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 输出结果链表</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果应该是 7 -> 0 -> 8 (807)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"第三章-栈-队列-数组-广义表\"><a class=\"anchor\" href=\"#第三章-栈-队列-数组-广义表\">#</a> 第三章 栈、队列、数组、广义表</h1>\n<h2 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h2>\n<p>栈的基本概念</p>\n<ul>\n<li>栈是一种运算受限的线性表，只允许在一端进行插入或删除操作。</li>\n<li>数学性质：n 个不同元素进栈，出栈元素不同排列的个数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mstyle><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{1}{n + 1} C_{2n}^n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，这就是卡特兰数。</li>\n<li>栈的基本操作：\n<ul>\n<li>InitStack (&amp;S) { S.top = -1 } 初始化空栈</li>\n<li>StackEmpty (S) { S.top == -1 } 判断栈是否为空</li>\n<li>Push (&amp;S, x) { S.data [++S.top] = x } 入栈，先加一，后入栈</li>\n<li>Pop (&amp;S, &amp;x) { x = S.data [S.top--] } 出栈，先出栈，后减一</li>\n<li>GetTop (S, &amp;x) 读栈顶元素 x 并返回</li>\n<li>DestroyStack (&amp;S) 销毁栈，释放空间</li>\n<li>S.top == MaxSize - 1 栈满</li>\n<li>S.top + 1 栈长</li>\n<li>若题目没有做出限制，当算法需要用栈作为辅助时，可以直接使用这些函数（建议在代码后面添加注释）</li>\n</ul>\n</li>\n</ul>\n<p>堆栈的顺序存储结构</p>\n<ul>\n<li>顺序栈的实现：用地址连续的存储单元存放数据（数组），一个指针指向栈顶</li>\n<li>共享栈：两个顺序栈共享一个一维数组，栈底分别设在两端，栈顶向中间延伸。判断栈满：右栈顶 - 左栈顶 = 1</li>\n</ul>\n<p>堆栈的链式存储结构</p>\n<ul>\n<li>采用链式存储的栈称为链栈</li>\n<li>链栈没有头结点，直接指向栈顶元素。栈顶是链头，栈底是链尾</li>\n<li>出栈：top = top-&gt;next;</li>\n<li>优点：便于多个栈共享存储空间，提高效率，且不存在栈溢出的情况</li>\n</ul>\n<h2 id=\"队列\"><a class=\"anchor\" href=\"#队列\">#</a> 队列</h2>\n<p>队列的基本概念</p>\n<ul>\n<li>队列是一种只允许在表的一端插入，另一端删除的线性表。</li>\n<li>队列的操作：\n<ul>\n<li>InitQueue (&amp;Q) 初始化空队列</li>\n<li>QueueEmpty (Q) 判断队列是否为空</li>\n<li>EnQueue (&amp;Q, x) 入队，先存入，后加一</li>\n<li>DeQueue (&amp;Q, &amp;x) 出队，先取出，后加一</li>\n<li>GetHead (Q, &amp;x) 读队头元素 x 并返回</li>\n</ul>\n</li>\n</ul>\n<p>队列的顺序存储结构</p>\n<ul>\n<li>顺序存储</li>\n<li>循环队列：普通队列会出现假溢出情况，故引用循环队列，将队列从逻辑上视为一个环，利用取余运算实现\n<ul>\n<li>由于循环队列在队空与队满的判断条件是等价的，故需要一些处理方式来区分\n<ul>\n<li>牺牲一个单元来区分，约定：队头在队尾下一位置作为队满的标志</li>\n<li>增设表示元素个数的数据成员</li>\n</ul>\n</li>\n<li>判空：Q.front == Q.rear</li>\n<li>队满：(Q.rear + 1) % MaxSize == Q.front</li>\n<li>队长：(Q.rear - Q.front + MaxSize) % MaxSize</li>\n</ul>\n</li>\n</ul>\n<p>队列的链式存储结构</p>\n<ul>\n<li>队列的链式存储：采用链式存储的队列称为链队列。</li>\n<li>链队列往往设计成带头结点的单链表，且带有队头指针和队尾指针。</li>\n</ul>\n<p>双端队列</p>\n<ul>\n<li>双端队列指两端都可以入队出队操作的队列，两端称为前端和后端。</li>\n<li>受限双端队列：某端的输入或输出受限</li>\n</ul>\n<h2 id=\"栈和队列的应用\"><a class=\"anchor\" href=\"#栈和队列的应用\">#</a> 栈和队列的应用</h2>\n<ul>\n<li>栈在括号匹配中的应用：自左至右扫描表达式，若遇左括号，则将左括号入栈，若遇右括号，则将其与栈顶的左括号进行匹配，若配对，则栈顶的左括号出栈，否则出现括号不匹配错误，如果需要匹配但是栈空说明有单独的左或右括号，也匹配失败。如果结束，栈为空则正常结束，否则不匹配。</li>\n<li>栈在表达式求值中的应用\n<ul>\n<li>后缀表达式可以轻松获得运算符关系，且不用处理括号（用栈处理）</li>\n<li>后缀表达式中符号的先后顺序就是机算的顺序，为了保证手算与机算相同，优先计算左边的符号</li>\n<li>后缀表达式计算：从左往右，遇到数字就入栈，遇到操作符就出栈两个数字并计算，然后将计算结果入栈</li>\n<li>后缀左优先：先出栈的是右操作数</li>\n<li>前缀右优先：先出栈的是左操作数</li>\n<li>中缀转后缀的手算方法：A + B * (C - D) - E / F <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mspace width=\"0.4em\"/></mrow><annotation encoding=\"application/x-tex\">\\kern 4pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:0.4em;\"></span></span></span></span> -- 加括号 --&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mspace width=\"0.4em\"/></mrow><annotation encoding=\"application/x-tex\">\\kern 4pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:0.4em;\"></span></span></span></span> ( ( A + ( B * ( C - D ) ) ) - ( E / F ) ) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mspace width=\"0.4em\"/></mrow><annotation encoding=\"application/x-tex\">\\kern 4pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:0.4em;\"></span></span></span></span> -- 将符号向右移出当前所在的层级 --&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mspace width=\"0.4em\"/></mrow><annotation encoding=\"application/x-tex\">\\kern 4pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:0.4em;\"></span></span></span></span> ( ( A ( B ( C D ) - ) * ) + ( E F ) / ) - <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mspace width=\"0.4em\"/></mrow><annotation encoding=\"application/x-tex\">\\kern 4pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:0.4em;\"></span></span></span></span> -- 去除所有括号 --&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mspace width=\"0.4em\"/></mrow><annotation encoding=\"application/x-tex\">\\kern 4pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace\" style=\"margin-right:0.4em;\"></span></span></span></span> A B C D - * + E F / -\n<ul>\n<li>同样适用于前缀</li>\n<li>后缀转中缀只需要将这个过程反过来即可，或者按照后缀表达式的计算方法，利用栈转换</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>栈在递归中的应用\n<ul>\n<li>可以用栈来模拟递归过程，以消除递归</li>\n<li>对于同一个问题，非递归算法效率通常比递归算法更高</li>\n</ul>\n</li>\n<li>队列在层次遍历中的应用\n<ul>\n<li>BFS</li>\n<li>树的层序遍历</li>\n</ul>\n</li>\n<li>队列在计算机系统中的应用\n<ul>\n<li>缓冲</li>\n<li>页面置换算法</li>\n</ul>\n</li>\n</ul>\n<p>一般情况下不会考后缀表达式的代码题。为了保证手算与机算相同，可以测试一下代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cctype></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 判断运算符优先级</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> op<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>string <span class=\"token function\">infixToPostfix</span><span class=\"token punctuation\">(</span>string infix<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    string postfix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> opStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> infix<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            postfix <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            opStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                postfix <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                postfix <span class=\"token operator\">+=</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 弹出左括号</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                postfix <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                postfix <span class=\"token operator\">+=</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            postfix <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            opStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>opStack<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        postfix <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        postfix <span class=\"token operator\">+=</span> opStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        opStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> postfix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">calculatePostfix</span><span class=\"token punctuation\">(</span>string postfix<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> operandStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    string operandStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> postfix<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>operandStr<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">stof</span><span class=\"token punctuation\">(</span>operandStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                operandStr<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            operandStr <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">float</span> operand2 <span class=\"token operator\">=</span> operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">float</span> operand1 <span class=\"token operator\">=</span> operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operand1 <span class=\"token operator\">+</span> operand2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operand1 <span class=\"token operator\">-</span> operand2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operand1 <span class=\"token operator\">*</span> operand2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operand1 <span class=\"token operator\">/</span> operand2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token char\">'%'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>operand1 <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>operand2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">return</span> operandStack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    string infix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入中缀表达式：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> infix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    string postfix <span class=\"token operator\">=</span> <span class=\"token function\">infixToPostfix</span><span class=\"token punctuation\">(</span>infix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"后缀表达式：\"</span> <span class=\"token operator\">&lt;&lt;</span> postfix <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">float</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculatePostfix</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"计算结果：\"</span> <span class=\"token operator\">&lt;&lt;</span> result <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数组和特殊矩阵\"><a class=\"anchor\" href=\"#数组和特殊矩阵\">#</a> 数组和特殊矩阵</h2>\n<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>数组的概念</p>\n<ul>\n<li>数组是由 n 个相同类型的数据元素构成的有限序列</li>\n<li>数组是线性表的推广。一维数组可视为一个线性表，二维数组可视为其元素均为定长线性表的线性表，以此类推</li>\n</ul>\n<p>数组的存储结构</p>\n<ul>\n<li>对于多维数组有两种映射方法：按行优先与按列优先。一般默认按行优先</li>\n</ul>\n<h3 id=\"特殊矩阵\"><a class=\"anchor\" href=\"#特殊矩阵\">#</a> 特殊矩阵</h3>\n<p>特殊矩阵的压缩存储</p>\n<ul>\n<li>压缩存储：多个值相同的元素只分配一个存储空间，0 元素不分配</li>\n<li>特殊矩阵：如对称矩阵、上三角矩阵、对角矩阵\n<ul>\n<li>常考题目：将三角矩阵的一半（包括对角线）顺序存入一维数组中，问数组的索引与三角矩阵的元素位置的之间数量关系。</li>\n<li>解法：等差数列求和 + 未满一行 / 列的元素个数</li>\n<li>下三角矩阵：矩阵中满足 i &gt;= j，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>i</mi></mrow><mn>2</mn></mfrac></mstyle><mo>+</mo><mi>j</mi><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">k = \\dfrac{(i-1)i}{2} + j - 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>上三角矩阵：矩阵中满足 i &lt;= j，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mo>+</mo><mi>j</mi><mo>−</mo><mi>i</mi><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mo>+</mo><mi>j</mi><mo>−</mo><mi>i</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">k = \\dfrac{(i-1)(n+(n-(i-2)))}{2} + j - i = \\dfrac{(i-1)(2n-i+2)}{2} + j - i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> （n 为矩阵每行元素个数）</li>\n<li>注意：如果没有特别说明，矩阵的第一个元素是 a [1][1] （符合线性代数），数组的第一个元素是 a [0]，如果有说明，例如：数组的第一个元素是 a [1]，此时数组中的位置为 k + 1</li>\n<li>注意：如果是下三角矩阵，但是 i &lt;= j，此时要将 i 和 j 互换，上三角矩阵同理</li>\n</ul>\n</li>\n</ul>\n<p>稀疏矩阵存储</p>\n<ul>\n<li>稀疏矩阵指非零元素个数远小于零个数的矩阵</li>\n<li>存储方式：三元组（行，列，值）、十字链表法、带行 / 列指针向量的链接存储</li>\n<li>三元组\n<ul>\n<li>需要存储的数据包括：三元组、行数、列数、非 0 元素个数</li>\n<li>失去随机存取功能，每次存取都需要遍历三元组表</li>\n<li>三元组的结构（有很多种）：常见的有 (i, j, v) 和 (v, i, j)，v 表示元素值或非 0 元素个数，当 v 表示元素值时，i 和 j 表示元素的行和列；当 v 表示非 0 元素个数时，i 和 j 表示总行数和总列数\n<ul>\n<li>注意：如果题目没有给你三元组的结构，直接问你 (a, b, c) 对应的矩阵，除了三元组的结构以外，还要注意矩阵的第一个元素是 a [1][1] 还是 a [0][0]，有的题目就会考你这两个的区别，<s>也不知道它考这种东西是为了什么，就不能按照数学中的定义规范标准吗？</s>，此时只能把所有情况全都遍历一遍，看看有没有符合的选项</li>\n</ul>\n</li>\n<li>注意三元组相关问题的写法\n<ul>\n<li>问题：写出矩阵对应的三元组线性表。答案的写法：((行，列，值)，...) 例如：( (1, 2, 3), (4, 5, 6), (7, 8, 9) )</li>\n<li>问题：写出矩阵对应的三元组线性表的顺序存储。答案的写法：画一个 (非零元素个数 + 1) * 3 的表格，第一行的三个元素分别填写 矩阵的总行数、矩阵的总列数、非 0 元素个数，其余每行分别填写 行、列、值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>带行指针向量的链接存储（设矩阵为 m*n）\n<ul>\n<li>顺序加链式存储方法，类似于树的孩子表示法</li>\n<li>行指针向量：一个大小为 m+1 的数组，其中第 i 个元素存储第 i 行中第一个非零元素在链表中的位置（或者索引）</li>\n<li>链表：存储矩阵中所有非零元素，一个单链表存一行，每个单链表都有相同的行号。每个结点包含：非零元素所在的列号、值、指向本行下一个非零元素结点的指针</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"广义表\"><a class=\"anchor\" href=\"#广义表\">#</a> 广义表</h2>\n<p>广义表定义</p>\n<ul>\n<li>广义表 (Lists，又称列表) 是一种非连续性的数据结构，是线性表的一种推广</li>\n<li>表中的每一项可以是单个元素（原子），也可以是广义表（子表），但如果广义表的每个元素都是原子，它就变成了线性表</li>\n<li>广义表难以用顺序存储结构实现</li>\n<li>广义表的表尾总是一个广义表</li>\n<li>长度：元素的个数</li>\n<li>深度：括号的层次数，例如：L (a, (b, c, d), e) 长度为 3 深度为 2</li>\n</ul>\n<p>常用操作</p>\n<ul>\n<li>Head (L) 返回广义表的第一个元素</li>\n<li>Tail (L) 返回广义表去掉第一个元素后的部分</li>\n<li>例 Ls = ((A, B), (C, D))\n<ul>\n<li>Head(Ls) = (A, B)</li>\n<li>Tail(Ls) = ((C, D))</li>\n<li>Head(Head(Ls)) = A</li>\n<li>Tail(Tail(Ls)) = ()</li>\n<li>Head(Tail(Ls)) = (C, D)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"题目与总结-3\"><a class=\"anchor\" href=\"#题目与总结-3\">#</a> 题目与总结</h2>\n<p>【王道 3.2 选择第 8 题】【2011 408 真题】循环队列存储在数组 A [0..n-1] 中，队列非空时 front 和 rear 分别指向队头与队尾。初始时队列为空，且第一个进入队列的元素存储在 A [0]，则 front 和 rear 的初值为？</p>\n<ul>\n<li>反向思考。首先插入后的队首与队尾指向的位置均为 0，且插入元素只会更改 rear 的值，则 front 在插入前仍为 0，而 rear 需要 -1，对于循环队列，0 的前一个位置为 n - 1，故答案分别为 0, n - 1</li>\n</ul>\n<p>【王道 3.3 选择第 11 题】【2012 408 真题】将中缀表达式 a+b-a*((c+d)/e-f)+g 转换为等价的后缀表达式 ab+acd+e/f-*-g+ 时，用栈存放暂时不能确定运算次序的操作符，转换过程中栈的操作符个数最大为？</p>\n<ul>\n<li>无括号时正常乘除在先加减在后。有括号时，遇到右括号，完成对应的左括号之后范围内所有运算。</li>\n<li>比如本题，+ 直接运算，可弹出，- 不动，因为后面是个 <em>，加上第一个 (，遇到第一个) 时，第二个 ( 及里面的 + 弹出，遇到第二个 ) 时，第一个 ( 及里面的 / 与 - 弹出，</em> 运算完成，- * 先后弹出，+ 直接运算，弹出</li>\n<li>整个过程中，操作符最大的时刻在 - * (/-，即遇到第二个) 之前</li>\n</ul>\n<h1 id=\"第四章-串\"><a class=\"anchor\" href=\"#第四章-串\">#</a> 第四章 串</h1>\n<h2 id=\"串的定义和实现\"><a class=\"anchor\" href=\"#串的定义和实现\">#</a> 串的定义和实现</h2>\n<ul>\n<li>串的定义：串是由零个或多个字符组成的有限序列，为字符串的简称</li>\n<li>串的存储结构（串有三种存储方式）\n<ul>\n<li>定长顺序存储表示：分配一个固定长度</li>\n<li>堆分配存储表示：按串长动态分配，使用指针指向串的起始地址</li>\n<li>块链存储表示：类似于线性表链式存储结构，具体实现时可以使每个结点存放一个或多个字符</li>\n</ul>\n</li>\n<li>长度为 n 的字符串，设重复字符数为 k（例如：多 2 个 ‘a’、多 1 个 ‘b’，则 k=3），子串的个数为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mo>+</mo><mn>1</mn><mo>−</mo><mi>k</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{n(n + 1)}{2} + 1 - k \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>注意：空串、字符串本身 都包含在内</li>\n</ul>\n</li>\n<li>注意：C 语言中，字符串（字符类型的数组）以 '\\0' 为结尾，写代码的时候可能会用到</li>\n</ul>\n<h2 id=\"串的模式匹配\"><a class=\"anchor\" href=\"#串的模式匹配\">#</a> 串的模式匹配</h2>\n<h3 id=\"简单的模式匹配算法\"><a class=\"anchor\" href=\"#简单的模式匹配算法\">#</a> 简单的模式匹配算法</h3>\n<ul>\n<li>子串的定位操作通常称为串的模式匹配，求的是子串（模式串）在主串中的位置。</li>\n<li>暴力匹配算法的最大问题就是对主串一位位进行对比，当后面的匹配失败后只能回溯主串，只移动一位重新匹配</li>\n<li>最坏时间复杂度 O (mn)，但是一般情况下接近于 O (m+n)\n<ul>\n<li>答题时以最坏的为准</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"kmp-算法\"><a class=\"anchor\" href=\"#kmp-算法\">#</a> KMP 算法</h3>\n<p>由于模式串在最开始就是已知的，所以在失配前主串和模式串必然相等，我们可以选择模式串中能匹配的部分重新匹配，而不是直接从头开始</p>\n<p>计算 next 数组</p>\n<ul>\n<li>模式串的数组下标与 next 数组的数组下标相同</li>\n<li>前两个元素是固定的，注意模式串数组下标的起始位置\n<ul>\n<li>若从 1 开始，前两个元素是：0 1</li>\n<li>若从 0 开始，前两个元素是：-1 0</li>\n</ul>\n</li>\n<li>当 j 指针所在位置不匹配时，在不匹配的位置的左边画一个分界线，将模式串右移（j 指针向左移动），每移一步就匹配一次（分界线左边，上下位置对应的元素做对比），第一次匹配成功或匹配失败时停止，此时 j 指向第几号元素（注意数组下标的起始位置），next 数组值就是几</li>\n</ul>\n<p>复杂度</p>\n<ul>\n<li>使用 KMP 算法时需要先计算不同模式串 P 的 next 数组，时间复杂度为 O (m)，然后使用 KMP 算法计算，时间复杂度为 O (n)，从而平均时间复杂度为 O (m+n)，最坏时间复杂度为 O (mn)</li>\n<li>KMP 算法对于重复部分比较多的模式串匹配效果更好</li>\n</ul>\n<p>KMP 算法只会考手算 next 数组。为了保证手算与机算相同，可以测试一下代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 构建 next 数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GetNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pattern<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> patternLength <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> patternLength <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> pattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pattern<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 使用 KMP 算法进行字符串匹配</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">KMPMatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pattern<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> textLength <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> patternLength <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>patternLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">GetNext</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"next数组为：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> patternLength<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> next<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> textLength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pattern<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> patternLength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在位置 %d 处找到匹配\\n\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">KMP_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">char</span> text<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABABDABACDABABCABAB\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">char</span> pattern<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABABAA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">KMPMatch</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 KMP 算法进行字符串匹配</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"kmp-算法的进一步优化\"><a class=\"anchor\" href=\"#kmp-算法的进一步优化\">#</a> KMP 算法的进一步优化</h3>\n<p>KMP 算法的 next 数组存在一定问题，当前索引的值匹配失败时，那么模式串的其他同样值的地方也一定会匹配失败<br />\n对于多个字符重复的字符串，则 nextval 的优化程度会更高</p>\n<p>计算 nextval 数组</p>\n<ul>\n<li>先计算 next 数组</li>\n<li>注意数组下标的起始位置</li>\n<li>设模式串为 S，j 表示第几个元素，从左向右遍历 next 数组，若 S [j] == S [next [j]]，则 next [j] = next [next [j]]</li>\n<li>遍历结束后的 next 数组就是 nextval 数组</li>\n</ul>\n<h2 id=\"题目与总结-4\"><a class=\"anchor\" href=\"#题目与总结-4\">#</a> 题目与总结</h2>\n<p>【算法题】寻找两个字符串的最大匹配子串</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 暴力枚举 O (n^2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MaxString_0</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 最长匹配串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> length_current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    j <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        length_current<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> length_current<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          start <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          end <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          length <span class=\"token operator\">=</span> length_current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        i <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        j <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        length_current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 动态规划 O (nm)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MaxString_1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">// 创建一个二维 dp 数组，初始值为 0</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token keyword\">int</span> maxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 记录最长子串的长度</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">int</span> endIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 记录最长子串在 s 中的结束位置</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">// 动态规划过程</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 字符匹配</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 更新最大长度和结束位置</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxLength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          maxLength <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>          endIndex <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">// 输出结果</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxLength <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"最长匹配子串: \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">-</span> maxLength <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maxLength<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"没有匹配子串\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MaxString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  string s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefhijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  string t <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmn\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token comment\">//MaxString_0(s, t);</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token function\">MaxString_1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【算法题】无重复字符的最长子串（力扣）<br />\n思想：滑动窗口</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 滑动窗口模版</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 外层循环扩展右边界，内层循环扩展左边界</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 当前考虑的元素</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 区间 [left, right] 不符合题意，扩展左边界</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 区间 [left, right] 符合题意，统计相关信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>本题</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 无重复字符的最长子串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">LengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> set<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于去重</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录结果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 右指针逐步扩展</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> right<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前需要处理的字符</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 如果字符在集合中存在，则缩小窗口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            set<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移除左指针指向的字符</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动左指针</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前字符加入集合</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新最大长度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token string\">\"aabcabcdda\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">LengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"第五章-树与二叉树\"><a class=\"anchor\" href=\"#第五章-树与二叉树\">#</a> 第五章 树与二叉树</h1>\n<h2 id=\"树的基本概念\"><a class=\"anchor\" href=\"#树的基本概念\">#</a> 树的基本概念</h2>\n<h3 id=\"树的基本概念-2\"><a class=\"anchor\" href=\"#树的基本概念-2\">#</a> 树的基本概念</h3>\n<ul>\n<li>树：n 个结点的有限集（树是一种递归的数据结构，适合于表示具有层次的数据结构）\n<ul>\n<li>有且仅有一个特定的根结点</li>\n<li>n &gt; 1 时，除去根结点外的其他结点又可分为若干个互不相交的子树</li>\n</ul>\n</li>\n<li>根结点：只有子结点没有父结点的结点。除了根结点外，树任何结点都有且仅有一个前驱。</li>\n<li>分支结点：有子结点也有父结点的结点。</li>\n<li>叶子结点：没有子结点只有父结点的结点。</li>\n<li>非叶子结点：又称顶点，除了叶子结点以外的所有结点。</li>\n<li>祖先：根结点到结点的路径上的任意结点都是该结点的祖先。</li>\n<li>双亲：靠近根结点且最靠近该结点的结点。</li>\n<li>兄弟：有共同双亲结点的结点。</li>\n<li>堂兄弟：双亲结点在同一层的结点。</li>\n<li>空树：结点数为 0 的数。</li>\n<li>子树：当 n&gt;1 时，其余结点可分为 m 个互不相交的有限集合，每个集合本身又是一棵树，其就是根结点的子树。</li>\n<li>结点的度：一个结点的孩子（分支、子树）个数。</li>\n<li>树的度：树中结点的最大度数。</li>\n<li>树的高度（深度）：多少层。</li>\n<li>结点的层次（深度）：从上往下数。</li>\n<li>结点的高度：从下往上数。</li>\n<li>两结点之间的路径：由两个结点之间所经过的结点序列构成。</li>\n<li>两结点之间的路径长度：路径上所经过的边的个数。</li>\n<li>树的路径长度：指树根到每个结点的路径长的总和，根到每个结点的路径长度的最大值是树的高。</li>\n<li>有序树：树各结点的子树从左至右有次序不能互换。</li>\n<li>无序树：树各结点的子树从左至右无次序可以互换。</li>\n<li>森林：m 棵互不相交的树集合。加上一个共同根结点后即可认为是一棵树</li>\n</ul>\n<h3 id=\"树的性质\"><a class=\"anchor\" href=\"#树的性质\">#</a> 树的性质</h3>\n<ul>\n<li>树的结点数 = 边数 + 1</li>\n<li>树的结点数 = 所有结点度数之和 + 1（+1 是因为根结点）\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>n</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mrow><mi>i</mi><msub><mi>n</mi><mi>i</mi></msub></mrow><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=0}^n{n_i} = (\\sum_{i=0}^n{in_i}) + 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n</li>\n<li>度为 m 的树第 i 层至多 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">m^{i-1} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个结点（例如完全二叉树）</li>\n<li>高度为 h 的 m 叉树至多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{m^h-1}{m-1} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.295438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.526108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个结点</li>\n<li>高度为 h 的 m 叉树至少有 h 个结点，度为 m 的树至少有 h+m-1 个结点</li>\n<li>具有 n 个结点的 m 叉树最大高度为 n-(m-1)</li>\n<li>具有 n 个结点的 m 叉树最小高度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lceil\\log_m(n(m-1)+1)\\rceil \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.057252em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>已知高度最小时所有结点都有 m 个孩子，所以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><msup><mi>m</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle><mo>&lt;</mo><mi>n</mi><mo>⩽</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{m^{h-1}-1}{m-1}&lt;n\\leqslant\\dfrac{m^h-1}{m-1} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.295438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5261079999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7733399999999999em;vertical-align:-0.13667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.295438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.526108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，从而得到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn><mo>&lt;</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>⩽</mo><mi>h</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">h-1&lt;\\log_m(n(m-1)+1)\\leqslant h \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.057252em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n</li>\n<li>树的度 m 代表至少一个结点度是为 m，至少有 m+1 个结点，且一定是非空树。而 m 叉树指所有结点的度都小于等于 m，可以是空树</li>\n<li>森林中树的个数 = 结点数 - 边数</li>\n</ul>\n<h2 id=\"二叉树\"><a class=\"anchor\" href=\"#二叉树\">#</a> 二叉树</h2>\n<h3 id=\"二叉树的定义\"><a class=\"anchor\" href=\"#二叉树的定义\">#</a> 二叉树的定义</h3>\n<ul>\n<li>二叉树是度不大于 2 的有序树，即每个结点至多 2 棵子树，且有左右之分</li>\n<li>空树与只有根结点的情况都是二叉树</li>\n<li>即使某个结点只有一棵子树，也需要明确其是左子树还是右子树</li>\n<li>5 种形态：空、只有根、只有左、只有右、左右都有</li>\n</ul>\n<h3 id=\"特殊形态的二叉树\"><a class=\"anchor\" href=\"#特殊形态的二叉树\">#</a> 特殊形态的二叉树</h3>\n<ul>\n<li>满二叉树：高度为 h 且含有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^h - 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个结点的二叉树\n<ul>\n<li>每层都含有最多的结点，只有最后一层有叶子结点，不存在度为 1 的结点，所以可以按层序编号</li>\n<li>按层序从 1 开始编号，结点 i 的左孩子为 2i，右孩子为 2i+1，父结点（如果存在）为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>i</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\dfrac{i}{2}\\rfloor \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.02252em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3365200000000002em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 向下取整</li>\n<li>按层序从 0 开始编号，结点 i 的左孩子为 2i+1，右孩子为 2i+2，父结点（如果存在）为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\dfrac{i-1}{2}\\rfloor \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.02252em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3365200000000002em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 向下取整</li>\n</ul>\n</li>\n<li>完全二叉树：最后一层可以不含有最多结点的满二叉树，只有最后两层有叶子结点，最多只有一个度为 1 的结点，且一定为左孩子\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>⩽</mo><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">i\\leqslant\\lfloor\\dfrac{n}{2}\\rfloor \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.79619em;vertical-align:-0.13667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 为分支结点，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">i&gt;\\lfloor\\dfrac{n}{2}\\rfloor \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 为叶子结点</li>\n</ul>\n</li>\n<li>二叉排序树：左子树上所有结点的关键字均小于根结点的关键字；右子树上所有结点的关键字均大于根结点的关键字；左右子树又各是一棵二叉排序树</li>\n<li>平衡二叉树：树上任一结点的左子树和右子树的深度之差不超过 1</li>\n</ul>\n<h3 id=\"二叉树的性质\"><a class=\"anchor\" href=\"#二叉树的性质\">#</a> 二叉树的性质</h3>\n<ul>\n<li>非空二叉树叶子结点数 = 度为 2 的结点数 + 1</li>\n<li>二叉树的第 i 层至多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^{i-1} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个结点</li>\n<li>高度为 h 的二叉树至多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^h - 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个结点</li>\n<li>高度为 h 的完全二叉树至少有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^{h-1} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个结点</li>\n<li>具有 n 个结点的完全二叉树的高度（最低高度） <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy=\"false\">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">h=\\lceil\\log_2(n+1)\\rceil \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\log_2n\\rfloor + 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi><mo>⩽</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^{h-1}-1 &lt; n \\leqslant 2^h-1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7733399999999999em;vertical-align:-0.13667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>⩽</mo><mi>n</mi><mo>&lt;</mo><msup><mn>2</mn><mi>h</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^{h-1} \\leqslant n &lt; 2^h \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9857779999999998em;vertical-align:-0.13667em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>注意：必须是完全二叉树，有的题目会在这里挖坑（问：n 个结点的二叉树的高度？正确答案：不确定）</li>\n</ul>\n</li>\n<li>若二叉树的结点数为偶数，则度为 1 的结点数为奇数</li>\n<li>完全二叉树最多只有一个度为 1 的结点，度为 0 和度为 2 的结点的个数和一定为奇数，若完全二叉树有 2k 个结点，则必然有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mi>k</mi><mo separator=\"true\">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><mi>k</mi><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">n_1 = 1, n_0 = k, n_2 = k-1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，若完全二叉树有 2k-1 个结点，则必然有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mi>k</mi><mo separator=\"true\">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><mi>k</mi><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">n_1 = 0, n_0 = k, n_2 = k-1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n<h3 id=\"二叉树的存储结构\"><a class=\"anchor\" href=\"#二叉树的存储结构\">#</a> 二叉树的存储结构</h3>\n<ul>\n<li>二叉树的顺序存储结构\n<ul>\n<li>一般只用于满二叉树与完全二叉树，否则太浪费空间</li>\n<li>数组下标从 1 开始更恰当，以满足父子结点之间的编号关系</li>\n</ul>\n</li>\n<li>二叉树的链式存储结构\n<ul>\n<li>每个结点包含结点值、指向左右孩子结点的指针</li>\n<li>在含有 n 个结点的二叉链表中，含有 n+1 个空链域\n<ul>\n<li>在一棵有 n 个结点的二叉树中，非空指针的数量等于 n-1，因为一棵树中存在 n-1 条边，每一条边对应一个指向子结点的指针。总的指针域数量是 2n，所以空指针域数量是 n+1</li>\n</ul>\n</li>\n<li>如果要保存父结点的位置，可以添加一个父结点指针，从而变成三叉链表，含有 n+2 个空链域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二叉树的遍历\"><a class=\"anchor\" href=\"#二叉树的遍历\">#</a> 二叉树的遍历</h3>\n<p>二叉树的遍历</p>\n<ul>\n<li>二叉树的遍历指按某条搜索路径访问每个结点有且仅有一次</li>\n<li>前序遍历：先根结点，再左子树，再右子树</li>\n<li>中序遍历：先左子树，再根结点，再右子树</li>\n<li>后序遍历：先左子树，再右子树，再根结点</li>\n<li>层次遍历：以树按层次编号的顺序进行遍历</li>\n<li>层次遍历可以 将树转换成数组、可以求树的宽度</li>\n<li>根据算数表达式的分析树的先序、中序、后序遍历方式可以得到前缀、中缀、后缀表达式</li>\n<li>前序 / 中序 / 后序遍历中所有叶子结点的先后顺序相同</li>\n<li>若 m 是 n 的祖先，后序遍历可以得到 n 到 m 的路径</li>\n<li>时间复杂度为 O (n)，空间复杂度为 O (n)</li>\n</ul>\n<p>由遍历序列恢复二叉树</p>\n<ul>\n<li>由前序 / 后序 / 层序遍历加上中序遍历，可唯一确定一棵二叉树</li>\n<li>前序 / 层序遍历中根结点在最前，后序遍历中根结点在最后，由中序序列分辨出哪些结点在左边、哪些结点在右边，以此类推即可</li>\n</ul>\n<p>注意：交换二叉树中所有的左右子树，使用后序遍历最合适。实际上，前序、中序、后序都行，而且代码也都差不多，但答案给的是后序遍历，那就以答案为准 <s>毕竟目标是得分，而不是实现这个功能</s></p>\n<p>中序遍历的代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> tree<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">InorderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> tree<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">InorderTraversal</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>后序遍历交换左右子树</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ExchangeTree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> tree<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">ExchangeTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">ExchangeTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> tree<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    tree<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> tree<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    tree<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>层序遍历求树每一层的宽度</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 定义二叉树节点结构</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 计算二叉树每一层的宽度</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">levelWidths</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> widths<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储每一层的宽度</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> widths<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 队列用于层序遍历</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> levelSize <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前层的节点数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        widths<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>levelSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存当前层的宽度</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 遍历当前层的所有节点，并将下一层的节点加入队列</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> levelSize<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            TreeNode<span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 加入左子节点</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加入右子节点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> widths<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 创建测试用的二叉树</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">createTestTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    root<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    root<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    root<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    root<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    root<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">levelWidths_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createTestTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建测试二叉树</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> widths <span class=\"token operator\">=</span> <span class=\"token function\">levelWidths</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算每一层的宽度</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"每一层的宽度是: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width <span class=\"token operator\">:</span> widths<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> width <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"递归问题的非递归算法的设计\"><a class=\"anchor\" href=\"#递归问题的非递归算法的设计\">#</a> 递归问题的非递归算法的设计</h3>\n<ul>\n<li>用栈来模拟递归的过程</li>\n<li>效率更高，但编写起来更麻烦</li>\n</ul>\n<p>中序遍历：</p>\n<ol>\n<li>沿着根的左孩子结点依次入栈，直到左孩子为空。表示找到了最左边的可以输出的结点。</li>\n<li>栈顶元素出栈并访问。</li>\n<li>若栈顶元素的右孩子为空，则继续执行步骤二。</li>\n<li>若栈顶元素的右孩子不为空，则对其右子树执行步骤一。</li>\n</ol>\n<p>前序遍历与中序遍历类似，只是第一步就需要访问中间结点。</p>\n<p>后序非递归遍历算法的思路（不重要）：从根结点开始，将其入栈，然后沿其左子树一直往下搜索，直到搜索到没有左孩子的结点，但是此时不能出栈并访问，因为如果其有右子树，还需按相同的规则对其右子树进行处理。直至上述操作进行不下去，若栈顶元素想要出栈被访问，要么右子树为空，要么右子树刚被访问完（此时左子树早已访问完），这样就保证了正确的访问顺序。</p>\n<h3 id=\"线索二叉树\"><a class=\"anchor\" href=\"#线索二叉树\">#</a> 线索二叉树</h3>\n<p>基本概念</p>\n<ul>\n<li>线索二叉树将结点的前驱或后继的指针存放到叶子结点的空指针中，以更为方便地遍历二叉树</li>\n<li>需要额外增加两个标志域以表示其左右指针是指向子结点还是前驱或后继</li>\n<li>指针为空时，左指针指向前驱（若没有前驱则为空），右指针指向后继（若没有后继则为空）\n<ul>\n<li>注意题目中的描述，前驱线索化只改动空的左指针，后驱线索化只改动空的右指针，线索化需要改动所有空指针</li>\n</ul>\n</li>\n<li>将二叉树线索化需要一次遍历</li>\n<li>为方便，可以在二叉树的线索链表中添加一个头结点，头结点的左指针指向二叉树根结点，右指针指向最后一个结点</li>\n</ul>\n<p>线索二叉树的遍历</p>\n<ul>\n<li>前序 / 中序遍历扫描一遍指针即可</li>\n<li>只有后序线索树的遍历需要利用栈</li>\n</ul>\n<h2 id=\"树和森林\"><a class=\"anchor\" href=\"#树和森林\">#</a> 树和森林</h2>\n<h3 id=\"树的存储结构\"><a class=\"anchor\" href=\"#树的存储结构\">#</a> 树的存储结构</h3>\n<ul>\n<li>双亲表示法：是一种顺序存储方式，用一个保存结点的一维数组，每个结点保存数据和父结点的索引。查找双亲方便，但是查找孩子就只能从头遍历</li>\n<li>孩子表示法：是顺序加链式存储方法，顺序存储所有元素，添加一个 firstChild 域，指向第一个孩子结构体的指针，孩子结构体包括元素位置索引与指向下一个孩子结构体的 next 指针。寻找孩子比较方便，但是寻寻找双亲需要遍历 n 个结点 n 个孩子链表</li>\n<li>孩子兄弟表示法：是一种链式存储方式，定义了两个指针，分别指向第一个孩子与右兄弟，类似于二叉树，可以利用二叉树来实现对树的处理。也称为二叉树表示法。可以将树操作转换为二叉树的操作，但是查找双亲麻烦。可以为每个结点设置一个指向双亲的结点。</li>\n</ul>\n<h3 id=\"二叉树与树-树林之间的转换\"><a class=\"anchor\" href=\"#二叉树与树-树林之间的转换\">#</a> 二叉树与树、树林之间的转换</h3>\n<ul>\n<li>树转换为二叉树：遵循左孩子右兄弟原则，由于根结点没有兄弟，所以对应的二叉树没有右子树\n<ul>\n<li>与孩子兄弟表示法很像，但是要注意：树转换为二叉树是有严格的左右子树规定的，而孩子兄弟表示法不分左右子树</li>\n<li>树转换为二叉树后，用二叉链表法表示，既符合树转换为二叉树的定义，又符合树的孩子兄弟表示法</li>\n</ul>\n</li>\n<li>森林转换为二叉树：先将森林中的每棵树转换为二叉树，从左向右，依次将右边的二叉树作为右结点</li>\n</ul>\n<h3 id=\"树和森林的遍历\"><a class=\"anchor\" href=\"#树和森林的遍历\">#</a> 树和森林的遍历</h3>\n<p>表格中每行的遍历结果是等价的</p>\n<table>\n<thead>\n<tr>\n<th>树</th>\n<th>森林</th>\n<th>二叉树</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>先根遍历</td>\n<td>先序遍历</td>\n<td>前序遍历</td>\n</tr>\n<tr>\n<td>后根遍历</td>\n<td>中序遍历</td>\n<td>中序遍历</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"转换关系\"><a class=\"anchor\" href=\"#转换关系\">#</a> 转换关系</h3>\n<p>假设森林为 F，树为 T，转换而来的二叉树为 B</p>\n<p>结点关系</p>\n<ul>\n<li>树转换为二叉树时，树的每个分支节结点的所有子结点的最右子结点无右孩子，根结点转换后也无右孩子</li>\n<li>T 有 n 个结点，叶子结点个数为 m，则 B 中无右孩子的结点个数为 n-m+1 个</li>\n<li>F 有 n 个非终端结点，则 B 中无右孩子的结点有 n+1 个\n<ul>\n<li>根据森林与二叉树转换规则 “左孩子右兄弟”，B 中右指针域为空代表该结点没有兄弟结点。森林中每棵树的根结点从第二个开始依次连接到前一棵树的根的右孩子，因此最后一棵树的根结点的右指针为空，这里有一个。另外，每个非终端结点即代表有孩子，其所有孩子结点不论有多少个兄弟，在转换之后，最后一个孩子的右指针一定为空，故树 B 中右指针域为空的结点有 n+1 个</li>\n</ul>\n</li>\n</ul>\n<p>边关系</p>\n<ul>\n<li>F 有 n 条边、m 个结点，则 F 包含 T 的个数为 m-n\n<ul>\n<li>若有 n 条边，则如果全部组成最小的树每个需要两个结点，总共需要 2n 个结点，组成 n 根树。假定 2n&gt;m，则还差 2n-m 个结点才能两两成树，所以少的这些结点不能单独成树，导致有 2n-m 个结点只能跟其他现成的树组成结点大于二的树。所以此时只能组成 n-(2n-m)=m-n 棵树</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二叉排序树\"><a class=\"anchor\" href=\"#二叉排序树\">#</a> 二叉排序树</h2>\n<p>二叉排序树的定义</p>\n<ul>\n<li>二叉排序树的左子树所有结点小于根结点，右子树所有结点大于根结点</li>\n<li>二叉排序树的中序遍历必然严格单调递增</li>\n</ul>\n<p>二叉排序树的删除</p>\n<ul>\n<li>右子树空，则用左儿子结点填补</li>\n<li>左子树空，则用右儿子结点填补</li>\n<li>左右子树均非空，则用右子树的中序序列的第一个结点填补</li>\n</ul>\n<p>二叉排序树的查找</p>\n<ul>\n<li>查找效率取决于树的高度：</li>\n<li>如果左右子树高度差不超过 1（即平衡二叉树），则平均查找长度为 O (log n)</li>\n<li>如果是一棵单支树（即类似于单链表），则为 O (n)</li>\n</ul>\n<h2 id=\"哈夫曼树\"><a class=\"anchor\" href=\"#哈夫曼树\">#</a> 哈夫曼树</h2>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<ul>\n<li>哈夫曼树（最优二叉树）：带权路径长度最短的二叉树。不一定是完全二叉树</li>\n<li>WPL = 树中所有叶结点带权路径长度（路径长度 * 结点权值）之和 = 树中所有非叶结点的权值之和</li>\n<li>对于 n 个带权叶结点构成的所有二叉树中，WPL 值最小的为哈夫曼树</li>\n</ul>\n<h3 id=\"构造和性质\"><a class=\"anchor\" href=\"#构造和性质\">#</a> 构造和性质</h3>\n<p>构造</p>\n<ul>\n<li>每次选取两棵根结点权值最小的树作为新结点的左右子树，以此反复</li>\n<li>哈夫曼树没有度为 1 的结点</li>\n<li>哈夫曼树不一定都是二叉树，但常考二叉树</li>\n</ul>\n<p>性质</p>\n<ul>\n<li>m 叉哈夫曼树中叶子结点数为 n，非叶子结点数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle><mo stretchy=\"false\">⌉</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lceil\\dfrac{n-1}{m-1}\\rceil \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>n 个结点构造的二叉哈夫曼树，共 2n-1 个结点，有 n 个叶子，有 n-1 个非叶子</li>\n<li>高度为 h 的哈夫曼树，结点数至少为 2h-1</li>\n</ul>\n<h3 id=\"哈夫曼编码\"><a class=\"anchor\" href=\"#哈夫曼编码\">#</a> 哈夫曼编码</h3>\n<p>等长编码</p>\n<ul>\n<li>构造完全二叉树，使所有结点都在同一层，且都是叶子结点</li>\n<li>保持结构不变，尽量让权值变小</li>\n<li>唯一的优点：解码效率高</li>\n</ul>\n<p>哈夫曼编码</p>\n<ul>\n<li>哈夫曼编码基于哈夫曼树，利用哈夫曼树对 01 的数据进行编码，来表示不同的数据含义，因为哈夫曼树必然权值最小，所以对于越常使用的编码越短，越少使用的编码越长，所以发送信息的总长度是最小的。</li>\n<li>将编码使用次数作为权值构建哈夫曼树，然后根据左 0 右 1 的原则，按根到叶子结点的路径就变成了哈夫曼编码。</li>\n<li>哈夫曼编码是可变长度编码，即允许对不同字符用不等长的二进制表示，也是一个前缀编码，没有一个编码是另一个编码的前缀。</li>\n<li>树中叶结点的路径就是编码结果</li>\n<li>哈夫曼编码也可以用于压缩</li>\n<li>缺点：解码效率低、需要存储编码表</li>\n</ul>\n<p>一般情况下不会考哈夫曼树的代码题。为了保证手算与机算相同，可以测试一下代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 哈夫曼树的结点定义</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">HuffmanNode</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    string name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 权值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    HuffmanNode<span class=\"token operator\">*</span> left<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左子树和右子树指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">HuffmanNode</span><span class=\"token punctuation\">(</span>string n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">weight</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 自定义比较器，用于优先队列排序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Compare</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HuffmanNode<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> HuffmanNode<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token operator\">-></span>weight <span class=\"token operator\">></span> b<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按权值从小到大排序</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 构造哈夫曼树的函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>HuffmanNode<span class=\"token operator\">*</span> <span class=\"token function\">buildHuffmanTree</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> names<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> weights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 创建优先队列（最小堆）</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    priority_queue<span class=\"token operator\">&lt;</span>HuffmanNode<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>HuffmanNode<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Compare<span class=\"token operator\">></span> pq<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 将每个名称和权值构造为结点并加入优先队列</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">HuffmanNode</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 构造哈夫曼树</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 取出两个最小权值的结点</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        HuffmanNode<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        HuffmanNode<span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 创建新的父结点，权值为两个子结点的权值和</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        HuffmanNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">HuffmanNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">-></span>weight <span class=\"token operator\">+</span> right<span class=\"token operator\">-></span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        parent<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        parent<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 将新的父结点加入优先队列</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        pq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 最终队列中剩下的唯一结点就是哈夫曼树的根结点</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 递归打印哈夫曼树（前序遍历）</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printHuffmanTree</span><span class=\"token punctuation\">(</span>HuffmanNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> string prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token operator\">-></span>name<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"名称: \"</span> <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", 权值: \"</span> <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>weight <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", 编码: \"</span> <span class=\"token operator\">&lt;&lt;</span> prefix <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"名称: \"</span> <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>weight <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", 权值: \"</span> <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>weight <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">printHuffmanTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">printHuffmanTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">huffmanTree_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 输入数据</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"H\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> weights <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">// 构造哈夫曼树</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    HuffmanNode<span class=\"token operator\">*</span> root <span class=\"token operator\">=</span> <span class=\"token function\">buildHuffmanTree</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 打印哈夫曼树</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"前序遍历\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">printHuffmanTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"并查集\"><a class=\"anchor\" href=\"#并查集\">#</a> 并查集</h2>\n<p>并查集</p>\n<ul>\n<li>将一个集合划分为互不相交的子集。类似于森林。</li>\n<li>一般用树或森林的双亲表示作为并查集的存储结构，每个子集用一个树表示。</li>\n<li>用数组元素的下标表示元素名，用根结点的下标表示子合集名，根结点的双亲结点为负数。</li>\n</ul>\n<p>并查集的基本操作</p>\n<ul>\n<li>查找：查找两个元素是否属于同一个集合 O (n)</li>\n<li>合并：如果两个元素不属于同一个集合，且所在的两个集合互不相交，则合并这两个集合 O (1)</li>\n<li>路径压缩：如果一个结点只有一个子结点，且子结点也只有一个子结点，那么这条链路会非常长，即对应的树会很高，影响查询效率。所以把沿途所有的结点都设为根结点的孩子</li>\n</ul>\n<p>例如子集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>D</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">}</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">S_1 = \\{A, B, D, E\\} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>H</mi><mo stretchy=\"false\">}</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">S_2 = \\{C, H\\} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>I</mi><mo stretchy=\"false\">}</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">S_3 = \\{F, G, I\\} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></p>\n<p>存储结构为：</p>\n<table>\n<thead>\n<tr>\n<th>数据元素</th>\n<th>A</th>\n<th>B</th>\n<th>C</th>\n<th>D</th>\n<th>E</th>\n<th>F</th>\n<th>G</th>\n<th>H</th>\n<th>I</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数组下标</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n</tr>\n<tr>\n<td>双亲</td>\n<td>-4</td>\n<td>0</td>\n<td>-2</td>\n<td>0</td>\n<td>3</td>\n<td>-3</td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p>其中，负数表示这个点有子结点，其绝对值为子集合的元素数量，正数表示其父结点的索引值</p>\n<h2 id=\"题目与总结-5\"><a class=\"anchor\" href=\"#题目与总结-5\">#</a> 题目与总结</h2>\n<ul>\n<li>树和二叉树\n<ul>\n<li>计算：结点数量、高度、空指针域数量、最大值、最小值</li>\n</ul>\n</li>\n<li>二叉树的遍历\n<ul>\n<li>二叉树与遍历序列之间互相推导</li>\n<li>线索二叉树的指针指向</li>\n<li>利用中序遍历将表达式树（二叉树）转为中缀表达式（用括号表示操作符的计算次序）</li>\n<li>交换左右子树：将访问中间结点的代码改成交换左右子树的代码即可</li>\n</ul>\n</li>\n</ul>\n<p>完全二叉树的第 6 层有 8 个叶子结点，则树结点个数最多为？</p>\n<ul>\n<li>第 6 层结点数为 2^(6-1) = 32 个，有 8 个叶子结点，考虑结点数最多的情况，其余结点都有 2 个子结点，则第 7 层结点数为 (32 - 8) * 2 = 48 个</li>\n<li>前 6 层结点数为 2^6 - 1 = 63 个，则树结点个数最多为 63 + 48 = 111</li>\n</ul>\n<p>【王道 5.1 选择第 7 题】【2010 408 真题】在一棵度为 4 的树中，若有 20 个度为 4 的结点，10 个度为 3 的结点，1 个度为 2 的结点，10 个度为 1 的结点，则树的叶结点个数是？</p>\n<ul>\n<li>根据树的性质，树的结点数 = 树的分支数 + 1 = 树的度数 + 1</li>\n<li>叶结点个数 + 20 + 10 + 1 + 10 = 20 * 4 + 10 * 3 + 1 * 2 + 10 * 1 + 1</li>\n<li>解得：叶结点个数 = 82</li>\n</ul>\n<p>【王道 5.3 选择第 29 题】二叉树在线索化后，仍不能有效求解的问题是？<br />\nA. 前序线索二叉树求前序后继<br />\n B. 中序线索二叉树求中序后继<br />\n C. 中序线索二叉树求中序前驱<br />\n D. 后续线索二叉树求后序后继</p>\n<ul>\n<li>线索二叉树不能有效求解，意味着在遍历过程中线索无法指向实际存在的前驱 / 后继。</li>\n<li>对于前序 / 中序的遍历过程，它们的共同点在于一定会在叶子结点遍历到与该结点不直接相连的结点上，那么线索也就必定存在；而后序遍历是可能有非叶子结点遍历过去的，而非叶子结点不能建立线索，故无法继续遍历到它的实际后继。</li>\n<li>故只能选 D</li>\n</ul>\n<p>【王道 5.4 选择第 27 题】若度为 m 的哈夫曼树中，叶子结点个数为 n，则非叶子结点的个数为？</p>\n<ul>\n<li>度为 m 的哈夫曼树，根据其建立过程，每次选择根结点度数最小的 m 棵树进行合并，意味着其所有结点的度数只有 0 和 m 两种可能。</li>\n<li>已知总结点个数 = 分支数 - 1 = 非叶子结点个数 y * m - 1 = n + y，解得：y = (n - 1) / (m - 1)，最后向上取整。</li>\n</ul>\n<h1 id=\"第六章-图\"><a class=\"anchor\" href=\"#第六章-图\">#</a> 第六章 图</h1>\n<h2 id=\"图的基本概念\"><a class=\"anchor\" href=\"#图的基本概念\">#</a> 图的基本概念</h2>\n<p>图的定义</p>\n<ul>\n<li>图不可以为空图，点集不得为空，但边集可以</li>\n<li>图是顶点集和边集构成的二元组，即图 G 由顶点集 V 和边集 E 组成，记为 G = (V, E)，其中 V (G) 表示图 G 中顶点的有限非空集，E (G) 表示图 G 中顶点之间的关系（边）集合</li>\n<li>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">V = \\{v_1, v_2 \\cdots, v_n\\} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，则用 |V| 表示图 G 中顶点的个数，也称图 G 的阶，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>u</mi><mo>∈</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>v</mi><mo>∈</mo><mi>V</mi><mo stretchy=\"false\">}</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">E = \\{(u, v) \\vert u \\in V, v \\in V\\} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，用 |E| 表示图 G 中边的条数</li>\n</ul>\n<p>名词术语</p>\n<ul>\n<li>有向图：边集由有向边（弧）构成，用 &lt;,&gt; 表示</li>\n<li>无向图：边集由无向边（边）构成，用 (,) 表示</li>\n<li>简单图：没有重复边，没有顶点到自身的边，否则为多重图（多重图不考）</li>\n<li>完全图：任意两点之间都存在边，共 n (n-1)/2 个边</li>\n<li>有向完全图：任意两点之间都存在两条方向相反的弧，共 n (n-1) 个弧</li>\n<li>子图：边集与点集均为另一个图的子集\n<ul>\n<li>当边集等价时，则称为生成子图</li>\n</ul>\n</li>\n<li>无向图的连通、连通图、连通分量\n<ul>\n<li>连通：两点之间存在路径，则两点连通</li>\n<li>连通图：图中任意两点都是连通的</li>\n<li>极大连通子图：又称连通分量。连通图的极大连通子图是其自身，非连通图有多个极大连通子图</li>\n<li>极小连通子图：即生成树，对于非连通图没有意义</li>\n</ul>\n</li>\n<li>有向图的强连通、强连通图、强连通分量\n<ul>\n<li>强连通：a -&gt; b 和 b -&gt; a 之间都有路径</li>\n<li>强连通图：图中任意两点都是强连通的</li>\n<li>极大强连通子图：又称强连通分量，与极大连通子图类似</li>\n<li>不存在极小强连通子图</li>\n</ul>\n</li>\n<li>生成树、生成森林\n<ul>\n<li>生成树：连通图中，包含全部顶点的极小连通子图</li>\n<li>生成森林：非连通图中，由生成树构成的森林</li>\n</ul>\n</li>\n<li>度、入度、出度\n<ul>\n<li>度（无向图）：与顶点相连的边数</li>\n<li>度（有向图）：入度与出度之和\n<ul>\n<li>入度：以顶点为终点的有向边数</li>\n<li>出度：以顶点为起点的有向边数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网：边有权值的图称为带权图，也称为网</li>\n<li>稠密图、稀疏图：边数多就是稠密图，反之为稀疏图，均为模糊而相对的概念</li>\n<li>路径：从一个点到另一个点所经过的顶点序列</li>\n<li>路径长度：沿路径所经过的边数</li>\n<li>回路：环</li>\n<li>简单路径、简单回路：结点不重复出现</li>\n<li>距离：最短路径</li>\n<li>树与图：树是不存在回路且连通的无向图。（树与图是逻辑的区别）</li>\n<li>有向树：形如树的有向图，一个顶点的入度为 0，其余顶点入度均为 1</li>\n</ul>\n<p>连通、边、顶点之间的关系</p>\n<ul>\n<li>无向图的边的最大值：n (n-1)/2</li>\n<li>有向图的弧的最大值：n (n-1)</li>\n<li>n 个顶点的连通图，最少要 n-1 个边，构成线形或树形</li>\n<li>n 个顶点的强连通图，最少要 n 个弧，构成环形</li>\n<li>非（强）连通情况下边最多的情况：由 n-1 个顶点构成（有向）完全图，此时加入一个顶点形成非（强）连通图</li>\n<li>n 个顶点和 m 条边的无向图的连通分量最多为：n - m</li>\n<li>判断连通分量和强连通分量的数量\n<ul>\n<li>当某个顶点只有出弧而没有入孤时，其他顶点无法到达这个项点，不可能与其他顶点和边构成强连通分量（这个单独的顶点构成一个强连通分量）</li>\n<li>依次选择无入弧顶点构成连通分量，删除该顶点以及所有以之为结尾的弧</li>\n<li>最后得到的每个顶点就是一个强连通分量，其数量就是强连通分量数</li>\n</ul>\n</li>\n<li>对于 n 个顶点的环，有 n 棵生成树\n<ul>\n<li>因为 n 个顶点的环的生成树的顶点为 n-1，去掉任意一条边就能得到一棵生成树，环一共有 n 条边，所以可以去掉 n 条，得到 n 棵生成树</li>\n</ul>\n</li>\n<li>若 n 个顶点、e 条边的无向图是一个森林，则一共有 n-e 棵树\n<ul>\n<li>设一共有 x 棵树，则只需要 x-1 条边就能将森林连接为一整棵树，由树的性质得到 边数 + 1 = 顶点数，即 e+(x-1)+1=n，解得 x=n-e</li>\n</ul>\n</li>\n</ul>\n<p>度的关系</p>\n<ul>\n<li>无向图的全部顶点的度的和等于边数的两倍\n<ul>\n<li>因为每条边都与两个顶点关联。</li>\n</ul>\n</li>\n<li>有向图的全部顶点的入度与出度之和相等，并且等于边数\n<ul>\n<li>因为每条有向边都有一个起点和终点。</li>\n</ul>\n</li>\n<li>对于 n 个顶点的无向图，每个顶点的度最大为 n-1\n<ul>\n<li>因为任意一个顶点可以与其他 n-1 个顶点相联（默认是简单图，不能自己连向自己）</li>\n</ul>\n</li>\n<li>对于 n 个顶点的有向图，每个顶点的度最大为 2n-2\n<ul>\n<li>因为任意一个顶点可以与其他 n-1 个顶点有指向相反的两条边</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"图的存储方法\"><a class=\"anchor\" href=\"#图的存储方法\">#</a> 图的存储方法</h2>\n<ul>\n<li>邻接矩阵\n<ul>\n<li>一维数组存顶点信息，二维数组（矩阵）存储边</li>\n<li>设邻接矩阵为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">A \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mi>n</mi></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">A^n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 的元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mi>n</mi></msup><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">A^n[i][j] \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 表示点 i 到点 j 长度为 n 的路径数目</li>\n<li>无向图的邻接矩阵：对称矩阵</li>\n<li>有向图的邻接矩阵：行出列入，第 i 行上所有非零元素的个数等于顶点 i 的出度，第 i 列上所有非零元素的个数等于顶点 i 的入度</li>\n<li>创建矩阵的时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n</li>\n<li>邻接表\n<ul>\n<li>邻接表：与树的孩子表示法类似。表示顶点的出度</li>\n<li>逆邻接表：只能存储有向图。表示顶点的入度</li>\n<li>邻接表顶点数 n 决定顶点表个数，边数 e 决定边表个数</li>\n<li>有向图有边结点 e 个</li>\n<li>无向图有边结点 2e 个</li>\n<li>创建表的时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n+e) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n</li>\n<li>十字链表：用顶点结点和弧结点存储有向图</li>\n<li>邻接多重表：用顶点结点和边结点存储无向图</li>\n</ul>\n<p><img data-src=\"21292565.jpg\" alt=\"img\" /></p>\n<h2 id=\"图的遍历\"><a class=\"anchor\" href=\"#图的遍历\">#</a> 图的遍历</h2>\n<p>广度优先搜索 BFS</p>\n<ul>\n<li>广度优先是每一次遍历都要把所有的相邻顶点全部遍历到</li>\n<li>非递归，需要使用队列</li>\n<li>BFS 可以解决非带权图的单源最短路径问题（因为广度优先搜索按照距离由近到远）</li>\n</ul>\n<p>深度优先搜索 DFS</p>\n<ul>\n<li>深度优先是每一次遍历只遍历最近的一个一直深入</li>\n<li>递归算法</li>\n<li>邻接矩阵方式唯一，所以深度优先序列唯一。邻接表方式不唯一，所以深度优先序列不唯一</li>\n<li>使用 DFS 算法递归地遍历一个无环有向图，并在退出递归时输出相应顶点，这样得到的顶点序列是逆拓扑排序（因为栈的先进后出特性）</li>\n</ul>\n<p>广度 / 深度优先生成树</p>\n<ul>\n<li>广度优先生成树：根据广度优先遍历可以将所有第一次访问顶点时的路径组合生成一个广度优先生成树，若图顶点为 n 个，则生成树边一共有 n-1 条。因为保存图的数据结构若是不唯一，则其广度优先生成树也是不唯一的。若邻接矩阵存储则唯一，若邻接表存储则不唯一</li>\n<li>广度优先生成森林：若图是不连通的，那会生成连通分量个广度优先生成树，就构成了广度优先生成森林</li>\n<li>深度优先生成树：根据深度优先遍历可以将所有第一次访问顶点时的路径组合生成一个深度优先生成树，若图顶点为 n 个，则生成树边一共有 n-1 条。因为保存图的数据结构若是不唯一，则其深度优先生成树也是不唯一的。如果无向图非连通，则一个顶点出发只能一次性遍历到该顶点所在连通分量的所有顶点</li>\n<li>深度优先生成森林：若图是不连通的，会生成连通分量个深度优先生成树，构成了深度优先生成森林</li>\n<li>广度优先生成树的高度 小于等于 深度优先生成树的高度</li>\n</ul>\n<p>图遍历与图连通性</p>\n<ul>\n<li>若起始顶点到其他各顶点都有路径，那么只需调用一次深度优先或广度优先遍历函数。</li>\n<li>对强连通图，从任意一顶点出发都只用调用一次深度优先或广度优先遍历函数。</li>\n<li>遍历时函数调用层数等于该图的连通分量数。（因为存在不同的连通分量需要多次调用才能全部访问到）</li>\n</ul>\n<h2 id=\"图的应用\"><a class=\"anchor\" href=\"#图的应用\">#</a> 图的应用</h2>\n<h3 id=\"最小生成树\"><a class=\"anchor\" href=\"#最小生成树\">#</a> 最小生成树</h3>\n<p>最小生成树</p>\n<ul>\n<li>最小生成树的边的权值之和总是唯一且最小</li>\n<li>最小生成树的代价 = 所有边的权值之和</li>\n<li>最小生成树的边数 = 顶点数 - 1 （减去一条边则不连通，增加一条边则会出现回路）</li>\n<li>如果没有权值相同的边，则最小生成树唯一</li>\n<li>若一个连通图本身就是一棵树，则其最小生成树就是其本身</li>\n<li>只用连通图才有生成树，非连通图只有生成森林</li>\n<li>最小生成树 不一定是 最短路径</li>\n</ul>\n<p>Prim 算法</p>\n<ul>\n<li>每次选取与当前点集合距离最近的点，并且不构成回路</li>\n<li>n 为顶点个数，时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>适用于边多、顶点少的图</li>\n</ul>\n<p>Kruskal 算法</p>\n<ul>\n<li>将边按边权从小到大排，每次选取两端在不同连通分量的边（实际上就是从小到大选边，如果构成回路就放弃这条边）</li>\n<li>使用堆来存放边（可以二分查找）</li>\n<li>e 为边的个数，时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>e</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>e</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(e \\log_2 e) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>适用于边少、顶点多的图</li>\n</ul>\n<h3 id=\"最短路径\"><a class=\"anchor\" href=\"#最短路径\">#</a> 最短路径</h3>\n<p>最短路径一定是简单路径（各个顶点不重复出现）</p>\n<p>BFS 算法</p>\n<ul>\n<li>单源最短路径算法（无权图，每条边的权值全部为 1）</li>\n<li>定义两个数组，索引号就代表元素的序号，一个数组表示从起点开始到该点的最短路径长度，另一个数组表示从起点开始到该点的最短路径的上一个顶点的索引值。</li>\n</ul>\n<p>Dijkstra 算法</p>\n<ul>\n<li>单源最短路径算法（带权图、无权图）</li>\n<li>从初始状态开始，依次选取最近的有路径的顶点，每轮选出权值最小的即为最短，以选出的最短顶点为中间结点，寻找到达其他顶点的当前最短路径，然后进行下一轮，直到全部选完</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>不能用于负权值</li>\n</ul>\n<p>Floyd 算法</p>\n<ul>\n<li>多源最短路径算法（带权图、无权图）\n<ul>\n<li>若没有负权值，对每一个点使用 Dijkstra 算法，也可以得到相同的结果，时间复杂度也相同</li>\n</ul>\n</li>\n<li>从初始状态开始，依次选取最短顶点作为中转点，并求出最短路径</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^3) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>可以用于负权值，但不能出现负权回路</li>\n<li>注意：解答题需要写矩阵</li>\n</ul>\n<h3 id=\"有向无环图描述表达式\"><a class=\"anchor\" href=\"#有向无环图描述表达式\">#</a> 有向无环图描述表达式</h3>\n<p>有向无环图</p>\n<ul>\n<li>若一个有向图中不存在环，则是有向无环图，简称 DAG 图</li>\n</ul>\n<p>表达式应用</p>\n<ul>\n<li>有向无环图可以运用到表达式的表达上，用树表示表达式，将操作数共同的顶点部分删除并将边合并到一起，这就形成了图，从而能精简表达式</li>\n<li>顶点中不可能出现重复的操作数</li>\n<li>表达式树不唯一</li>\n</ul>\n<h3 id=\"拓扑排序\"><a class=\"anchor\" href=\"#拓扑排序\">#</a> 拓扑排序</h3>\n<p>AOV 网</p>\n<ul>\n<li>AOV 网：Activity On Vertex Network，建立在 DAG（有向无环图）上的网，用点表示活动，用弧表示活动优先级。弧是无权的。</li>\n</ul>\n<p>拓扑排序</p>\n<ul>\n<li>拓扑排序：依次选择入度为 0 的顶点，删除该点和以它为起点的边</li>\n<li>逆拓扑排序：选择出度为 0 的顶点，也可以用深度优先搜索实现</li>\n<li>时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n + m) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>若无法拓扑排序，则必定存在环</li>\n<li>即使有向无环图的拓扑序列唯一，也无法唯一确定该图</li>\n</ul>\n<h3 id=\"关键路径\"><a class=\"anchor\" href=\"#关键路径\">#</a> 关键路径</h3>\n<p>AOE 网</p>\n<ul>\n<li>AOE 网：Activity On Edge Network，建立在 DAG（有向无环图）上的网，用顶点表示事件、用带权弧表示活动（开销）</li>\n<li>只有在某顶点所代表的事件发生后，从该顶点出发的各有向边所代表的活动才能开始</li>\n<li>只有在进入某顶点的各有向边所代表的活动都已经结束时，该顶点所代表的事件才能发生，部分活动可以并行进行</li>\n</ul>\n<p>关键路径</p>\n<ul>\n<li>只有一个入度为 0 的顶点，即开始顶点（源点），表示整个工程的开始</li>\n<li>只有一个出度为 0 的顶点，称为结束顶点（汇点），表示整个工程的结束</li>\n<li>具有最大路径长度（路径各个活动所需时间之和）的路径为关键路径，上面的活动为关键活动</li>\n<li>最大路径长度就是完成整个工程所需的最短工期，只有加快关键活动进度才能缩短工期</li>\n</ul>\n<p>参量</p>\n<ul>\n<li>事件的最早发生时间：决定了所有从该事件开始的活动能够开工的最早时间\n<ul>\n<li>一个事件的最早发生时间 = 以该事件为始的弧的活动的最早开始时间</li>\n<li>从前往后计算</li>\n</ul>\n</li>\n<li>事件的最迟发生时间：在不推迟整个工程完成的前提下，该事件最迟必须发生的时间\n<ul>\n<li>一个事件的最迟发生时间 = min (以该事件为尾的弧的活动的最迟开始时间，最迟结束时间与该活动的持续时间的差)</li>\n<li>从后往前计算</li>\n</ul>\n</li>\n<li>活动的最早开始时间：指该活动弧的起点所表示的事件最早发生时间</li>\n<li>活动的最迟开始时间：指该活动弧的终点所表示的事件的最迟发生时间与该活动所需时间之差</li>\n<li>活动的时间余量：在不增加完成整个工程所需总时间的情况下，活动可以拖延的时间\n<ul>\n<li>时间余量 = 活动的最迟开始时间 - 活动的最早开始时间</li>\n</ul>\n</li>\n</ul>\n<p>求关键路径步骤</p>\n<ol>\n<li>事件的最早发生时间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>e</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">v_e \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>：根据拓扑序列，依次按照所有路径的最大值求出各个事件的最早发生时间（最长路径长度，交叉的顶点取最大值）</li>\n<li>事件的最迟发生时间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>l</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">v_l \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>：终点顶点处 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>l</mi></msub><mo>=</mo><msub><mi>v</mi><mi>e</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">v_l = v_e \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，根据逆拓扑序列，依次找到以当前顶点为起点的活动，将 活动的终点事件的最迟发生时间 减去 活动时间，得到当前顶点的最迟发生时间（交叉的顶点取最小值）</li>\n<li>各活动的最早发生时间 e = 起点事件的最早发生时间</li>\n<li>各活动的最迟发生时间 l = 终点事件的最迟发生时间 - 活动时间</li>\n<li>求所有活动的时间余量 d = l - e，余量为 0 的活动就是关键活动（也可以直接找 e = l 的活动）</li>\n</ol>\n<p>缩短工期</p>\n<ul>\n<li>关键活动时间增加，整个工程工期延长</li>\n<li>关键活动时间减少，整个工程工期缩短</li>\n<li>关键活动时间减少，可能变为非关键活动</li>\n<li>若有多条关键路径，则必须提高所有关键路径上的关键活动才能缩短工期</li>\n</ul>\n<h2 id=\"时间复杂度对比\"><a class=\"anchor\" href=\"#时间复杂度对比\">#</a> 时间复杂度对比</h2>\n<p><img data-src=\"21192521.jpg\" alt=\"img\" /></p>\n<h2 id=\"题目与总结-6\"><a class=\"anchor\" href=\"#题目与总结-6\">#</a> 题目与总结</h2>\n<p>求关键路径</p>\n<p><img data-src=\"21192522.jpg\" alt=\"img\" /></p>\n<p>计算各事件的最早发生时间和最迟发生时间</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>A</th>\n<th>B</th>\n<th>C</th>\n<th>D</th>\n<th>E</th>\n<th>F</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>e</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">v_e \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>0</td>\n<td>3</td>\n<td>2</td>\n<td>6</td>\n<td>6</td>\n<td>8</td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>l</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">v_l \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>0</td>\n<td>4</td>\n<td>2</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<p>计算各活动的最早发生时间和最迟发生时间</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n<th>e</th>\n<th>f</th>\n<th>g</th>\n<th>h</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">e \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>0</td>\n<td>0</td>\n<td>3</td>\n<td>3</td>\n<td>2</td>\n<td>2</td>\n<td>6</td>\n<td>6</td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">l \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>1</td>\n<td>0</td>\n<td>4</td>\n<td>4</td>\n<td>2</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n<p>关键活动为：b, e, g<br />\n 关键路径为：A, C, D, F</p>\n<h1 id=\"第七章-查找\"><a class=\"anchor\" href=\"#第七章-查找\">#</a> 第七章 查找</h1>\n<h2 id=\"查找的基本概念\"><a class=\"anchor\" href=\"#查找的基本概念\">#</a> 查找的基本概念</h2>\n<ul>\n<li>查找：在数据集合中寻找满足某种条件的数据元素的过程</li>\n<li>查找表（查找结构）：用于查找的数据集合，由同一类型的数据元素或记录组成</li>\n<li>关键字：数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该唯一</li>\n<li>静态查找表：只查找符合条件的数据元素\n<ul>\n<li>顺序查找、折半查找、分块查找、散列查找</li>\n</ul>\n</li>\n<li>动态查找表：不仅要查找，还要进行插入和删除；不仅要考虑查找速度，还要考虑插入和删除操作是否方便\n<ul>\n<li>二叉排序树、平衡二叉树、红黑树、B 树、B + 树、散列</li>\n</ul>\n</li>\n<li>查找长度：查找运算中，需要对比关键字的次数</li>\n<li>平均查找长度 ASL：所有查找过程中进行关键字比较次数的平均值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">ASL = \\sum_{i=1}^n P_i C_i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">P_i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 表示查找第 i 个元素的概率（一般情况下认为概率相等），<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">C_i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 表示查找第 i 个元素的查找长度</li>\n<li>最多比较次数：查找失败时的比较次数</li>\n</ul>\n<h2 id=\"顺序查找-折半查找-分块查找\"><a class=\"anchor\" href=\"#顺序查找-折半查找-分块查找\">#</a> 顺序查找、折半查找、分块查找</h2>\n<h3 id=\"顺序查找\"><a class=\"anchor\" href=\"#顺序查找\">#</a> 顺序查找</h3>\n<ul>\n<li>又称为线性查找，常用于线性表，从头到尾逐个查找</li>\n<li>无序表的平均查找长度：ASL 查找成功为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi></mrow><mi>n</mi></mfrac></mstyle><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{1+2+3+\\cdots+n}{n}=\\dfrac{n+1}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，ASL 查找失败为 n+1\n<ul>\n<li>哨兵查找：A [0] 不存放元素，而是存放查找目标，遍历元素是从 A [n] 到 A [1]，一共 n 个，查找失败时，会遍历到 A [0]，一共 n+1 个</li>\n<li>正常查找：A [0] 存放元素，从 A [0] 到 A [n-1] 遍历，查找成功时，直接 return 或 break 打断循环，查找失败时，完成一轮遍历，一共 n 个</li>\n</ul>\n</li>\n<li>有序表可以减少平均查找长度：ASL 查找失败为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>+</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mstyle><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo>+</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{1+2+3+\\cdots+n+n}{n+1}=\\dfrac{n}{2}+\\dfrac{n}{n+1} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.8768900000000002em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>对于顺序查找，无论无序表还是有序表，查找成功的时间都是相同的</li>\n<li>时间复杂度 O (n)</li>\n</ul>\n<h3 id=\"折半查找\"><a class=\"anchor\" href=\"#折半查找\">#</a> 折半查找</h3>\n<p>折半查找</p>\n<ul>\n<li>也称为二分查找，只适用于有序的顺序表</li>\n<li>中间元素 = (left + right) / 2\n<ul>\n<li>注意：left 和 right 都是数组索引，数组的第一个元素是 A [0]</li>\n</ul>\n</li>\n<li>ASL 查找成功为（近似值） <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\log_2n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，ASL 查找失败为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo>+</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\log_2n + 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>查找成功的 ASL（准确值）：画出折半查找判定树，设第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">k \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 层结点数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>m</mi><mi>k</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">m_k \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，总结点数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mn>1</mn><mi>n</mi></mfrac></mstyle><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></msubsup><mrow><mi>i</mi><mspace width=\"0.1em\"/><msub><mi>m</mi><mi>i</mi></msub></mrow><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">ASL = \\dfrac{1}{n} \\sum_{i=1}^k{i \\kern 1pt m_i} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9890079999999999em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>画完判定树后要检查一遍，看看有没有缺少的</li>\n</ul>\n</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n<p>折半查找判定树</p>\n<ul>\n<li>折半查找的过程可用二叉树来描述，称为判定树</li>\n<li>树高为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lceil\\log_2(n+1)\\rceil \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>树的高度就是最大比较次数</li>\n<li>取中间数时向下取整：左子树元素个数等于右子树元素个数 或 左子树元素个数比右子树元素个数少一个</li>\n<li>取中间数时向上取整：左子树元素个数等于右子树元素个数 或 左子树元素个数比右子树元素个数多一个</li>\n<li>折半查找判定树一定是一个平衡二叉树</li>\n<li>折半查找判定树也是一个二叉排序树</li>\n</ul>\n<p>折半查找判定树与二叉排序树</p>\n<ul>\n<li>都是同样的二叉逻辑结构</li>\n<li>折半查找判定树是已知完整序列，所以总是从中间开始，时间性能为固定的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>二叉排序树的构造是根据输入来的，如果输入的序列正好是从中间切分的，则时间性能为最好的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，如果输入的序列恰好有序，则为单枝树，时间性能为最坏的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n<p>折半查找的代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 折半查找函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">BinarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> compareCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组的左边界</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组的右边界</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    compareCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化比较次数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        compareCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次循环即为一次比较</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算中间位置</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 输出当前比较的元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"比较第 \"</span> <span class=\"token operator\">&lt;&lt;</span> compareCount <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 次: arr[\"</span> <span class=\"token operator\">&lt;&lt;</span> mid <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 检查中间元素是否为目标值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找到目标，返回其索引</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 如果目标值大于中间值，则目标在右半部分</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 如果目标值小于中间值，则目标在左半部分</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 未找到目标值，返回 - 1</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BinarySearch_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span> compareCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        target <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        compareCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 调用折半查找，记录比较次数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token function\">BinarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> compareCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        max <span class=\"token operator\">+=</span> compareCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"目标值在：arr[\"</span> <span class=\"token operator\">&lt;&lt;</span> result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"未找到目标值\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 输出比较次数</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"比较次数: \"</span> <span class=\"token operator\">&lt;&lt;</span> compareCount <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 计算平均查找长度：比较次数除以查找过程中考虑的元素数量</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"平均查找长度: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>compareCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> length <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"总比较次数: \"</span> <span class=\"token operator\">&lt;&lt;</span> max <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"总平均查找长度: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> length <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分块查找\"><a class=\"anchor\" href=\"#分块查找\">#</a> 分块查找</h3>\n<ul>\n<li>分块查找又称为索引顺序查找，需要对数据进行一定的排序，不一定全部是顺序的，但是要求在一个区间内满足一定条件，即块内无序，块间有序。即 n 块内的元素全部小于 n+1 块内的任意元素</li>\n<li>建立索引表，存储每个块内最大的元素，有序排列</li>\n<li>一般情况下，将 n 个元素分为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个块，每个块包含 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个元素。在这种情况下的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt{n}) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n<h2 id=\"树形查找\"><a class=\"anchor\" href=\"#树形查找\">#</a> 树形查找</h2>\n<h3 id=\"二叉排序树-2\"><a class=\"anchor\" href=\"#二叉排序树-2\">#</a> 二叉排序树</h3>\n<p>二叉排序树（BST）</p>\n<ul>\n<li>又称为：二叉查找树、二叉查找判定树、二叉搜索树</li>\n<li>左子树上所有结点的关键字均小于根结点的关键字，右子树上所有结点的关键字均大于根结点的关键字，左右子树又各是一棵二叉排序树</li>\n<li>中序遍历二叉排序树会得到一个递增的有序序列</li>\n<li>单次查找的最多比较次数 = 树高</li>\n<li>最好情况下（完全二叉树）的平均查找长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，最坏情况是每个结点只有一个分支，平均查找长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>时间复杂度\n<ul>\n<li>遍历查找：最好情况 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，最坏情况 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>递归查找效率低</li>\n</ul>\n</li>\n</ul>\n<p>二叉排序树的构造</p>\n<ul>\n<li>插入\n<ul>\n<li>若原二叉排序树为空，就直接插入结点</li>\n<li>若关键字小于根结点值，插入左结点树</li>\n<li>若关键字大于根结点值，插入右结点树</li>\n</ul>\n</li>\n<li>删除\n<ul>\n<li>搜索到对应值的目标结点</li>\n<li>若被删除结点是叶子结点，则直接删除</li>\n<li>若被删除结点只有一棵左子树或右子树，则让该结点的子树称为该结点父结点的子树，来代替其的位置</li>\n<li>若被删除结点有左子树和右子树，则让其结点的直接后继（中序排序该结点后一个结点，其右子树的最左下角结点，不一定是叶子结点）或直接前驱（中序排序该结点前一个结点，其左子树的最右下角结点，不一定是叶子结点）替代该结点，并从树中删除该的结点直接后继、直接前驱，这就变成了第一种或第二种情况</li>\n</ul>\n</li>\n<li>二叉排序树删除或插入时得到的二叉排序树往往与原来的不同</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a class=\"anchor\" href=\"#平衡二叉树\">#</a> 平衡二叉树</h3>\n<p>平衡二叉树（AVL 树）</p>\n<ul>\n<li>为了防止树高增长过快，降低二叉排序树的性能，规定插入时要保证平衡</li>\n<li>树上任意一结点的左子树和右子树的高度之差不超过 1</li>\n<li>结点的平衡因子 = 左子树高 - 右子树高</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n<p>平衡二叉树与二叉排序树</p>\n<ul>\n<li>平衡二叉树仅为满足高度平衡的二叉树，虽然在一般情况下默认为二叉排序树，但实际上不一定是二叉排序树</li>\n<li>需要根据题目分辨，例如 2015 年统考中，题目描述为：... 平衡二叉树的中序遍历得到一个降序序列...（但是，二叉排序树的中序遍历的结果是升序序列）。然而，在其他的题目中，又默认平衡二叉树是二叉排序树</li>\n</ul>\n<p>平衡二叉树结点</p>\n<ul>\n<li>h 为平衡二叉树高度，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mi>h</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">n_h \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 为构造此高度的平衡二叉树所需的最少结点数</li>\n<li>平衡二叉树最少结点数（此时所有非叶结点的平衡因子均为 1）的递推公式为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><msub><mi>n</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><mo separator=\"true\">,</mo><msub><mi>n</mi><mi>h</mi></msub><mo>=</mo><mn>1</mn><mo>+</mo><msub><mi>n</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>n</mi><mrow><mi>h</mi><mo>−</mo><mn>2</mn></mrow></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">n_0 = 0, n_1 = 1, n_2 = 2, n_h = 1 + n_{h-1} + n_{h-2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>平衡二叉树最多结点数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^n - 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，该二叉树为满二叉树</li>\n<li>关键字按有序顺序插入空的平衡二叉树，若结点数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">n = 2^k - 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，则平衡二叉树一定是满二叉树</li>\n</ul>\n<p>平衡二叉树插入</p>\n<ul>\n<li>在插入一个结点时，查找路径上的所有结点都可能收到影响</li>\n<li>从插入点往回（从下往上）找到第一个不平衡的结点，根据二叉排序树的大小关系算出从大到小的序列，然后把最中间的作为新根，向两侧作为左右子树</li>\n<li>每次调整的对象都是最小不平衡树</li>\n</ul>\n<p>平衡二叉树删除</p>\n<ul>\n<li>与插入操作类似，都是需要从下往上进行调整。不同的是插入操作只对子树进行调整，而删除操作可能要对整个树进行调整</li>\n</ul>\n<p>旋转</p>\n<ul>\n<li>LL（右单旋转）：从结点的左孩子的左子树中插入导致不平衡</li>\n<li>RR（左单旋转）：从结点的右孩子的右子树中插入导致不平衡</li>\n<li>LR（先左后右双旋转）：从结点的左孩子的右子树中插入导致不平衡</li>\n<li>RL（先右后左双旋转）：从结点的右孩子的左子树中插入导致不平衡</li>\n</ul>\n<p>一般情况下不会考平衡二叉树的代码题。为了保证手算与机算相同，可以测试一下代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义结构体</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义数据域 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义高度 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左孩子 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右孩子 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 获取结点高度</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> node <span class=\"token operator\">?</span> node<span class=\"token operator\">-></span>height <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断 node 是否为空，为空返回 0, 不为空返回高度 </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 取最大值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//RR 平衡旋转 (向左旋转一次)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//node: 代表该结点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//root: 代表父结点结点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rrRotation</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右孩子保存给中间指针 </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    node<span class=\"token operator\">-></span>rchild <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//node 的左孩子赋值给 node 的右孩子 </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    temp<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">//node 代替 node 的左孩子 </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    node<span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大值加一 </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    temp<span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//LL 平衡旋转 (向右旋转一次)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//node: 代表该结点</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//root: 代表父结点结点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">llRotation</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    node<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    temp<span class=\"token operator\">-></span>rchild <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    node<span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    temp<span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 建立平衡二叉树</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">//**T: 双重解引用，用于更改 T 中的值</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">//data: 用于传递元素并比较大小</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">avlInsert</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 首先判断该结点是否为空，是空结点则新建结点并初始化</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token operator\">*</span>T <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申请内存空间 </span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 高度初始化为 0 </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左孩子初始为空</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右孩子初始为空 </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">//data 小于当前结点值 </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">avlInsert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要插入的元素比结点内的元素小，则往左子树走</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 拿到当前左右子树的高度 </span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> lHeight <span class=\"token operator\">=</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">int</span> rHeight <span class=\"token operator\">=</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lHeight <span class=\"token operator\">-</span> rHeight <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断二叉树是否失衡 </span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">// 判断高度差 </span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 要插入的元素小于当前结点左孩子的元素 </span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token comment\">//LL 型  </span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token function\">llRotation</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右旋一次    </span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token comment\">//LR 型 </span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token function\">rrRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先左旋 </span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token function\">llRotation</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后右旋 </span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">//data 大于当前结点值 </span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token function\">avlInsert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要插入的元素比结点内的元素大，则往右子树走</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">// 拿到当前左右子树的高度         </span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">int</span> lHeight <span class=\"token operator\">=</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">int</span> rHeight <span class=\"token operator\">=</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rHeight <span class=\"token operator\">-</span> lHeight <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断二叉树是否失衡 </span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">// 判断高度差 </span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token comment\">//RR 型 </span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token function\">rrRotation</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左旋一次 </span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token comment\">//RL 型 </span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token function\">llRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先右旋 </span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token function\">rrRotation</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后左旋 </span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> T<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出根结点</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归遍历左子树</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归遍历右子树</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">balanceTree_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> T <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始树根结点 </span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">int</span> nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token function\">avlInsert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 构造平衡二叉树</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"散列\"><a class=\"anchor\" href=\"#散列\">#</a> 散列</h2>\n<p>散列的基本概念</p>\n<ul>\n<li>散列表又称哈希表，是一种数据结构，数据元素的关键字与其存储地址直接相关。一个散列结构是一块地址连续的存储空间</li>\n<li>散列函数：把关键字映射成该关键字对应的地址的函数，记为 Hash (key) = Addr （Addr 可以使数组下标、索引或内存地址）</li>\n<li>同义词：被映射到同一地址的不同关键字互为同义词，这种现象为冲突\n<ul>\n<li>冲突的处理方法：开放定址法、链地址法、公共溢出区法</li>\n<li>冲突现象提供了一个解题思路：去除重复元素</li>\n</ul>\n</li>\n</ul>\n<p>散列函数的构造</p>\n<ul>\n<li>直接定址法：H (k) = ak + b\n<ul>\n<li>实现简单，不会冲突，适合关键字基本连续的情况，若不连续，会有很多空位</li>\n</ul>\n</li>\n<li>除留余数法：H (k) = k % p\n<ul>\n<li>p 为小于等于地址范围的素数</li>\n<li>可能冲突，取决于 p 的选取</li>\n</ul>\n</li>\n<li>数字分析法：分析关键字的各个位的构成，截取其中若干位作为散列函数值，尽可能使关键字具有大的敏感度，即最能进行区分的关键字位，这些位数都是连续的\n<ul>\n<li>适用于已知的关键字集合</li>\n</ul>\n</li>\n<li>平方取中法：先求关键字的平方值，然后在平方值中取中间几位为散列函数的值\n<ul>\n<li>适用于关键字的每位取值都不够均匀或均小于散列地址所需的位数</li>\n</ul>\n</li>\n<li>其他：叠加法、基数转换法、随机数法</li>\n</ul>\n<p>冲突的处理：开放定址法</p>\n<ul>\n<li>开放定址法：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>m</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">H_i = (H(key) + d_i) \\% m \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 次冲突的时候，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">H(key) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 偏移了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">d_i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 位</li>\n<li>线性探测法：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mi>i</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">d_i = i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，即顺序查找下一空闲单元\n<ul>\n<li>这种方法容易造成元素的聚集（堆积），从而降低查找效率</li>\n</ul>\n</li>\n<li>平方探测法：又称二次探测法，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><msup><mn>1</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>−</mo><msup><mn>1</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>−</mo><msup><mn>2</mn><mn>2</mn></msup><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>m</mi><mn>2</mn></mfrac></mstyle><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>m</mi><mn>2</mn></mfrac></mstyle><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">d_i = 1^2, -1^2, 2^2, -2^2 \\cdots, (\\dfrac{m}{2})^2, -(\\dfrac{m}{2})^2 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>对比线性探测法更不容易产生聚集问题</li>\n<li>不能探测到散列表上的所有元素，但至少能探测一半</li>\n<li>注意：散列表长度 m 必须是一个可以表示为 4k+3 的素数才能探测到所有位置</li>\n</ul>\n</li>\n<li>双散列法：又称再散列法，有多个散列函数，它的具体散列函数形式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>i</mi><mo>×</mo><mi>H</mi><mi>a</mi><mi>s</mi><msub><mi>h</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>m</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">H_i = (H(key) + i \\times Hash_2(key)) \\% m \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>伪随机探测法：定义 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">d_i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 是一个伪随机数</li>\n<li>在开放定址的情形下，删除元素时应该做一个删除标记，进行逻辑删除，不能随便物理删除表中的已有元素\n<ul>\n<li>因为若删除元素，则会截断其他具有相同散列地址的元素的查找地址。因此，要删除一个元素时，可给它做一个删除标记，进行逻辑删除。但这样做的副作用是：执行多次删除后，表面上看起来散列表很满，实际上有许多位置未利用，因此需要定期维护散列表，要把删除标记的元素物理删除</li>\n</ul>\n</li>\n</ul>\n<p>冲突的处理：链地址法</p>\n<ul>\n<li>类似于邻接表的基本思想，将所有同义词存储到同一条链表中，这种方法适合于冲突比较严重的情况</li>\n<li>注意：数组中存的是指针，指针指向冲突的结点</li>\n</ul>\n<p>冲突的处理：公共溢出区法</p>\n<ul>\n<li>为所有冲突的关键字记录建立一个公共的溢出区来存放。在查找时，对给定关键字通过散列函数计算出散列地址后，先与基本表的相应位置进行比对，如果相等，则查找成功；如果不相等，则到溢出表进行顺序查找</li>\n<li>相对于基本表而言，如果有冲突的数据很少，公共溢出区法的查找性能还是非常高的</li>\n</ul>\n<p>散列查找及性能分析</p>\n<ul>\n<li>若散列函数设计得足够好，散列查找时间复杂度可以达到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，即不存在冲突</li>\n<li>散列表的查找效率取决于三个因素：散列函数、处理冲突的方法、装填因子</li>\n<li>平均查找长度只依赖于装填因子\n<ul>\n<li>开放定址法的平均查找长度高于链地址法</li>\n</ul>\n</li>\n<li>装填因子\n<ul>\n<li>又称负载因子</li>\n<li>装填因子 = 表中记录数 / 散列表长度</li>\n<li>装填因子代表一个散列表中的满余情况，越大则查找效率越低</li>\n<li>若只给出了装填因子 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\alpha \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，则此时平均查找长度为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mfrac></mstyle><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">ASL = \\dfrac{1}{2} (1 + \\dfrac{1}{1 - \\alpha}) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n</li>\n<li>某元素的搜索次数 = 冲突次数 + 1</li>\n</ul>\n<p>创建哈希表的代码（线性探测法）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 哈希函数：除留余数法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> divisor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 线性探测法构造哈希表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">constructHashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 初始化哈希表，大小为被除数 divisor，初始值为 -1 表示空位</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">hashTable</span><span class=\"token punctuation\">(</span>divisor<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> hashIndex <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 线性探测，寻找空位</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>hashTable<span class=\"token punctuation\">[</span>hashIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            hashIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> divisor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 处理冲突</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        hashTable<span class=\"token punctuation\">[</span>hashIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> hashTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 输入数组</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> divisor <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 被除数，也就是哈希表的大小</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 构造哈希表</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> hashTable <span class=\"token operator\">=</span> <span class=\"token function\">constructHashTable</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 输出哈希表</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hashTable<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hashTable[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> hashTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"复杂度对比\"><a class=\"anchor\" href=\"#复杂度对比\">#</a> 复杂度对比</h2>\n<table>\n<thead>\n<tr>\n<th>查找方法</th>\n<th>时间复杂度</th>\n<th>空间复杂度</th>\n<th>适合元素数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>顺序查找</td>\n<td>O(n)</td>\n<td>O(1)</td>\n<td>小型或无序数据</td>\n</tr>\n<tr>\n<td>折半查找</td>\n<td>O(log n)</td>\n<td>O(1)</td>\n<td>有序数据</td>\n</tr>\n<tr>\n<td>分块查找</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt{n}) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>O(n)</td>\n<td>较大数据集，块大小适中</td>\n</tr>\n<tr>\n<td>二叉排序树</td>\n<td>一般 O (log n)，最坏 O (n)</td>\n<td>O(n)</td>\n<td>动态数据，插入 / 删除频繁</td>\n</tr>\n<tr>\n<td>平衡二叉树</td>\n<td>O(log n)</td>\n<td>O(n)</td>\n<td>动态数据，插入 / 删除 / 查找均衡</td>\n</tr>\n<tr>\n<td>散列查找</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td>大量数据，需要快速查找</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"题目与总结-7\"><a class=\"anchor\" href=\"#题目与总结-7\">#</a> 题目与总结</h2>\n<p>在任意一棵非空二叉排序树 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 中，删除某结点 v 之后形成二叉排序树 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_2 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，再将 v 插入 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>2</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_2 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，形成二叉排序树 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>3</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_3 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></p>\n<ul>\n<li>若 v 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 的叶结点，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>3</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_3 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 相同</li>\n<li>若 v 不是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 的叶结点，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>3</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_3 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 不一定相同</li>\n<li>若将题目中的 “二叉排序树” 更改为 “平衡二叉树”，则不论 v 是不是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 的叶结点，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>3</mn></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">T_3 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 可能相同也可能不同</li>\n</ul>\n<p>【王道 7.4 选择第 18 题】【2019 408 真题】现有长度为 11 且初始为空的散列表 HT，散列函数是 H (key) = key % 7，采用线性探查法解决冲突，将关键字序列 87, 40, 30, 6, 11, 22, 98, 20 依次插入 HT 后，HT 查找失败的平均查找长度是？</p>\n<p>首先构造散列表：</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>98</td>\n<td>22</td>\n<td>30</td>\n<td>87</td>\n<td>11</td>\n<td>40</td>\n<td>6</td>\n<td>20</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>查找失败的平均查找长度</p>\n<ul>\n<li>哈希值范围为 0 ~ 6，故查找失败对应的地址有 7 个</li>\n<li>关键字序列哈希后对应的散列地址分别为 0 ~ 7；故对于需要查找的对应地址为 0 的关键字，需要从 0 到 8 依次查找一次，共计 9 次；地址为 1 的关键字，需要从 1 到 8 查找 8 次，以此类推，所以 ASL = (9 + 8 + ... + 3) / 7 = 6</li>\n<li>注意：有些题目的数据存储位置是间断的，只要散列（或再散列）遇到空的位置就算查询失败</li>\n<li>注意：对于开放定址法，如果查找位置有删除标记（逻辑删除），应该继续往后查找</li>\n<li>注意：如果散列表是满的，则每次查找失败的长度都等于表长</li>\n</ul>\n<p>查找成功的平均查找长度</p>\n<ul>\n<li>计算成功的长度，就是记录下每个数值比较了几次找到可存储的空间</li>\n<li>其中除了 20，前六个都是正好在对应的位置上，最后一个 20 本来应该在 6 位置上，因为冲突所以放在了 7 上，所以一共要对比 1 + 1 + 1 + 1 + 1 + 1 + 1 + 2 = 9 次</li>\n<li>由于一共 8 个数据，所以总的要比较 8 次，所以 ASL = 9 / 8 = 1.125</li>\n</ul>\n<h1 id=\"第八章-内排序\"><a class=\"anchor\" href=\"#第八章-内排序\">#</a> 第八章 内排序</h1>\n<h2 id=\"排序的基本概念\"><a class=\"anchor\" href=\"#排序的基本概念\">#</a> 排序的基本概念</h2>\n<ul>\n<li>排序：将一个数据元素的任意序列重新排列成一个按关键字有序的序列</li>\n<li>内部排序：待排序的记录存放在计算机的内存中所进行的排序操作称为内部排序</li>\n<li>外部排序：待排序的记录数量很大，以致内存一次不能容纳全部记录，在排序过程中需要访问外存的排序过程称为外部排序</li>\n<li>稳定性：对于相等的两个元素，如果排序后先后顺序依旧不变，则该排序算法是稳定的。（对于不稳定的排序算法，只需要给出一组实例，说明它是不稳定的即可）</li>\n<li>大部分排序算法都仅适用于顺序存储的线性表</li>\n<li>对于基于比较的排序，求至少的比较次数，就是在求最坏情况下的比较次数</li>\n<li>对于 n 个关键字的序列，排序时至少需要比较 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lceil\\log_2(n!)\\rceil \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 次\n<ul>\n<li>每次比较两个关键字后，仅出现两种可能的转移。假设整个排序过程至少需要做 t 次比较。则显然会有 2^t 种情况。由于 n 个记录共有 n! 种不同的排列，因而必须有 n! 种不同的比较路径，于是有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>t</mi></msup><mo>⩾</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">2^t \\geqslant n! \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.930226em;vertical-align:-0.13667em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩾</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h2>\n<ul>\n<li>插入排序的排序序列分为未排序序列和已排序序列</li>\n<li>插入排序就是将选定的目标值插入到对应的位置，然后不断增长已排序序列并缩减未排序序列的过程</li>\n<li>每一趟排序都不能保证有一个元素到达最终的位置上</li>\n</ul>\n<h3 id=\"直接插入排序\"><a class=\"anchor\" href=\"#直接插入排序\">#</a> 直接插入排序</h3>\n<ul>\n<li>从第 i 位开始，每次循环将第 1 到 i - 1 位视作已排序部分，第 i 到 n 位为未排序部分，将第 i 位的元素从后向前逐个对比，并插入到合适的位置，以此类推，共需要循环 n - 1 次</li>\n<li>在待排序的元素序列基本有序的前提下，直接插入排序效率最高的</li>\n<li>直接插入排序进行 n 躺后能保证前 n + 1 个元素是有序的，但是不能保证其都在最终的位置上</li>\n<li>适用于顺序存储的线性表和链表</li>\n<li>最坏情况下的比较次数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{n(n-1)}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>使用链表实现直接插入排序，移动元素的次数变少了，但是时间复杂度和空间复杂度都不变</li>\n</ul>\n</li>\n<li>直接插入排序算法是稳定的</li>\n</ul>\n<h3 id=\"折半插入排序\"><a class=\"anchor\" href=\"#折半插入排序\">#</a> 折半插入排序</h3>\n<ul>\n<li>又称二分插入排序，对直接插入排序的优化，在寻找插入位置时使用二分查找的方式</li>\n<li>保证算法的稳定性，折半的中间位置向上取整（在 mid 所指位置的右边寻找插入位置）</li>\n<li>仅适用于顺序存储的线性表</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>比较关键字的次数减少为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，但是移动元素的次数没变</li>\n</ul>\n</li>\n<li>折半插入排序算法是稳定的</li>\n</ul>\n<h3 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h3>\n<ul>\n<li>希尔（Shell）排序又称缩小增量排序。设当前元素的索引为 b、排序趟数为 i、增量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">d_i \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo>+</mo><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo>+</mo><mn>2</mn><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mo>⋯</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo>+</mo><mi>k</mi><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">a[b], a[b + d_i], a[b + 2d_i], \\cdots a[b + k d_i] \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 分到一组中，每组内部进行插入排序，然后缩小增量重复上述过程，直到增量为 1</li>\n<li>增量序列的选择建议：第一段排序间距为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">d_1 = \\dfrac{n}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，递推公式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><msub><mi>d</mi><mi>i</mi></msub><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">d_{i+1} = \\dfrac{d_i}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，最后一段等于 1</li>\n<li>对于每一次排序的结果，序列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo>+</mo><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo>+</mo><mn>2</mn><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mo>⋯</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>b</mi><mo>+</mo><mi>k</mi><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">a[b], a[b + d_i], a[b + 2d_i], \\cdots a[b + k d_i] \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 是有序的</li>\n<li>希尔排序在最后一趟前都不能保证元素在最后的位置上</li>\n<li>希尔排序在最后一趟前都不能保证元素是有序的</li>\n<li>仅适用于顺序存储的线性表</li>\n<li>时间复杂度和增量序列的选择有关，目前如何获得最优时间复杂度仍是未解决的问题。最坏时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，在某个范围内可以达到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>1.3</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^{1.3}) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>希尔排序算法是不稳定的</li>\n</ul>\n<h2 id=\"交换排序\"><a class=\"anchor\" href=\"#交换排序\">#</a> 交换排序</h2>\n<ul>\n<li>交换排序根据序列中两个元素关键的比较结构然后交换这两个记录在序列中的位置</li>\n<li>n 趟排序后就有 n 个元素到达最终的位置上</li>\n</ul>\n<h3 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<p>冒泡排序（起泡排序）</p>\n<ul>\n<li>从第 1 位开始扫描，检查相邻的两个元素，如果前一个元素大于后一个元素，则交换两个元素的位置，一直扫描到第 n 位。扫描完后，能且仅能确定第 n 个元素为整个序列的最大值，则下一轮扫描为从第 1 位到第 n - 1 位，并确定第 n - 1 位为倒数第二大元素，以此类推</li>\n<li>注意：冒泡排序可以提前终止，对于 n 个元素的数据，不一定是 n - 1 趟完成排序，要具体分析，从前向后（大的放后面） 与 从后向前（小的放前面） 的排序趟数可能不同</li>\n<li>适用于顺序存储的线性表和链表</li>\n<li>比较次数和交换次数都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{n(n-1)}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，移动次数是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mn>3</mn><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{3n(n-1)}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>冒泡排序是稳定的</li>\n</ul>\n<p>冒泡排序代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 交换元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 位运算交换元素（更高效）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">//if (arr[j] > arr[j + 1])</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">//    arr[j] = arr[j] ^ arr[j + 1];</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//    arr[j + 1] = arr[j] ^ arr[j + 1];</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">//    arr[j] = arr[j] ^ arr[j + 1];</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>冒泡排序优化</p>\n<ul>\n<li>对于每行冒泡进行优化：如果发现排序前几轮就已经实现了排序成功，那么后面的排序岂不是都浪费了时间进行比较？\n<ul>\n<li>可以在第一轮循环中设置一个布尔值为 false，如果在这一轮发生排序交换就设置为 true，如果一轮结束后发现这个值还是 false，说明这一轮没有进行交换，表示已经排序成功，就直接所有退出循环</li>\n</ul>\n</li>\n<li>对于每列冒泡进行优化：默认每一轮冒泡是从 length-i 结束，例如一共 5 个元素排序，需要 4 轮排序，第二轮冒泡排序应该从 0 开始，到 3 结束，因为最后一个元素 4 已经在第一轮排序成功。但是如果在第二轮发现 2、3 已经排序成功了不需要交换，那么默认排序方法第三轮还是要从 0 到 2 进行排序，还要比较一次 1 和 2 位置的数据，这就造成了浪费，那么如何解决？\n<ul>\n<li>记录每一轮发生比较的元素的最大索引值，下一轮比较到这个索引值直接结束，不需要继续比较后面的元素。如果最大索引值为 0 则直接退出。这就进一步优化了上面一种策略。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<p>快速排序</p>\n<ul>\n<li>简称快排，在序列中取一个元素 pivot 作为枢轴（又称基准数，通常取首元素），把基准数一开始就单独列出并空缺出一个位置，左右指针分别指向最左边和最右边，左右指针依次向中间移动，依次找大于和小于基准数的数并将其移动到空缺位，直到两个指针重叠，将基准数填入即可，此时第一轮比对完成，第一轮的基准数将序列分为左右两部分，对这两部分分别进行上述过程，依次递归</li>\n<li>快速排序会将所有元素组织成为二叉树，二叉树的层数就是递归调用的层数。所以对于 n 个结点的二叉树，最小高度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\log_2n\\rfloor + 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，最大高度为 n</li>\n<li>如果初始序列是基本有序的，则快速排序性能最差（速度最慢）。若每一次选中的基准能均匀划分，尽量让数轴元素平分，则效率最高（速度最快）。性能与分区处理顺序无关</li>\n<li>仅适用于顺序存储的线性表</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>快速排序算法是不稳定的</li>\n</ul>\n<p>快速排序特性</p>\n<ul>\n<li>快速排序在内部排序中的表现最好。平均性能最优</li>\n<li>快速排序不产生有序子序列</li>\n<li>枢轴元素到达的位置是不确定的，但是每次都会到其最终的位置上。第 n 趟有 n 个元素到最终位置上</li>\n<li>求快速排序趟数就是找到符合这种性质的元素个数</li>\n<li>对于基本有序或倒序的序列，快速排序速度最慢</li>\n<li>对于每次的数轴元素能尽量将表分为长度相同的子表，快速排序速度最快</li>\n<li>排序的递归次数与初始序列和选择的枢轴变量有关，与分区处理顺序无关</li>\n</ul>\n<p>在某些算法中，先排序后遍历可以提高效率。<br />\n快速排序作为处理数组排序问题的最佳方法，要理解并能手写下来。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>ElemType A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 递归跳出的条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//Partition () 就是划分操作，将表 A [low-high] 划分为满足上述条件的两个子表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> pivotpos <span class=\"token operator\">=</span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 划分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> pivotpos <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依次对两个子表进行递归排序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">QuickSort</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> pivotpos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 一趟划分</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Partition</span><span class=\"token punctuation\">(</span>ElemType A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  ElemType pivot <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前表中第一个元素设为枢轴，对表进行划分</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 循环跳出条件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> pivot<span class=\"token punctuation\">)</span> high<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将比枢轴小的元素移动到左端</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> pivot<span class=\"token punctuation\">)</span> low<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    A<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将比枢轴大的元素移动到右端</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  A<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 枢轴元素存放到最终位置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回存放枢轴的最终位置</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>任意目标，单次快排</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort_once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 初始条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> target<span class=\"token punctuation\">)</span> high<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">)</span> low<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h2>\n<p>选择排序</p>\n<ul>\n<li>分为已排序和未排序序列。选择排序就是每一趟在待排序元素中选取关键字最小或最大的元素加入有序子序列</li>\n<li>选择排序算法的比较次数始终为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{n(n-1)}{2} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，与序列状态无关</li>\n</ul>\n<p>选择排序与其他排序的区别</p>\n<ul>\n<li>选择排序也需要交换，但是与交换排序的不断交换不同的是选择排序时选择出一个最后进行交换，一趟只交换一次</li>\n<li>选择排序也需要插入，且也分为已排序和未排序序列，但是插入排序不需要选择，且元素移动方式是插入而不是交换</li>\n</ul>\n<h3 id=\"简单选择排序\"><a class=\"anchor\" href=\"#简单选择排序\">#</a> 简单选择排序</h3>\n<ul>\n<li>每次从第 i 个数到第 n 个数中找到最小的元素，将这个元素和第 i 个位置上的元素交换</li>\n<li>适用于顺序存储的线性表和链表</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>简单选择排序是不稳定的</li>\n</ul>\n<p>单链表的简单选择排序</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SelectSort</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Node<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Node<span class=\"token operator\">*</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Node<span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        temp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        min <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;</span> min<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                min <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        data <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        p<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> min<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        min<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h3>\n<p>堆的定义</p>\n<ul>\n<li>有 n 个关键字的序列 L，只要满足下面某一条性质，就是堆\n<ul>\n<li>若满足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>⩾</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>i</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">L(i) \\geqslant L(2i) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩾</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>⩾</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">L(i) \\geqslant L(2i+1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩾</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>⩽</mo><mi>i</mi><mo>⩽</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">(1 \\leqslant i \\leqslant \\dfrac{n}{2}) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79619em;vertical-align:-0.13667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 则是大根堆或大顶堆（根结点是最大元素）</li>\n<li>若满足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>⩽</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>i</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">L(i) \\leqslant L(2i) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>⩽</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">L(i) \\leqslant L(2i+1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>⩽</mo><mi>i</mi><mo>⩽</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">(1 \\leqslant i \\leqslant \\dfrac{n}{2}) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79619em;vertical-align:-0.13667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⩽</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 则是小根堆或小顶堆（根结点是最小元素）</li>\n</ul>\n</li>\n<li>堆就是顺序存储的完全二叉树</li>\n<li>堆的叶子结点范围是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn><mo>∼</mo><mi>n</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\log_2n\\rfloor + 1 \\sim n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>根到任一结点的路径都是有序的</li>\n</ul>\n<p>堆排序</p>\n<ul>\n<li>先按照层次遍历顺序创建二叉树，然后按照筛选法，找到第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mo>−</mo><mi>i</mi><mspace width=\"0.4em\"/><mo stretchy=\"false\">(</mo><mi>i</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\dfrac{n}{2}\\rfloor - i \\kern 4pt (i = 0, 1, \\cdots \\lfloor\\dfrac{n}{2}\\rfloor) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.4em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 个结点（从 1 开始数），若它的左右结点不符合堆的定义，则使左右结点中最大值（或最小值）与它交换，如果元素互换破坏了下一级的堆，则使用同样的方法对下一层递归调整</li>\n<li>升序排序需要建立大根堆：每次将最大值（即堆的根结点）移到数组的末尾，也就是将根结点（最大值）与数组的最后一个元素交换，然后将剩余元素重新调整为大根堆</li>\n<li>降序排序需要建立小根堆：与升序排序相反</li>\n<li>在含有 n 个关键字的小根堆中，关键字最大的记录存储范围为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn><mo>∼</mo><mi>n</mi><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\dfrac{n}{2}\\rfloor + 1 \\sim n \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>\n<ul>\n<li>小根堆的关键字最大的记录一定存储在这个堆所对应的完全二叉树的叶子结点中，又因为二叉树中的最后一个非叶子结点存储在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\dfrac{n}{2}\\rfloor \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 中，所以得到范围</li>\n</ul>\n</li>\n<li>堆排序适合关键字较多的情况，适合查找某一范围内的元素\n<ul>\n<li>例如：在 1 亿个数中选出前 100 个最大值，首先使用一个大小为 100 的数组，读入前 100 个数，建立小顶堆，而后依次读入余下的数，若小于堆顶则舍弃，否则用该数取代堆顶并重新调整堆，待数据读取完毕，堆中 100 个数即为所求</li>\n<li>注意：若题目没有要求查找某一范围内的元素，则最适合大量元素的排序算法是归并排序</li>\n</ul>\n</li>\n<li>仅适用于顺序存储的线性表</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>堆排序是不稳定的</li>\n</ul>\n<p>堆的操作</p>\n<ul>\n<li>堆的插入：新元素放到表尾（即最右下角元素），并与其 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>i</mi><mn>2</mn></mfrac></mstyle><mo stretchy=\"false\">⌋</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lfloor \\dfrac{i}{2} \\rfloor \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.02252em;vertical-align:-0.686em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3365200000000002em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 的父结点进行对比，若新元素比父元素更大（大根堆）或更小（小根堆），则二者互换，并保持上升，直到无法上升为止。时间复杂度为树高 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>堆的输出：取出堆顶元素并删除，被删除的元素用堆底元素（即最右下角元素）代替，然后让这个元素不断下坠，直到无法下坠为止。时间复杂度为树高 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>获取有序序列：反复执行 “取出堆顶元素并删除” 的操作</li>\n</ul>\n<p>注意</p>\n<ul>\n<li>如果题目说的是给出序列，然后调整为堆，则证明这个堆已经建立好了，只需要调整顺序</li>\n<li>如果给出序列后，问的是排序过程中的第 k 次建堆后的堆顶元素（根结点）是什么，则证明这个堆已经建立并调整好了（如果题目给出的数据是没有调整好的堆，此时应该自己先调整好，但是不算入建堆的次数），此后 “输出堆顶元素并重新调整好堆” 算作一次建堆操作。</li>\n<li>如果说的是依次插入，则要一边插入一边调整堆</li>\n<li><s>感觉像是在做阅读理解</s></li>\n</ul>\n<h2 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h2>\n<p>归并排序</p>\n<ul>\n<li>归并是指把两个（二路归并）或多个（多路归并）已经有序的序列合并为一个</li>\n<li>该算法是采用分治法的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；先使每个子序列有序，再使子序列段间有序</li>\n<li>适合大量元素的排序，用空间换时间</li>\n</ul>\n<p>二路归并排序</p>\n<ul>\n<li>将数列划分为长度相等的两个子序列，对子序列分别递归划分，最后逐层回溯将划分的两个子序列合并</li>\n<li>二路归并排序是一棵倒立的二叉树</li>\n<li>二路归并排序需要进行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌉</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\lceil\\log_2n\\rceil \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 次</li>\n<li>适用于顺序存储的线性表和链表</li>\n<li>时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span>，空间复杂度 O (n)</li>\n<li>二路归并排序是稳定的</li>\n</ul>\n<p>用单链表实现的二路归并排序<br />\n快排只适用于数组，在面对链表时可以考虑二路归并排序。但是代码较多，用更简单的选择排序或许是性价比更高的选择</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 归并排序（链表）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 链表结点的定义</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 合并两个有序链表</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">MergeTwoLists</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> l1<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>l1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>l2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        head <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">MergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token operator\">-></span>next<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        head <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">MergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 使用快慢指针找到链表中间结点并断开</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">FindMiddle</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 归并排序主函数</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 找到中间结点并分成两半</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">FindMiddle</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> mid<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    mid<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 递归排序左右两半</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> leftSorted <span class=\"token operator\">=</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> rightSorted <span class=\"token operator\">=</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 合并排序后的两半</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">MergeTwoLists</span><span class=\"token punctuation\">(</span>leftSorted<span class=\"token punctuation\">,</span> rightSorted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 打印链表</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> head<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 测试链表归并排序</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort_run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"排序前: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 对链表进行归并排序</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    head <span class=\"token operator\">=</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"排序后: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"基数排序\"><a class=\"anchor\" href=\"#基数排序\">#</a> 基数排序</h2>\n<ul>\n<li>基数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键值存储在额外开辟的数组空间中</li>\n<li>只能对整数进行排序</li>\n<li>元素的移动次数与关键字的初始排列次序无关</li>\n<li>位数（个位、十位、百位...）决定了 “分配 + 回收” 的次数，每有一位就对应一趟排序</li>\n<li>基数排序是稳定的</li>\n</ul>\n<h2 id=\"排序算法总结\"><a class=\"anchor\" href=\"#排序算法总结\">#</a> 排序算法总结</h2>\n<ul>\n<li>在 m 趟排序后\n<ul>\n<li>冒泡排序、选择排序至少最后（最前） m 个数是最终位置</li>\n<li>快速排序、堆排序至少有 m 个数是最终位置</li>\n<li>插入排序前 m 个数有序</li>\n</ul>\n</li>\n<li>插入排序、归并排序 在最后一趟排序前，可以所有数都不在最终位置</li>\n<li>插入排序、冒泡排序 最优可以达到线性时间复杂度（即 O (n)）</li>\n<li>选择排序、插入排序 的排序趟数为 n-1</li>\n<li>选择排序、插入排序、堆排序 的时间性能与初始状态无关</li>\n<li>折半插入、希尔排序、快速排序、堆排序 仅适用于顺序存储</li>\n<li>快速排序、二路归并排序 需要辅助空间</li>\n<li>稳定的算法中，只有二路归并排序的性能是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></li>\n<li>快速排序的平均性能最优</li>\n<li>在数据基本有序时，快速排序效率最低，插入排序效率较高（很可能是最高）</li>\n<li>冒泡排序是唯一可以提前终止（当本轮排序已经有序时）的排序</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>算法种类</th>\n<th>最好时间复杂度</th>\n<th>平均时间复杂度</th>\n<th>最坏时间复杂度</th>\n<th>空间复杂度</th>\n<th>是否稳定</th>\n<th>适合元素数量</th>\n<th>适用性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>直接插入排序</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>是</td>\n<td>较少</td>\n<td>顺序表和链表</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>是</td>\n<td>较少</td>\n<td>顺序表和链表</td>\n</tr>\n<tr>\n<td>二路归并排序</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>是</td>\n<td>较多</td>\n<td>顺序表和链表</td>\n</tr>\n<tr>\n<td>简单选择排序</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>否</td>\n<td>较少</td>\n<td>顺序表和链表</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td></td>\n<td></td>\n<td></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>否</td>\n<td>较多</td>\n<td>顺序表</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n^2) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>否</td>\n<td>较多</td>\n<td>顺序表</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(n\\log_2n) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">O(1) \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></td>\n<td>否</td>\n<td>较多</td>\n<td>顺序表</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"题目与总结-8\"><a class=\"anchor\" href=\"#题目与总结-8\">#</a> 题目与总结</h2>\n<p>【王道 8.3 选择第 17 题】【2019 408 真题】下列序列中，不可能是快速排序第二趟结果的是？<br />\nA. 5, 2, 16, 12, 28, 60, 32, 72<br />\nB. 2, 16, 5, 28, 12, 60, 32, 72<br />\nC. 2, 12, 16, 5, 28, 32, 72, 60<br />\nD. 5, 2, 12, 28, 16, 32, 72, 60</p>\n<ul>\n<li>根据快速排序特性，完成第一趟后必有至少 1 个数满足其左侧数均小于而右侧数均大于的情况；完成第二趟后必有至少 2 个数，以此类推。但如果这两个数均不在序列最左 / 右侧，那么则必须要有至少 3 个数（这一点在这道题前面 2014 年 408 真题里的解析却不是这么写的，可以认为是存在漏洞的解释）</li>\n<li>A 选项有 28, 72 满足，其中 72 在最右侧，故满足</li>\n<li>B 选项有 2, 72 满足，分别在最左、右侧，故满足</li>\n<li>C 选项有 2, 32, 28 满足，故满足</li>\n<li>D 选项有 12, 32 满足，而均在序列中间，故不满足</li>\n<li>所以选 D</li>\n</ul>\n<p>【王道 8.4 选择第 3 题】设线性表中每个元素有两个数据项 k1, k2，先按照 k1 从小到大排序，k1 相等时按 k2 从小到大排序，满足这种要求的排序方法是？<br />\nA. 先按 k1 进行直接插入排序，再按 k2 进行简单选择排序<br />\n B. 先按 k2 进行直接插入排序，再按 k1 进行简单选择排序<br />\n C. 先按 k1 进行简单选择排序，再按 k2 进行直接插入排序<br />\n D. 先按 k2 进行简单选择排序，再按 k1 进行直接插入排序</p>\n<ul>\n<li>不论是第一轮还是第二轮排序，都是以整体为范围来排序。所以后进行的排序会成为最终关键字，也就是第一关键字，故 k1 后排序，排除 A, C</li>\n<li>直接插入排序是稳定排序，简单选择排序是不稳定排序。第一轮排序是无所谓的，但如果第二轮排序使用不稳定排序，会导致第一轮确定好的 k2 的大小关系被破坏，所以只能选择 D</li>\n</ul>\n",
            "tags": [
                "计算机基础",
                "数据结构"
            ]
        },
        {
            "id": "https://maikire.xyz/2024/09/01/Shoka/Shoka%E4%B8%BB%E9%A2%98%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/",
            "url": "https://maikire.xyz/2024/09/01/Shoka/Shoka%E4%B8%BB%E9%A2%98%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/",
            "title": "Shoka主题的数学公式",
            "date_published": "2024-09-01T04:00:00.000Z",
            "content_html": "<h1 id=\"数学公式\"><a class=\"anchor\" href=\"#数学公式\">#</a> 数学公式</h1>\n<p>本功能基于 markdown-it-katex<br />\n 在 Front Matter 中添加 math: true 以支持 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcv\">KaTex</span></p>\n<p>KaTeX 轻量、渲染快速。<br />\nKaTeX 支持大部分常见的数学符号和表达式，但某些复杂的或较少使用的语法在 KaTeX 中可能不受支持。</p>\n<p>数学公式大全：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2FydGljbGUvNGE4MWUydHQ=\">KaTeX 数学公式大全</span></p>\n<p><span class=\"label danger\">注意！</span></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>部分数学公式可能会出现渲染错误（概率事件）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  输入 $a^b$，显示为 a^</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  输入 $\\dfrac<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>b<span class=\"token punctuation\">&#125;</span>$，显示为 \\dfrac<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>解决方法：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  1. 在公式的末尾添加空格 \\kern xpt，例如：$\\dfrac<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>b<span class=\"token punctuation\">&#125;</span> \\kern 0.1pt$</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  2. 在公式的末尾添加换行符 \\\\，例如：$\\dfrac<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>b<span class=\"token punctuation\">&#125;</span> \\\\$</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  3. 使用 $$\\dfrac<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>b<span class=\"token punctuation\">&#125;</span>$$ 独占一行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  4. 使用标记 $\\( \\dfrac<span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>b<span class=\"token punctuation\">&#125;</span> \\)$</pre></td></tr></table></figure><p>正常显示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mi>a</mi><mi>b</mi></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{a}{b} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 测试 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\dfrac{m^h-1}{m-1} \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.295438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.526108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span> 测试 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>n</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mrow><mi>i</mi><msub><mi>n</mi><mi>i</mi></msub></mrow><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mspace width=\"0.010000000000000002em\"/></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=0}^n{n_i} = (\\sum_{i=0}^n{in_i}) + 1 \\kern 0.1pt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.010000000000000002em;\"></span></span></span></span></p>\n",
            "tags": [
                "Shoka",
                "Shoka"
            ]
        },
        {
            "id": "https://maikire.xyz/2024/05/10/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/%E9%94%81%E9%92%A5%E8%AE%BE%E8%AE%A1/",
            "url": "https://maikire.xyz/2024/05/10/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/%E9%94%81%E9%92%A5%E8%AE%BE%E8%AE%A1/",
            "title": "锁钥设计",
            "date_published": "2024-05-10T04:00:00.000Z",
            "content_html": "<h1 id=\"锁钥设计\"><a class=\"anchor\" href=\"#锁钥设计\">#</a> 锁钥设计</h1>\n<p>通过一步步的引导和限制，设计玩家的思维方式，让他们自己找到答案。</p>\n<h2 id=\"核心锁游戏设计常见的核心方式\"><a class=\"anchor\" href=\"#核心锁游戏设计常见的核心方式\">#</a> 核心锁（游戏设计常见的核心方式）</h2>\n<ul>\n<li>实体锁（关键物品、关键技能、关键剧情）<br />\n核心体验是：获得</li>\n<li>信息锁（密码、问题的答案、特殊的操作、进入某个区域的方式、一开始就拥有的技能，但是在开局时不全都告诉玩家，需要玩家自己去发现它或者设计某个特殊场景引领玩家发现它）<br />\n核心体验是：学习</li>\n<li>难度锁（高难度的敌人、等级限制、昂贵的道具，目的在于劝退，让玩家走上自己设计好的路线）<br />\n核心体验是：挑战</li>\n</ul>\n<h2 id=\"开锁\"><a class=\"anchor\" href=\"#开锁\">#</a> 开锁</h2>\n<ul>\n<li>实体锁的开锁捷径：无</li>\n<li>信息锁的开锁捷径：攻略、剧透、穷举、误打误撞。走捷径可能会失去学习的乐趣</li>\n<li>难度锁的开锁捷径：提升玩家的水平、修改器、代练</li>\n</ul>\n<h1 id=\"多重锁钥\"><a class=\"anchor\" href=\"#多重锁钥\">#</a> 多重锁钥</h1>\n<p>一个钥匙对应多个锁、一个锁对应多个钥匙、多个锁对应多个钥匙</p>\n<p>一个钥匙对应多个锁：在《空洞骑士》中，探索前两个区域的流程是非常线性的，必须拿到白波才能去苍绿之径，而其它的区域，新玩家是无法到达的（教科书级别的设计）。拿到关键物品或关键技能后可以去多个区域（例：拿到冲刺技能后，可以利用冲刺去多个区域，但是不论走哪个区域，最终都导向同一个区域）</p>\n<p>一个锁对应多个钥匙：进入某个区域的方式有很多种</p>\n<h1 id=\"单向锁钥\"><a class=\"anchor\" href=\"#单向锁钥\">#</a> 单向锁钥</h1>\n<p>将玩家限制在某个区域，直到玩家完成任务（做完某个剧情任务、学会使用某个技能），推进游戏流程。<br />\n可以诱导玩家探索，让玩家返程（例：某个道具，可以看到它，但是不能直接拿到它，必须绕路走，或者是必须学会某个技能）<br />\n可以埋下悬念，制造恍然大悟的快感。</p>\n<h1 id=\"教玩家撬锁\"><a class=\"anchor\" href=\"#教玩家撬锁\">#</a> 教玩家撬锁</h1>\n<p>利用某个关卡，告诉玩家某些特殊的操作（比如：技能组合技、已拥有但不知道的技能）。</p>\n<p>教玩家撬锁会使测试的工作量变得非常大（比如：进入了不该进入的区域导致死档、或者触发了不该触发的剧情），这种会改变游戏一般流程的操作必须要提前设计好</p>\n<h1 id=\"其他常见锁钥机制\"><a class=\"anchor\" href=\"#其他常见锁钥机制\">#</a> 其他常见锁钥机制</h1>\n<ul>\n<li>资源锁：常见重要资源和获得方式<br />\n例如：通过地图探索或贸易系统获得食物、水、弹药、特殊稀缺资源<br />\n核心体验是：耐心和规划</li>\n<li>时间锁：需要玩家等待一定的时间才能解锁<br />\n例如：游戏中的每日任务、冷却时间、模拟经营类游戏中的建造时间<br />\n核心体验是：耐心和规划</li>\n<li>社交锁：需要与其他玩家互动才能解锁内容（注意游戏的受众群体，否则会带来负面效果）<br />\n例如：多人在线游戏中的公会任务或团队挑战<br />\n核心体验是：社交和协作</li>\n<li>动态难度锁：游戏流程中循序渐进的难度、多周目难度变化、让玩家选择难度<br />\n例如：《只狼》中的双难、《蔚蓝》中的辅助功能<br />\n核心体验是：挑战（角色变强后，要有与之相配的敌人）</li>\n<li>随机锁钥：随机地图 / 迷宫、随机生成锁钥的位置、随机触发特殊事件和解锁机会，一般采用半随机的方式保证每种情况出现的次数相近<br />\n例如：《死亡细胞》等 Rogue 游戏<br />\n核心体验是：期待感</li>\n<li>动态环境和隐藏区域：设计动态变化的环境（时间、天气、季节），影响玩家的探索路径和策略<br />\n例如：不同的环境有不同的隐藏区域、隐藏事件、隐藏道具、特殊天气下的美景<br />\n核心体验是：期待感和成就感</li>\n</ul>\n",
            "tags": [
                "游戏设计",
                "关卡设计",
                "游戏设计"
            ]
        },
        {
            "id": "https://maikire.xyz/2024/01/18/Unity/UnityBasics/Unity%E5%A4%9A%E4%BA%BA%E8%81%94%E6%9C%BA%E5%9F%BA%E7%A1%80%EF%BC%88Netcode%EF%BC%89/",
            "url": "https://maikire.xyz/2024/01/18/Unity/UnityBasics/Unity%E5%A4%9A%E4%BA%BA%E8%81%94%E6%9C%BA%E5%9F%BA%E7%A1%80%EF%BC%88Netcode%EF%BC%89/",
            "title": "Unity多人联机基础（Netcode）",
            "date_published": "2024-01-18T08:00:00.000Z",
            "content_html": "<h1 id=\"unity多人联机netcode\"><a class=\"anchor\" href=\"#unity多人联机netcode\">#</a> Unity 多人联机（Netcode）</h1>\n<p>Netcode for GameObjects (NGO) 是一个专为 Unity 构建的高级网络库，可帮助您抽象网络逻辑。您可以通过网络会话一次性将游戏对象和世界数据发送给许多玩家。借助 NGO，您可以专注于构建游戏，而不是低级协议和网络框架。<br />\n本篇只介绍部分基础组件并利用它们实现简单的联机功能，其他高级应用请看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLW11bHRpcGxheWVyLnVuaXR5M2QuY29tL25ldGNvZGUvY3VycmVudC9hYm91dC8=\">官方文档</span>。</p>\n<h1 id=\"组件\"><a class=\"anchor\" href=\"#组件\">#</a> 组件</h1>\n<h2 id=\"安装netcode\"><a class=\"anchor\" href=\"#安装netcode\">#</a> 安装 Netcode</h2>\n<p>安装条件：Unity 版本在 2021.3 或以上、Mono 和 IL2CPP 后端脚本。<br />\n安装方法：打开 PackageManager（Window -&gt; PackageManager）搜索 com.unity.netcode.gameobjects 如图所示:<img data-src=\"Install.png\" alt=\"img\" /></p>\n<h2 id=\"networkmanager\"><a class=\"anchor\" href=\"#networkmanager\">#</a> NetworkManager</h2>\n<p>NetworkManager 是游戏对象所需的网络代码（Netcode）组件，它具有项目的所有网络代码相关设置。 将其视为支持网络代码的项目的 “中央网络代码中心”。<br />\n接下来将介绍部分属性，其他详细解释请看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLW11bHRpcGxheWVyLnVuaXR5M2QuY29tL25ldGNvZGUvY3VycmVudC9jb21wb25lbnRzL25ldHdvcmttYW5hZ2VyLyNuZXR3b3JrbWFuYWdlci1zdWItc3lzdGVtcw==\">官方文档</span></p>\n<ol>\n<li>Player Prefab：当分配一个 Prefab 时，该 Prefab 将被实例化为玩家对象并分配给新连接并授权的客户端。</li>\n<li>Network Transport：设置网络特定设置和传输类型的位置。该字段接受任何 INetworkTransport 实现。但是，除非您有独特的传输特定需求，否则建议将 UnityTransport 与 Netcode 用于游戏对象的传输结合使用。</li>\n<li>Network Prefabs Lists：您在其中注册网络预制件。您还可以在此处为每个已注册的网络预制件创建单个网络预制件覆盖。</li>\n<li>Starting a Server, Host, or Client：为了执行涉及发送消息的任何与网络代码相关的操作，您必须首先启动服务器并侦听与至少一个已连接客户端的连接（服务器在作为主机运行时可以向其自身发送 RPC）。要实现此目的，您必须首先将 NetworkManager 作为服务器、主机或客户端启动。您可以调用三种 NetworkManager 方法来完成此操作：<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">StartHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 NetworkManager 作为服务器和客户端启动（即具有本地客户端）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">StartServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 NetworkManager 仅作为服务器启动（即，没有本地客户端）。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">StartClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 NetworkManager 仅作为客户端启动。</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"unitytransport\"><a class=\"anchor\" href=\"#unitytransport\">#</a> UnityTransport</h2>\n<p>用于设置网络特定设置和传输类型，例如：IP 地址、端口、服务器监听地址等网络设置。<br />\n在 NetworkManager 的 Network Transport 选项中选择 UnityTransport 时，会自动添加这个组件。如图所示：<img data-src=\"UnityTransport.png\" alt=\"img\" /></p>\n<h2 id=\"networkobject和networkbehaviour\"><a class=\"anchor\" href=\"#networkobject和networkbehaviour\">#</a> NetworkObject 和 NetworkBehaviour</h2>\n<p>GameObjects 高级组件的 Netcode、RPC 系统、对象生成、NetworkVariables 都至少依赖于这两个组件 NetworkObject、NetworkBehaviour</p>\n<p>要复制任何 Netcode 感知属性或发送 / 接收 RPC，GameObject 必须具有 NetworkObject 组件和至少一个 NetworkBehaviour 组件。任何与 Netcode 相关的组件（例如具有一个或多个 NetworkVariables 或 RPC 的 NetworkTransform 或 NetworkBehaviour）都需要同一相对 GameObject（或相关 GameObject 的父级）上的 NetworkObject 组件。<br />\n生成 NetworkObject 时，NetworkObject.GlobalObjectIdHash 值最初标识关联的网络预制件资产客户端实例化以创建客户端本地克隆。在本地实例化后，每个 NetworkObject 都会分配一个 NetworkObjectId，用于跨网络关联 NetworkObject。例如：一个对等方可以说 “将此 RPC 发送到 NetworkObjectId 103 的对象”，每个人都知道它指的是哪个对象。NetworkObject 在实例化并分配唯一的 NetworkObjectId 时在客户端上生成。<br />\nNetworkBehaviours 使用户能够将自己的自定义网络代码逻辑添加到关联的 NetworkObject。在为网络预制件（例如游戏玩家）编写脚本时应继承 NetworkBehaviour 而不是 MonoBehaviour</p>\n<p><span class=\"label danger\">网络对象的组件加载顺序很重要。确保优先加载 NetworkObject，随后加载其他 NetworkBehaviour 组件。</span></p>\n<p>其他详细介绍请看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLW11bHRpcGxheWVyLnVuaXR5M2QuY29tL25ldGNvZGUvY3VycmVudC9iYXNpY3MvbmV0d29ya29iamVjdC8=\">官方文档</span>。</p>\n<h2 id=\"networktransform\"><a class=\"anchor\" href=\"#networktransform\">#</a> NetworkTransform</h2>\n<p>对象变换的同步是当今多人游戏中执行的最常见的网络代码任务之一。这件事看似简单但是实际上它很复杂。幸运的是，NGO 为您提供了 NetworkTransform 组件实现，它可以处理转换同步的一些问题，并且可以轻松配置。其他详细介绍请看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLW11bHRpcGxheWVyLnVuaXR5M2QuY29tL25ldGNvZGUvY3VycmVudC9jb21wb25lbnRzL25ldHdvcmt0cmFuc2Zvcm0vI2ludHJvZHVjdGlvbg==\">官方文档</span></p>\n<h1 id=\"示例2d场景\"><a class=\"anchor\" href=\"#示例2d场景\">#</a> 示例（2D 场景）</h1>\n<h2 id=\"添加必要的组件\"><a class=\"anchor\" href=\"#添加必要的组件\">#</a> 添加必要的组件</h2>\n<ol>\n<li>玩家预制件：新建一个正方形，命名为 Player1，添加 Rigidbody 2D 组件（将重力设置为 0），添加 PlayerInput 组件（本例中的移动控制使用 Input System），添加 NetworkObject 组件，制作成预制件，将它在场景中删除</li>\n<li>NetworkManager：新建一个空物体，名为 NetworkManager，添加 NetworkManager 组件，将 Player Prefab 属性设置为刚才创建的预制件，将 Network Transport 属性设置为 UnityTransport，其他属性均为默认值（包括 UnityTransport 组件），如图所示：<img data-src=\"NetworkManager.png\" alt=\"img\" /></li>\n</ol>\n<h2 id=\"编写玩家脚本\"><a class=\"anchor\" href=\"#编写玩家脚本\">#</a> 编写玩家脚本</h2>\n<ul>\n<li>新建脚本 ClientNetworkTransform 和 Player1_1，将他们添加到玩家预制件中</li>\n<li>NetworkVariable 是用于网络同步信息的类，在本例中不同的方块使用不同的颜色，所以需要同步颜色信息，位置信息由 NetworkTransform 组件完成同步</li>\n</ul>\n<p><span class=\"label info\">ClientNetworkTransform</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Unity<span class=\"token punctuation\">.</span>Netcode<span class=\"token punctuation\">.</span>Components</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Default</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// ClientNetworkTransform</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientNetworkTransform</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetworkTransform</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// 用于确定谁可以写入此转换。仅限客户端。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OnIsServerAuthoritative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">Player1_1</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Unity<span class=\"token punctuation\">.</span>Netcode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>InputSystem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Default</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// Player1_1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player1_1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetworkBehaviour</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Tooltip</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"移动速度\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> speed <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">PlayerInput</span> playerInput<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">InputAction</span> moveAction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">NetworkVariable<span class=\"token punctuation\">&lt;</span>Color<span class=\"token punctuation\">></span></span> networkColor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NetworkVariable<span class=\"token punctuation\">&lt;</span>Color<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            playerInput <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PlayerInput<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>IsServer <span class=\"token operator\">||</span> IsHost<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                moveAction <span class=\"token operator\">=</span> playerInput<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">FindActionMap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Player Controls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FindAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Move\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/// 获取颜色</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">GetColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsServer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Color</span><span class=\"token punctuation\">(</span>Random<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> Random<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> Random<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">+</span> color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">+</span> color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>SpriteRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                networkColor<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsOwner <span class=\"token operator\">||</span> IsClient<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>SpriteRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> networkColor<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">/// 移动</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsOwner<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token class-name\">Vector2</span> moveVector <span class=\"token operator\">=</span> moveAction<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadValue</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Vector2<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token class-name\">Vector3</span> movePosition <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Lerp</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">)</span>moveVector<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> movePosition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnEnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            playerInput<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">Enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDisable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            playerInput<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">Disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"简单的ui界面\"><a class=\"anchor\" href=\"#简单的ui界面\">#</a> 简单的 UI 界面</h2>\n<ul>\n<li>新建一个空物体，命名为 PlayerManager，新建脚本 PlayerManager1 并添加到 PlayerManager 物体中</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Unity<span class=\"token punctuation\">.</span>Netcode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Unity<span class=\"token punctuation\">.</span>Netcode<span class=\"token punctuation\">.</span>Transports<span class=\"token punctuation\">.</span>UTP</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Default</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// PlayerManager1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PlayerManager1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 设置 IP 地址、端口、服务器监听地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>UnityTransport<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetConnectionData</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">GetLocalIPAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token number\">7777</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>IsClient <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>IsServer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token function\">StartButtons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token function\">StatusLabels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token function\">SubmitNewPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetLocalIPAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ipAddress <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token class-name\">IPHostEntry</span> host <span class=\"token operator\">=</span> Dns<span class=\"token punctuation\">.</span><span class=\"token function\">GetHostEntry</span><span class=\"token punctuation\">(</span>Dns<span class=\"token punctuation\">.</span><span class=\"token function\">GetHostName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IPAddress</span> ip <span class=\"token keyword\">in</span> host<span class=\"token punctuation\">.</span>AddressList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">.</span>AddressFamily <span class=\"token operator\">==</span> AddressFamily<span class=\"token punctuation\">.</span>InterNetwork<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    ipAddress <span class=\"token operator\">=</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">return</span> ipAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartButtons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 选择主机、服务器、客户端</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">StartHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">StartClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">StartServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StatusLabels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mode <span class=\"token operator\">=</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>IsHost <span class=\"token punctuation\">?</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token string\">\"Host\"</span> <span class=\"token punctuation\">:</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>IsServer <span class=\"token punctuation\">?</span> <span class=\"token string\">\"Server\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Client\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transport: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>NetworkConfig<span class=\"token punctuation\">.</span>NetworkTransport<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mode: \"</span> <span class=\"token operator\">+</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SubmitNewPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">// 用于显示玩家数量</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>IsServer <span class=\"token punctuation\">?</span> <span class=\"token string\">\"Log\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Request Log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>IsServer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>IsClient<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">ulong</span></span> uid <span class=\"token keyword\">in</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>ConnectedClientsIds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                        <span class=\"token class-name\">Player1</span> playerObjects <span class=\"token operator\">=</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>SpawnManager<span class=\"token punctuation\">.</span><span class=\"token function\">GetPlayerNetworkObject</span><span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Player1<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>playerObjects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> playerObject <span class=\"token operator\">=</span> NetworkManager<span class=\"token punctuation\">.</span>Singleton<span class=\"token punctuation\">.</span>SpawnManager<span class=\"token punctuation\">.</span><span class=\"token function\">GetLocalPlayerObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"playerObject=\"</span> <span class=\"token operator\">+</span> playerObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"演示\"><a class=\"anchor\" href=\"#演示\">#</a> 演示</h2>\n<p><img data-src=\"demo.gif\" alt=\"img\" /></p>\n",
            "tags": [
                "Unity",
                "UnityBasics",
                "Unity"
            ]
        },
        {
            "id": "https://maikire.xyz/2024/01/13/Unity/UnityToolClass/AssetBundle%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7/",
            "url": "https://maikire.xyz/2024/01/13/Unity/UnityToolClass/AssetBundle%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7/",
            "title": "AssetBundle创建与加载工具",
            "date_published": "2024-01-13T05:00:00.000Z",
            "content_html": "<h1 id=\"assetbundle-创建与加载\"><a class=\"anchor\" href=\"#assetbundle-创建与加载\">#</a> AssetBundle 创建与加载</h1>\n<ul>\n<li>AssetBundle 只能用代码创建和加载</li>\n<li>在创建前需要先为资源分配资源包，如图：<img data-src=\"AB.png\" alt=\"img\" /></li>\n</ul>\n<h2 id=\"assetbundle-创建\"><a class=\"anchor\" href=\"#assetbundle-创建\">#</a> AssetBundle 创建</h2>\n<ul>\n<li>区分平台（Windows、OSX、Linux 等）</li>\n<li>区分创建方式（是否压缩、压缩方式等）</li>\n<li>lua 文件无法被打包，本文使用的方法是：生成 .lua 文件对应的 .txt 文件，将 .txt 文件打包，然后删除生成的 .txt 文件</li>\n<li>代码需要放到 Editor 文件夹中</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Common</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// CreateAssetBundles</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateAssetBundles</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// BuildAllAssetBundles</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Build/Build AssetBundles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BuildAllAssetBundles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 自定义路径</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> assetBundleDirectory <span class=\"token operator\">=</span> EditorUtility<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFolderPanel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选择导出路径\"</span><span class=\"token punctuation\">,</span> Application<span class=\"token punctuation\">.</span>dataPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>assetBundleDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 固定路径</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">//string assetBundleDirectory = Application.streamingAssetsPath + \"/AssetBundles\";</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">BuildAssetBundleOptions</span> assetBundleOptions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">BuildTarget</span> targetPlatform<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_STANDALONE_WIN </span><span class=\"token comment\">//Windows 独立平台应用程序</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            assetBundleOptions <span class=\"token operator\">=</span> BuildAssetBundleOptions<span class=\"token punctuation\">.</span>UncompressedAssetBundle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            targetPlatform <span class=\"token operator\">=</span> BuildTarget<span class=\"token punctuation\">.</span>StandaloneWindows64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_WSA </span><span class=\"token comment\">//UWP</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            assetBundleOptions <span class=\"token operator\">=</span> BuildAssetBundleOptions<span class=\"token punctuation\">.</span>UncompressedAssetBundle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            targetPlatform <span class=\"token operator\">=</span> BuildTarget<span class=\"token punctuation\">.</span>WSAPlayer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_STANDALONE_OSX </span><span class=\"token comment\">//Mac OS X（包括 Universal、PPC 和 Intel 架构）</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            assetBundleOptions <span class=\"token operator\">=</span> BuildAssetBundleOptions<span class=\"token punctuation\">.</span>UncompressedAssetBundle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            targetPlatform <span class=\"token operator\">=</span> BuildTarget<span class=\"token punctuation\">.</span>StandaloneOSX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_STANDALONE_LINUX </span><span class=\"token comment\">//Linux</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            assetBundleOptions <span class=\"token operator\">=</span> BuildAssetBundleOptions<span class=\"token punctuation\">.</span>UncompressedAssetBundle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            targetPlatform <span class=\"token operator\">=</span> BuildTarget<span class=\"token punctuation\">.</span>StandaloneLinux<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_ANDROID</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            assetBundleOptions <span class=\"token operator\">=</span> BuildAssetBundleOptions<span class=\"token punctuation\">.</span>ChunkBasedCompression<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            targetPlatform <span class=\"token operator\">=</span> BuildTarget<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_IOS</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            assetBundleOptions <span class=\"token operator\">=</span> BuildAssetBundleOptions<span class=\"token punctuation\">.</span>ChunkBasedCompression<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            targetPlatform <span class=\"token operator\">=</span> BuildTarget<span class=\"token punctuation\">.</span>iOS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_WEBGL</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            assetBundleOptions <span class=\"token operator\">=</span> BuildAssetBundleOptions<span class=\"token punctuation\">.</span>ChunkBasedCompression<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            targetPlatform <span class=\"token operator\">=</span> BuildTarget<span class=\"token punctuation\">.</span>WebGL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Directory<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>assetBundleDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                Directory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span>assetBundleDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                Directory<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>assetBundleDirectory<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                Directory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span>assetBundleDirectory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> allTxtPaths <span class=\"token operator\">=</span> <span class=\"token function\">CopyLuaToTxt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token function\">GetFilesInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            BuildPipeline<span class=\"token punctuation\">.</span><span class=\"token function\">BuildAssetBundles</span><span class=\"token punctuation\">(</span>assetBundleDirectory<span class=\"token punctuation\">,</span> assetBundleOptions<span class=\"token punctuation\">,</span> targetPlatform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token function\">DeleteTxtFiles</span><span class=\"token punctuation\">(</span>allTxtPaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">/// 获取文件信息，用于调试</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GetFilesInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> bundleNames <span class=\"token operator\">=</span> AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">GetAllAssetBundleNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> allAssetPaths <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> bundleName <span class=\"token keyword\">in</span> bundleNames<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> assetPaths <span class=\"token operator\">=</span> AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssetPathsFromAssetBundle</span><span class=\"token punctuation\">(</span>bundleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                allAssetPaths<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>assetPaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All AB paths:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token keyword\">in</span> allAssetPaths<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">/// 将 .lua 文件转换为 .txt 文件</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>.txt 文件路径 & lt;/returns></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">CopyLuaToTxt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> bundleNames <span class=\"token operator\">=</span> AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">GetAllAssetBundleNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> allAssetPaths <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> allTxtPaths <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> bundleName <span class=\"token keyword\">in</span> bundleNames<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> assetPaths <span class=\"token operator\">=</span> AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssetPathsFromAssetBundle</span><span class=\"token punctuation\">(</span>bundleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                allAssetPaths<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>assetPaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token keyword\">in</span> allAssetPaths<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                    <span class=\"token comment\">// 读取.lua 文件内容</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> utf8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>UTF8Encoding</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> content <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                    <span class=\"token comment\">// 构造对应的.txt 文件路径</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> txtPath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeExtension</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                    File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span>txtPath<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                    allTxtPaths<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>txtPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">Refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token keyword\">return</span> allTxtPaths<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token comment\">/// 删除 .txt 文件</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"dir\">&lt;/param></span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DeleteTxtFiles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> allTxtPaths<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token keyword\">in</span> allTxtPaths<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                AssetDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteAsset</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"assetbundle-加载\"><a class=\"anchor\" href=\"#assetbundle-加载\">#</a> AssetBundle 加载</h2>\n<ul>\n<li>两种加载方式：通过网络请求加载（UnityWebRequest）、通过本地存储加载（AssetBundle.LoadFromFile ()）\n<ul>\n<li>本工具类中使用网络请求加载方式，目的是为了适配更多的设备</li>\n</ul>\n</li>\n<li>同一个 ab 包中如果有多个同名文件，则只会加载第一个匹配的文件</li>\n<li>加载目标 ab 包前，需要先加载它的依赖 ab 包（如果存在）</li>\n<li>加载目标 ab 包后，调用委托处理其他逻辑</li>\n<li>加载的 ab 包在使用完后需要卸载，防止占用内存</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Networking</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Common</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// AB 包管理器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AssetBundleManager</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 加载资源包</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"body\"> 执行对象 & lt;/param></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"path\"> 路径 & lt;/param></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"action\"> 委托 & lt;/param></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadAssetBundle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">MonoBehaviour</span> body<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>AssetBundle<span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            body<span class=\"token punctuation\">.</span><span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">ToLoadAssetBundle</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/// 加载资源包</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"path\"> 路径 & lt;/param></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"action\"> 委托 & lt;/param></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">ToLoadAssetBundle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>AssetBundle<span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> assetBundleName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> startPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">LastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 获取 AssetBundles 文件</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">UnityWebRequest</span> request_0 <span class=\"token operator\">=</span> UnityWebRequestAssetBundle<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssetBundle</span><span class=\"token punctuation\">(</span>startPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/AssetBundles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> request_0<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request_0<span class=\"token punctuation\">.</span>result <span class=\"token operator\">!=</span> UnityWebRequest<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to load AssetBundle：\"</span> <span class=\"token operator\">+</span> request_0<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token class-name\">AssetBundle</span> bundle_0 <span class=\"token operator\">=</span> DownloadHandlerAssetBundle<span class=\"token punctuation\">.</span><span class=\"token function\">GetContent</span><span class=\"token punctuation\">(</span>request_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token comment\">// 获取 manifest 文件</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token class-name\">AssetBundleManifest</span> manifest_0 <span class=\"token operator\">=</span> bundle_0<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAsset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AssetBundleManifest\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">AssetBundleManifest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                bundle_0<span class=\"token punctuation\">.</span><span class=\"token function\">Unload</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token comment\">// 查找并加载依赖文件</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> dependencies <span class=\"token operator\">=</span> manifest_0<span class=\"token punctuation\">.</span><span class=\"token function\">GetAllDependencies</span><span class=\"token punctuation\">(</span>assetBundleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token class-name\">AssetBundle<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> bundles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AssetBundle</span><span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dependencies<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> dependenciesPath <span class=\"token operator\">=</span> startPath <span class=\"token operator\">+</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">+</span> dependencies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token class-name\">UnityWebRequest</span> requests <span class=\"token operator\">=</span> UnityWebRequestAssetBundle<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssetBundle</span><span class=\"token punctuation\">(</span>dependenciesPath<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> requests<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">.</span>result <span class=\"token operator\">!=</span> UnityWebRequest<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to load AssetBundle：\"</span> <span class=\"token operator\">+</span> requests<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        bundles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DownloadHandlerAssetBundle<span class=\"token punctuation\">.</span><span class=\"token function\">GetContent</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token comment\">// 取出资源</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token class-name\">UnityWebRequest</span> request <span class=\"token operator\">=</span> UnityWebRequestAssetBundle<span class=\"token punctuation\">.</span><span class=\"token function\">GetAssetBundle</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>result <span class=\"token operator\">!=</span> UnityWebRequest<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to load AssetBundle：\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token class-name\">AssetBundle</span> bundle <span class=\"token operator\">=</span> DownloadHandlerAssetBundle<span class=\"token punctuation\">.</span><span class=\"token function\">GetContent</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    bundle<span class=\"token punctuation\">.</span><span class=\"token function\">Unload</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AssetBundle</span> item <span class=\"token keyword\">in</span> bundles<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    item<span class=\"token punctuation\">.</span><span class=\"token function\">Unload</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h1>\n<p><span class=\"label info\">创建</span><br />\n点击按钮创建 ab 包，如图：<img data-src=\"AB_1.png\" alt=\"img\" /></p>\n<p><span class=\"label info\">加载</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Common</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Default</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// AB 包测试</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ABTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">LoadAssetBundle</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">.</span>streamingAssetsPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/AssetBundles/lua_bundles\"</span><span class=\"token punctuation\">,</span> TestAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AssetBundle</span> bundle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">TextAsset</span> receive <span class=\"token operator\">=</span> bundle<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">LoadAsset</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextAsset<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>receive<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Unity",
                "UnityToolClass",
                "Unity"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/12/01/Unity/UnityShader/UnityShaderBasics/%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/",
            "url": "https://maikire.xyz/2023/12/01/Unity/UnityShader/UnityShaderBasics/%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/",
            "title": "渲染管线",
            "date_published": "2023-12-01T05:00:00.000Z",
            "content_html": "<h1 id=\"渲染管线\"><a class=\"anchor\" href=\"#渲染管线\">#</a> 渲染管线</h1>\n<p>渲染管线（Rendering Pipeline）是计算机图形学中用于将三维场景转化为二维图像的一系列处理步骤。它是一个由多个阶段组成的流水线，每个阶段都负责对图形数据进行特定的操作和处理。</p>\n<h1 id=\"概念流水线\"><a class=\"anchor\" href=\"#概念流水线\">#</a> 概念流水线</h1>\n<p>从概念上可以分为 3 个阶段：应用阶段、几何阶段、光栅化阶段</p>\n<ul>\n<li>应用阶段<br />\n在 CPU 中进行。开发者拥有这个阶段的绝对控制权。这一阶段主要有三个任务：场景（模型、相机、特效等）、设置渲染状态（shader、材质贴图、纹理）、遮挡剔除。这一阶段的输出结果是渲染所需的几何信息，即渲染图元。</li>\n<li>几何阶段<br />\n通常在 GPU 中进行。用于处理所有与我们要绘制的几何相关的东西。这一阶段的输出结果是屏幕空间的二维顶点坐标，每个顶点对应的深度值、着色器等信息。</li>\n<li>光栅化阶段<br />\n在 GPU 中进行。使用上一个阶段传递的数据来生成屏幕上的像素，并渲染出最终的图像。它需要对上一个阶段得到的逐顶点数据（例如：纹理坐标、顶点颜色等）进行差值，然后在进行逐图像处理。</li>\n</ul>\n<p><img data-src=\"Pipeline_1.png\" alt=\"img\" /></p>\n<div class=\"note warning\">\n<p>这里的流水线均是概念流水线，是我们为了给一个渲染流程进行基本的功能划分而提出来的。下面要介绍的 GPU 流水线，则是硬件真正用于实现上述概念的流水线。</p>\n</div>\n<h1 id=\"cpu和gpu之间的通信\"><a class=\"anchor\" href=\"#cpu和gpu之间的通信\">#</a> CPU 和 GPU 之间的通信</h1>\n<p>渲染流水线的起点是 CPU, 即应用阶段。应用阶段大致可分为 3 个阶段：把数据加载到显存中、设置渲染状态、调用 DrawCall</p>\n<ul>\n<li>把数据加载到显存中<br />\n所有的数据都需要从硬盘加载到内存中，然后，将网格和纹理等数据加载到显存中。数据加载到显存后，内存中的部分数据就可以移除了，对于另外一部分数据，CPU 还需要访问它们（例如：获取网格数据实现碰撞检测、基于网格的自动寻路等）。</li>\n<li>设置渲染状态<br />\n渲染状态定义了场景中的网格是怎样被渲染的。例如：使用哪个顶点着色器 (Vertex Shader) / 片元着色器 (Fragment Shader)、光源属性、材质等。如果我们没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。装备好上述所有数据后，CPU 需要调用一个命令通知 GPU 进行渲染，这个渲染命令称之为 DrawCall</li>\n<li>调用 DrawCall<br />\n 相信接触过渲染优化的读者应该都听说过 Draw Call。实际上，DrawCall 就是一个命令，它的发起方是 CPU，接收方是 GPU。这个命令仅仅会指向一个需要被渲染的图元列表，而不会再包含任何材质信息，这是因为我们已经在上一个阶段中完成了。<br />\n当给定了一个 DrawCall 时，GPU 就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。而这个计算过程，就是我们接下来要讲的 GPU 流水线。</li>\n</ul>\n<h1 id=\"gpu流水线\"><a class=\"anchor\" href=\"#gpu流水线\">#</a> GPU 流水线</h1>\n<p>当 GPU 从 CPU 那里得到渲染命令后，就会进行一系列流水线操作，最终把图元渲染到屏幕上。</p>\n<p>GPU 渲染流水线如下图所示，颜色表示不同阶段的可配置性或可编程性：</p>\n<ul>\n<li>绿色：流水线阶段是完全可编程控制的</li>\n<li>橙色：流水线阶段可以配置但是不可编程</li>\n<li>蓝色：流水线阶段是由 GPU 固定实现的（开发者没有控制权）</li>\n<li>除可选择的阶段以外，其他阶段必须实现</li>\n<li>部分名称在 OpenGL 和 DirectX 中不相同，本篇以 OpenGL 为例</li>\n</ul>\n<p><img data-src=\"Pipeline_2.png\" alt=\"img\" /></p>\n<ul>\n<li>顶点数据：这些数据是由应用阶段加载到显存中，再由 DrawCall 指定的。<br />\n<span class=\"label info\">几何阶段</span></li>\n<li>顶点着色器 (Vertex Shader)：完全可编程，通常用于实现顶点的空间变换、顶点着色等功能。</li>\n<li>曲面细分着色器 (Tessellation Shader)：是一个可选的着色器，它用于细分图元。</li>\n<li>几何着色器 (Geometry Shader)：同样是一个可选的着色器，它可以被用于执行逐图元 (Per-Primitive) 的着色操作，或者被用于产生更多的图元。</li>\n<li>裁剪 (Clipping)：这一阶段的目的是将那些不在摄像机视野内的顶点裁剪掉，并剔除某些三角图元的面片。这个阶段是可配置的。例如，我们可以使用自定义的裁剪平面来配置裁剪区域，也可以通过指令控制裁剪三角图元的正面还是背面。</li>\n<li>屏幕映射 (Screen Mapping)：这一阶段是不可配置和编程的，它负责把每个图元的坐标转换到屏幕坐标系中。<br />\n<span class=\"label info\">光栅化阶段</span></li>\n<li>三角形设置 (Triangle Setup)：固定函数 (Fixed-Function) 的阶段。</li>\n<li>三角形遍历 (Triangle Traversal)：固定函数 (Fixed-Function) 的阶段。</li>\n<li>片元着色器 (Fragment Shader)：完全可编程，它用于实现逐片元 (Per-Fragment) 的着色操作。</li>\n<li>逐片元操作 (Per-FragmentOperations)：负责执行很多重要的操作，例如修改颜色、深度缓冲、进行混合等，它不是可编程的，但具有很高的可配置性。</li>\n</ul>\n<p>接下来将对主要的流水线进行更详细的解释。</p>\n<h2 id=\"顶点着色器\"><a class=\"anchor\" href=\"#顶点着色器\">#</a> 顶点着色器</h2>\n<p>顶点着色器 (Vertex Shader) 是流水线的第一个阶段，它的输入来自于 CPU。顶点着色器的处理单位是顶点，输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或者销毁任何顶点，而且无法得到顶点与顶点之间的关系。例如，我们无法得知两个顶点是否属于同一个三角网格。但正是因为这样的相互独立性，GPU 可以利用本身的特性并行化处理每一个顶点，这意味着这一阶段的处理速度会很快。<br />\n顶点着色器需要完成的工作主要有：坐标变换和逐顶点光照。除此以外，还包括后续阶段所需的其他数据（例如：顶点的颜色）。</p>\n<p>坐标变换：把顶点坐标从模型空间转换到齐次裁剪空间。顶点着色器可以在这一步中改变顶点的位置，这在顶点动画中是非常有用的。例如，我们可以通过改变顶点位置来模拟水面、布料等。这个坐标在输出后会在硬件中做进一步处理（在硬件中做透视除法，最终得到归一化的设备坐标）。</p>\n<p>OpenGL 和 Unity 使用相同的归一化的设备坐标 (Normalized Device Coordinates, NDC)，NDC 是以一个立方体为基础的，它的 z 分量范围在 [-1, 1] 之间，而在 DirectX 中，NDC 的 z 分量范围是 [0, 1]。顶点着色器可以有不同的输出方式。最常见的输出路径是经光栅化后交给片元着色器进行处理。而在现代的 Shader Model 中，它还可以把数据发送给曲面细分着色器或几何着色器。</p>\n<h2 id=\"裁剪\"><a class=\"anchor\" href=\"#裁剪\">#</a> 裁剪</h2>\n<p>裁剪 (Clipping) 是为将那些不在摄像机视野内的顶点裁剪掉。<br />\n一个图元和摄像机视野的关系有 3 种：完全在视野内、部分在视野内、完全在视野外。</p>\n<ul>\n<li>完全在视野内的图元就继续传递给下一个流水线阶段（在视野范围内但被遮挡的物体也会传递）</li>\n<li>完全在视野外的图元不会继续向下传递，因为它们不需要被渲染。</li>\n<li>部分在视野内的图元需要进行处理，这就是裁剪。例如，一条线段的一个顶点在视野内，而另一个顶点不在视野内，那么在视野外部的顶点应该使用一个新的顶点来代替，这个新的顶点位于这条线段和视野边界的交点处。</li>\n</ul>\n<div class=\"note info\">\n<p>在这一阶段中，Unity 引擎会执行遮挡剔除技术，以确定哪些物体被其他物体遮挡，从而决定在渲染过程中是否需要对它们进行渲染。</p>\n</div>\n<h2 id=\"屏幕映射\"><a class=\"anchor\" href=\"#屏幕映射\">#</a> 屏幕映射</h2>\n<p>屏幕映射 (Sereen Mapping) 的任务是把每个图元的 x 和 y 坐标转换到屏幕坐标系 (Sereen Coordinates) 下。屏幕映射得到的屏幕坐标决定了这个顶点对应屏幕上哪个像素以及距离这个像素有多远。这一步输入的坐标仍然是三维坐标系下的坐标 (范围在单位立方体内)。屏幕坐标系是个二维坐标系，它和我们用于显示画面的分辨率有很大关系。<br />\n屏幕映射的过程实际是一个缩放的过程。屏幕坐标系和 z 坐标一起构成了一个坐标系，叫做窗口坐标系 (Window Coordinates)。这些值都会传递到光栅化阶段。<br />\n屏幕坐标系在 OpenGL 和 DirectX 之间的差异问题：OpenGL 把屏幕的左下角当成最小的窗口坐标值（右上角为最大值），而 DirectX 则定义了屏幕的左上角为最小的窗口坐标值（右下角为最大值）。</p>\n<h2 id=\"三角形设置\"><a class=\"anchor\" href=\"#三角形设置\">#</a> 三角形设置</h2>\n<p>从上一个阶段输出的信息是屏幕坐标系下的顶点位置以及和它们相关的额外信息，如深度值 (z 坐标)、法线方向、视角方向等。光栅化阶段有两个最重要的目标：计算每个图元覆盖了哪些像素，以及为这些像素计算它们的颜色。<br />\n光栅化的第一个流水线阶段是三角形设置 (Triangle Setup)。这个阶段会计算光栅化一个三角网格所需的信息。具体来说，上一个阶段输出的都是三角网格的顶点，即我们得到的是三角网格每条边的两个端点。但如果要得到整个三角网格对像素的覆盖情况，我们就必须计算每条边上的像素坐标。为了能够计算边界像素的坐标信息，我们就需要得到三角形边界的表示方式。这样一个计算三角网格表示数据的过程就叫做三角形设置。它的输出是为了给下一个阶段做准备。</p>\n<h2 id=\"三角形遍历\"><a class=\"anchor\" href=\"#三角形遍历\">#</a> 三角形遍历</h2>\n<p>三角形遍历 (Triangle Traversal) 阶段将会检查每个像素是否被一个三角网格所覆盖。如果被覆盖的话，就会生成一个片元 (fragment)。而这样一个找到哪些像素被三角网格覆盖的过程就是三角形遍历，这个阶段也被称为扫描变换 (Scan Conversion)。<br />\n三角形遍历阶段会根据上一个阶段的计算结果来判断一个三角网格覆盖了哪些像素，并使用三角网格 3 个顶点的顶点信息对整个覆盖区域的像素进行插值。对应像素会生成一个片元。<br />\n这一步的输出就是得到一个片元序列。一个片元并不是真正意义上的像素，而是包含了很多状态的集合，这些状态用于计算每个像素的最终颜色。这些状态包括了 (但不限于) 它的屏幕坐标、深度信息，以及其他从几何阶段输出的顶点信息，例如：法线、纹理坐标等。</p>\n<h2 id=\"片元着色器\"><a class=\"anchor\" href=\"#片元着色器\">#</a> 片元着色器</h2>\n<p>片元着色器 (Fragment Shader) 是另一个非常重要的可编程着色器阶段。在 DirectX 中，片元着色器被称为像素着色器 (Pixel Shader)，但片元着色器是一个更合适的名字，因为此时的片元并不是一个真正意义上的像素。<br />\n这一阶段可以完成很多重要的渲染技术，其中最重要的技术之一就是纹理采样。为了在片元着色器中进行纹理采样，我们通常会在顶点着色器阶段输出每个顶点对应的纹理坐标，然后经过光栅化阶段对三角网格的 3 个顶点对应的纹理坐标进行插值后，就可以得到其覆盖的片元的纹理坐标。<br />\n一般情况下，片元着色器仅能影响单个片元，不能将任何结果发送给它的邻居们。有一个例外情况：片元着色器可以访问到导数信息。</p>\n<h2 id=\"逐片元操作\"><a class=\"anchor\" href=\"#逐片元操作\">#</a> 逐片元操作</h2>\n<p>逐片元操作 (Pe-Fragment Operations) 是 OpenGL 中的说法，在 DirecX 中，这一阶段被称为输出合并阶段 (Output-Merger)。Merger 这个词可能更容易让读者明白这一步骤的目的：合并。而 OpenGL 中的名字可以让读者明白这个阶段的操作单位，即是对每一个片元进行一些操作。逐片元操作阶段是高度可配置性的，我们可以设置每一步的操作细节。<br />\n这一阶段的主要任务：决定每个片元的可见性，这涉及了很多测试工作（例如深度测试、模板测试等）。如果一个片元通过了所有的测试，就需要把这个片元的颜色值和已经存储在颜色缓冲区中的颜色进行合并，或者说是混合。如果一个片元没有通过测试，那么它就会被舍弃，这就导致之前那么多的工作都白费了。</p>\n<p>Unity 给出的渲染流水线中，它的深度测试是在片元着色器之前的（Early-Z 技术）这样就可以提前知道那些片元是被舍弃的，从而减少性能浪费（提前进行测试的检验结果可能与片元着色器中的一些操作冲突）。</p>\n<p>测试的过程非常复杂，而且不同的图形学接口的实现细节也不尽相同。</p>\n<p>当模型的图元经过了上面层层计算和测试后，就会显示到我们的屏幕上。我们的屏幕显示的就是颜色缓冲区中的颜色值。但是，为了避免我们看到那些正在进行光栅化的图元，GPU 会使用双重缓冲 (Double Buffering) 的策略。这意味着，对场景的渲染是在幕后发生的，即在后置缓冲 (Back Buffer) 中。一旦场景已经被渲染到了后置缓冲中，GPU 就会交换后置缓冲区和前置缓冲 (Front Buffer) 中的内容，而前置缓冲区是之前显示在屏幕上的图像。由此，保证了我们看到的图像总是连续的。</p>\n<h1 id=\"一些常见的概念\"><a class=\"anchor\" href=\"#一些常见的概念\">#</a> 一些常见的概念</h1>\n<h2 id=\"opengl和directx\"><a class=\"anchor\" href=\"#opengl和directx\">#</a> OpenGL 和 DirectX</h2>\n<p>是图像应用编程接口。应用程序向接口发送渲染命令，这些接口会依次向显卡驱动发送渲染命令，显卡驱动将命令翻译成 GPU 能看懂的语言，同时也负责吧纹理等数据转换成 GPU 所支持的格式。</p>\n<h2 id=\"hlsl-glsl-cg-il\"><a class=\"anchor\" href=\"#hlsl-glsl-cg-il\">#</a> HLSL、GLSL、CG、IL</h2>\n<ul>\n<li>HLSL(High Level Shading Language)<br />\n 微软的 DirectX 的专用语言。微软提供着色器的编译，不同平台的编译结果一致，但是 HLSL 仅能在微软自己的产品中使用。</li>\n<li>GLSL(OpenGL Shading Language)<br />\n 跨平台语言，可以在很多平台上运行。但是这种跨平台性是由于 OpenGL 没有提供着色器编译器，而是由显卡驱动来完成着色器的编译工作。好处在于供应商可以发挥出显卡的最大作用，但这也意味着 GLSL 的编译结果将取决于供应商，这可能会导致编译结果不一致。</li>\n<li>CG(C for Graphic)<br />\n NVIDIA 提供的语言，真正的跨平台语言。它会根据不同的平台编译成相应的中间语言。CG 语言的跨平台性很大原因取决于与微软的合作，这也导致 CG 语言的语法和 HLSL 很像，CG 可以无缝移植 HLSL 代码。缺点是可能无法完全发挥出 OpenGL 的特性。</li>\n<li>IL(Intermediate Language)<br />\n 汇编语言，也称为中间语言</li>\n</ul>\n<p>在 Unity Shader 中可以使用这三种语言，但是尽管语法几乎一样，这些语言并非完全对应。例如：有些 CG 语法在 Unity Shader 中是不支持的。</p>\n<h2 id=\"draw-call\"><a class=\"anchor\" href=\"#draw-call\">#</a> Draw Call</h2>\n<p>Draw Call 就是 CPU 调用图像编程接口，例如：OpenGL 中的 glDrawElements 或者 DirectX 中的 DrawIndexedPrimitive 命令，以命令 GPU 进行渲染的操作。</p>\n<ul>\n<li>性能问题的元凶<br />\n Draw Call 中造成性能问题的是 CPU</li>\n<li>CPU 和 GPU 的并行工作<br />\n在 CPU 和 GPU 的并行工作中，有一个命令缓冲区，其中包含一个命令队列，命令缓冲区中的命令有很多种，Draw Call 是其中之一，还有改变渲染状态、改变着色器等。GPU 处理命令的速度要快于 CPU 发送命令的速度。</li>\n<li>Draw Call 为什么会影响帧率<br />\n在每次调用 DrawCall 之前，CPU 需要向 GPU 发送很多内容，包括数据、状态和命令等。在这一阶段，CPU 需要完成很多工作，例如检查渲染状态等。而一旦 CPU 完成了这些准备工作，GPU 就可以开始本次的渲染。GPU 的渲染速度往往快于 CPU 提交命令的速度。如果 Draw Call 的数量太多，CPU 就会把大量时间花费在提交 Draw Call 上，造成 CPU 的过载。</li>\n<li>减少 Draw Call<br />\n 减少 Draw Call 的方法有很多，本篇仅讨论批处理技术。<br />\n批处理技术用于优化渲染性能，通过减少渲染调用的次数来提高游戏的运行效率。CPU 每次调用渲染前都需要准备大量的数据（除了物体本身的数据以外，还有很多额外的操作），多次重复这一过程会带来很大的性能消耗，所以，将一些物体合并到一起处理，然后再调用渲染，这样就会提高效率。</li>\n</ul>\n<h2 id=\"固定管线渲染\"><a class=\"anchor\" href=\"#固定管线渲染\">#</a> 固定管线渲染</h2>\n<p>固定函数的流水线，这是仅在一些很旧的 GPU 上才有渲染流水线，这种流水线仅可进行一些配置，不可编程，现代 GPU 已经完全舍弃了这种流水线。</p>\n<h1 id=\"什么是-shader\"><a class=\"anchor\" href=\"#什么是-shader\">#</a> 什么是 Shader</h1>\n<p>Shader 所在的阶段就是渲染流水线的一部分，Shader 就是:</p>\n<ul>\n<li>GPU 流水线上些可高度编程的阶段，而由着色器编译出来的最终代码是会在 GPU 上运行的（对于固定管线的渲染来说，着色器有时等同于一些特定的渲染设置）</li>\n<li>有一些特定类型的着色器，如顶点着色器、片元着色器等</li>\n<li>依靠着色器我们可以控制流水线中的渲染细节，例如用顶点着色器来进行顶点变换以及传递数据，用片元着色器来进行逐像素的渲染。</li>\n</ul>\n<p>要得到出色的游戏画面是需要包括 Shader 在内的所有渲染流水线阶段的共同参与才可完成：设置适当的渲染状态，使用合适的混合函数，开启还是关闭深度测试 / 深度写入等。</p>\n<p>Unity 为我们提供了一个既可以编写着色器，又可以设置渲染状态的地方: Unity Shader</p>\n",
            "tags": [
                "Unity",
                "UnityShader",
                "UnityShaderBasics",
                "Unity",
                "UnityShader"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/08/21/Unity/UnityToolClass/%E5%8A%A0%E8%BD%BD%E5%9C%BA%E6%99%AF%E7%AE%A1%E7%90%86%E5%99%A8/",
            "url": "https://maikire.xyz/2023/08/21/Unity/UnityToolClass/%E5%8A%A0%E8%BD%BD%E5%9C%BA%E6%99%AF%E7%AE%A1%E7%90%86%E5%99%A8/",
            "title": "加载场景管理器",
            "date_published": "2023-08-21T04:00:00.000Z",
            "content_html": "<h1 id=\"加载场景管理器\"><a class=\"anchor\" href=\"#加载场景管理器\">#</a> 加载场景管理器</h1>\n<p>用于处理加载场景的工具类。</p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<ul>\n<li>异步加载过渡场景</li>\n<li>异步加载目标场景，提供加载进度</li>\n<li>使用<a href=\"https://maikire.xyz/2023/03/28/Unity/UnityBasics/%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8F%EF%BC%88Coroutine%EF%BC%89/index.html?_sw-precache=d060f45b33b430b6223216856696d275\">协程</a>等待异步加载</li>\n<li>使用<a href=\"https://maikire.xyz/2023/03/24/DesignPatterns/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/index.html?_sw-precache=31292d0f3870b2f46918b04a4d281165\">单例模式</a>确保只有一个实例</li>\n</ul>\n<p><span class=\"label primary\">代码如下：</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>SceneManagement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Common</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// 加载场景管理器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadSceneManger</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoSingleton<span class=\"token punctuation\">&lt;</span>LoadSceneManger<span class=\"token punctuation\">></span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 异步加载</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>AsyncOperation<span class=\"token punctuation\">></span></span> operations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// 加载进度</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">float</span></span> LoadProgress</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">get</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operations<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>progress <span class=\"token operator\">/</span> <span class=\"token number\">0.9f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token function\">DontDestroyOnLoad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            operations <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>AsyncOperation<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/// 加载场景</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/// 请确保 sceneName [0] 是主场景</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"sceneName\"> 场景名称 & lt;/param></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> sceneName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sceneName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> sceneName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            operations<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">ToLoadScene</span><span class=\"token punctuation\">(</span>sceneName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">/// 加载过度场景</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">LoadTransitionScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> SceneManager<span class=\"token punctuation\">.</span><span class=\"token function\">LoadSceneAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TransitionScene\"</span><span class=\"token punctuation\">,</span> LoadSceneMode<span class=\"token punctuation\">.</span>Single<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">/// ToLoadScene</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"sceneName\">&lt;/param></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">ToLoadScene</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> sceneName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token function\">LoadTransitionScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            operations<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>SceneManager<span class=\"token punctuation\">.</span><span class=\"token function\">LoadSceneAsync</span><span class=\"token punctuation\">(</span>sceneName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> LoadSceneMode<span class=\"token punctuation\">.</span>Single<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token class-name\">AsyncOperation</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sceneName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token keyword\">async</span> <span class=\"token operator\">=</span> SceneManager<span class=\"token punctuation\">.</span><span class=\"token function\">LoadSceneAsync</span><span class=\"token punctuation\">(</span>sceneName<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> LoadSceneMode<span class=\"token punctuation\">.</span>Additive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token keyword\">async</span><span class=\"token punctuation\">.</span>allowSceneActivation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                operations<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">WaitForSingleScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">/// WaitForSingleScene</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">WaitForSingleScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>operations<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> operations<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                operations<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>allowSceneActivation <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Unity",
                "UnityToolClass",
                "Unity"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/08/14/Unity/UnityToolClass/Sqlite%E5%8A%A9%E6%89%8B/",
            "url": "https://maikire.xyz/2023/08/14/Unity/UnityToolClass/Sqlite%E5%8A%A9%E6%89%8B/",
            "title": "Sqlite助手",
            "date_published": "2023-08-14T05:00:00.000Z",
            "content_html": "<h1 id=\"sqlite助手\"><a class=\"anchor\" href=\"#sqlite助手\">#</a> Sqlite 助手</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93YXJsLnRvcC9wb3N0cy91bml0eS1zcWxpdGUv\">这篇文章</span>介绍了如何在 Unity 中使用 Sqlite</li>\n<li>Sqlite 助手是对 Sqlite 数据库语言的封装，使用者可以绕过数据库语言，用更简单的方法操作数据库</li>\n<li>路径问题：\n<ul>\n<li>数据库文件（.db）应该放到 StreamingAssets 文件夹中</li>\n<li>向 Sqlite 助手提供 StreamingAssets 中的路径，Sqlite 助手利用<a href=\"https://maikire.xyz/2023/08/14/Unity/UnityToolClass/%E8%B7%AF%E5%BE%84%E5%8A%A9%E6%89%8B/index.html?_sw-precache=c6e6e965670713189d04ee51f670d71d\">路径助手</a>处理路径</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Mono<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>Sqlite</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Common</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// Sqlite 助手</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SqliteHelper</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 数据库连接</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqliteConnection</span> dbConnection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// 数据库命令</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqliteCommand</span> dbCommand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/// 数据读取器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqliteDataReader</span> reader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/// 字符串构建器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringBuilder</span> strBuilder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">SqliteHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            strBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">/// 创建数据库并连接，如果存在数据库，则直接连接。 path=StreamingAssets 中的路径</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">SqliteHelper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            strBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/// 打开数据库</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OpenDB</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URI=file:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>PathHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                dbConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteConnection</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                dbConnection<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">/// 关闭数据库</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CloseSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            dbCommand<span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            dbCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            reader<span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            reader <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            dbConnection<span class=\"token punctuation\">?.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            dbConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">/// 执行命令</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sqlQuery<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            dbCommand <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            dbCommand<span class=\"token punctuation\">.</span>CommandText <span class=\"token operator\">=</span> sqlQuery<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            reader <span class=\"token operator\">=</span> dbCommand<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">/// 批量提交命令</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BatchSubmitCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sqlCommand<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            dbCommand <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token class-name\">SqliteTransaction</span> transaction <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">.</span><span class=\"token function\">BeginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            dbCommand<span class=\"token punctuation\">.</span>CommandText <span class=\"token operator\">=</span> sqlCommand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            dbCommand<span class=\"token punctuation\">.</span>Transaction <span class=\"token operator\">=</span> transaction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            dbCommand<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNonQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            transaction<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token comment\">/// 查询表中全部数据 param tableName = 表名 </span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">ReadFullTable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token comment\">/// 插入数据 param tableName = 表名 values = 插入数据内容</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">InsertInto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> values<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" VALUES (\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token comment\">/// 插入数据 param tableName = 表名 cols = 插入字段 value = 插入内容</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">InsertInto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cols<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> values<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">!=</span> values<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"columns.Length != values.Length\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cols<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\") VALUES (\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token comment\">/// 更新数据 param tableName = 表名 selectkey = 查找字段（主键) selectvalue = 查找内容 cols = 更新字段 colsvalues = 更新内容</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">UpdateInto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> selectkey<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> selectvalue<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cols<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> colsvalues<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UPDATE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" SET \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>colsvalues<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> colsvalues<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>colsvalues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" WHERE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>selectkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>selectvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token comment\">/// 删除数据 param tableName = 表名 cols = 字段 colsvalues = 内容</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cols<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> colsvalues<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" WHERE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>colsvalues<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> colsvalues<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" or \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>colsvalues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token comment\">/// 删除表中全部数据</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">DeleteContents</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token comment\">/// 创建表 param tableName = 表名 col = 字段名 colType = 字段类型 primaryKey_FirstField = 第一个字段是否是主键</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">CreateTable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> col<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> colType<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> primaryKey_FirstField<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">!=</span> colType<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The number of fields is not the same as the number of field types\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATE TABLE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" (\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>colType<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>primaryKey_FirstField<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" PRIMARY KEY NOT NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>colType<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>        <span class=\"token comment\">/// 按条件查询数据 param tableName = 表名 items = 查询字段 col = 查询依据 operation = 运算符 values = 查询值 isAnd=（true: And false: Or）</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">SelectWhere</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> items<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> col<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> operation<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> values<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isAnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">!=</span> operation<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">||</span> operation<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">!=</span> values<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"col.Length != operation.Length != values.Length\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>                strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" WHERE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"' \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AND \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"' \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> col<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OR \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>                    strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"' \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>        <span class=\"token comment\">/// 查询表 tableName = 表名 col = 查询依据</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> col<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>        <span class=\"token comment\">/// 查询表 tableName = 表名 col = 查询依据 values = 查询值</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> col<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> values<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" WHERE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>        <span class=\"token comment\">/// 查询表 tableName = 表名 col = 查询依据 operation = 运算符 values = 查询值</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> col<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> operation<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> values<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" WHERE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>        <span class=\"token comment\">/// 升序查询 tableName = 表名 col = 查询依据</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">SelectOrderASC</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> col<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ORDER BY \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ASC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>        <span class=\"token comment\">/// 降序查询 tableName = 表名 col = 查询依据</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">SelectOrderDESC</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> col<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ORDER BY \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" DESC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>        <span class=\"token comment\">/// 查询表行数 tableName = 表名</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">SelectCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT COUNT(*) FROM \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre>        <span class=\"token comment\">/// 查询所有表的名称</span></pre></td></tr><tr><td data-num=\"441\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">SelectTableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre></pre></td></tr><tr><td data-num=\"446\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT name FROM sqlite_master WHERE type='table'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"447\"></td><td><pre></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>        <span class=\"token comment\">/// 查询表的信息 tableName = 表名</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqliteDataReader</span> <span class=\"token function\">SelectTableInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tableName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"457\"></td><td><pre></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PRAGMA table_info(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>            strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>strBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h1>\n<ul>\n<li>注意：在插入或更新数据时，对于字符串类型的数据必须添加单引号（原因：数据库语言中的字符串使用单引号），例：&quot;' 数据_001'&quot;</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Common</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">Mono<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>Sqlite</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Default</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// SQLiteTest</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SQLiteTest</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Path <span class=\"token operator\">=</span> <span class=\"token string\">\"/DB/Test.db\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// 数据库助手</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqliteHelper</span> DB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/// 读取到的数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreateTable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token function\">CreateTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InsertDate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token function\">InsertData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UpdateDB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DeleteDate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token function\">DeleteData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SelectData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token function\">SelectData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">/// 创建数据库并连接。</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">/// 如果存在数据库，则直接连接</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            DB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteHelper</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">/// 创建表</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// 连接</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token function\">CreateDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表名</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> col <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lv\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字段名</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> colType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"int\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字段类型</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">CreateTable</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> colType<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 关闭连接</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">CloseSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">/// 插入数据</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InsertData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token function\">CreateDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 插入一行数据</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">InsertInto</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'Test_0'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">InsertInto</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'Test_1'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">InsertInto</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'Test_2'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">InsertInto</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'Test_3'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"30\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">InsertInto</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'Test_4'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"40\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            Data <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">CloseSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">/// 更新数据</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UpdateData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token function\">CreateDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">UpdateInto</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lv\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"'Test_00'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"100\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            Data <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">CloseSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">/// 删除数据</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DeleteData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token function\">CreateDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token comment\">// 删除某些数据</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token comment\">//DB.Delete(\"Role\", new string[] &#123; \"id\" &#125;, new string[] &#123; \"0\" &#125;);</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token comment\">// 删除表中全部数据</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteContents</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            Data <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">CloseSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token comment\">/// 查询数据</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SelectData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token function\">CreateDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token class-name\">SqliteDataReader</span> reader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token comment\">// 查询指定的数据</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token comment\">//reader = DB.SelectWhere(</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            <span class=\"token comment\">//    \"Role\",</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token comment\">//    new string[] &#123; \"name\", \"lv\" &#125;,</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token comment\">//    new string[] &#123; \"id\", \"id\" &#125;,</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token comment\">//    new string[] &#123; \"=\", \"=\" &#125;,</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token comment\">//    new string[] &#123; \"1\", \"2\" &#125;,</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token comment\">//    false);</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token comment\">// 查询一行</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token comment\">//reader = DB.Select(\"Role\", \"id\", \"1\");</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token comment\">//reader = DB.Select(\"Role\", \"id\", \">=\", \"1\");</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token comment\">// 查询全部数据</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            reader <span class=\"token operator\">=</span> DB<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFullTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token comment\">// 降序查询</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token comment\">//reader = DB.SelectOrderDESC(\"Role\", \"id\");</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token comment\">//reader.Read () 会读取一行，反复调用可以读取多行</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> lv <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                Data <span class=\"token operator\">+=</span> <span class=\"token string\">\"name: \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nlv: \"</span> <span class=\"token operator\">+</span> lv <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            DB<span class=\"token punctuation\">.</span><span class=\"token function\">CloseSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Unity",
                "UnityToolClass",
                "Unity"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/08/14/Unity/UnityToolClass/%E8%B7%AF%E5%BE%84%E5%8A%A9%E6%89%8B/",
            "url": "https://maikire.xyz/2023/08/14/Unity/UnityToolClass/%E8%B7%AF%E5%BE%84%E5%8A%A9%E6%89%8B/",
            "title": "路径助手",
            "date_published": "2023-08-14T03:00:00.000Z",
            "content_html": "<h1 id=\"路径助手\"><a class=\"anchor\" href=\"#路径助手\">#</a> 路径助手</h1>\n<ul>\n<li>分平台处理 StreamingAssets 路径</li>\n<li>Application.streamingAssetsPath 会根据不同的平台返回对应的 StreamingAssets 目录，这是最常用的方法，也可以使用 Unity 宏标签手动分平台，在下面的代码中会做出演示。</li>\n<li>只有 PC 端的 StreamingAssets 文件夹是可读写的，其他平台都是只读的（.txt 文件可以直接读，其他类型的文件需要进一步操作）。\n<ul>\n<li>移动端（Android、iOS 等）：想要读写这些文件，需要将 StreamingAssets 文件夹中的内容拷贝到持久化路径 Application.persistentDataPath（Unity 外部目录），这个路径可以在运行时进行读写操作。</li>\n<li>Web 端：无法写入。</li>\n</ul>\n</li>\n<li>注意：如果 StreamingAssets 下的文件很多，应该单独处理他们（例：在第一次进入游戏时完成文件的复制、在游戏的加载场景（过渡场景、动画等）中完成文件的复制）</li>\n</ul>\n<p><span class=\"label info\">按需加载</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Networking</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Common</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// 路径助手（按需加载）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PathHelper</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/// 手动分平台处理 StreamingAssets 路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"path\">StreamingAssets 中的路径 & lt;/param></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token function\">Obsolete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use GetPath instead\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">HandlePath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> localPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> 分平台判断路径</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 这样写 性能不好</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">//if (Application.platform == RuntimePlatform.Android)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">//    localPath = Application.streamingAssetsPath + \"/\" + path;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//else</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">//    localPath = \"file://\" + Application.streamingAssetsPath + \"/\" + path;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 性能更高的写法，使用 Unity 宏标签</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 不同的平台会拥有不同的代码（如果发布到安卓平台，就只有第三段代码，其他的代码不会打包带走）</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">//Application.dataPath 会定位到 Assets 目录</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//Application.streamingAssetsPath 会根据不同的平台返回对应的 StreamingAssets 目录，一般情况下使用这个即可</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_EDITOR || UNITY_STANDALONE</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            localPath <span class=\"token operator\">=</span> <span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> Application<span class=\"token punctuation\">.</span>dataPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/StreamingAssets/\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_IOS</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            localPath <span class=\"token operator\">=</span> <span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> Application<span class=\"token punctuation\">.</span>dataPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/Raw/\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span> UNITY_ANDROID</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            localPath <span class=\"token operator\">=</span> <span class=\"token string\">\"jar:file://\"</span> <span class=\"token operator\">+</span> Application<span class=\"token punctuation\">.</span>dataPath <span class=\"token operator\">+</span> <span class=\"token string\">\"!/assets/\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            localPath <span class=\"token operator\">=</span> <span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> Application<span class=\"token punctuation\">.</span>streamingAssetsPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">return</span> localPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/// 分平台处理 StreamingAssets 路径</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"path\">StreamingAssets 中的路径 & lt;/param></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_ANDROID || UNITY_IOS</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> resPath <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span>persistentDataPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>resPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token function\">CopyFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">return</span> resPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">return</span> Application<span class=\"token punctuation\">.</span>streamingAssetsPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">/// 将 StreamingAssets 中的文件拷贝到持久化路径中 path=StreamingAssets 中的路径</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CopyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 获取 StreamingAssets 路径</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">// 创建 UnityWebRequest 对象</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token class-name\">UnityWebRequest</span> www <span class=\"token operator\">=</span> UnityWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">.</span>streamingAssetsPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">// 发送请求并等待返回</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">// 如果不是静态方法，可以使用协程，但是协程会影响其他方法的调用，所以不建议使用</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">//yield return www.SendWebRequest();</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            www<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>www<span class=\"token punctuation\">.</span>isDone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>www<span class=\"token punctuation\">.</span>result <span class=\"token operator\">!=</span> UnityWebRequest<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拷贝文件出错：\"</span> <span class=\"token operator\">+</span> www<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token comment\">// 创建路径（如果不存在）</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                Directory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">.</span>persistentDataPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">LastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token comment\">// 写入文件</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllBytes</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">.</span>persistentDataPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">,</span> www<span class=\"token punctuation\">.</span>downloadHandler<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label info\">优先全部加载（单例模式）</span></p>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Networking</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Common</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// 路径助手（优先全部加载）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PathHelperPriority</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoSingleton<span class=\"token punctuation\">&lt;</span>PathHelperPriority<span class=\"token punctuation\">></span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_ANDROID || </span><span class=\"token return-type class-name\">UNITY_IOS</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/// 分平台处理 StreamingAssets 路径</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"path\">StreamingAssets 中的路径 & lt;/param></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/// &lt;returns>&lt;/returns></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_ANDROID || UNITY_IOS</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> Application<span class=\"token punctuation\">.</span>persistentDataPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> Application<span class=\"token punctuation\">.</span>streamingAssetsPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/// 获取 StreamingAssets 中所有文件路径</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">GetFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourcePath <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span>streamingAssetsPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destinationPath <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span>persistentDataPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 选取需要拷贝的文件</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> filePaths <span class=\"token operator\">=</span> Directory<span class=\"token punctuation\">.</span><span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span>sourcePath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> SearchOption<span class=\"token punctuation\">.</span>AllDirectories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token function\">Where</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    file <span class=\"token operator\">=></span> file<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    file<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    file<span class=\"token punctuation\">.</span><span class=\"token function\">EndsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> filePath <span class=\"token keyword\">in</span> filePaths<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> relativePath <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>sourcePath<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destFilePath <span class=\"token operator\">=</span> destinationPath <span class=\"token operator\">+</span> relativePath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// 如果文件已存在，则跳过</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>destFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token function\">CopyFile</span><span class=\"token punctuation\">(</span>relativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">/// 将 StreamingAssets 中的文件拷贝到持久化路径中 path=StreamingAssets 中的路径</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">CopyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 获取 StreamingAssets 路径</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">// 创建 UnityWebRequest 对象</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token class-name\">UnityWebRequest</span> www <span class=\"token operator\">=</span> UnityWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">.</span>streamingAssetsPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 发送请求并等待返回</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> www<span class=\"token punctuation\">.</span><span class=\"token function\">SendWebRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>www<span class=\"token punctuation\">.</span>result <span class=\"token operator\">!=</span> UnityWebRequest<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">.</span>Success<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拷贝文件出错：\"</span> <span class=\"token operator\">+</span> www<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token comment\">// 创建路径（如果不存在）</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                Directory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectory</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">.</span>persistentDataPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">LastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token comment\">// 写入文件</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllBytes</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">.</span>persistentDataPath <span class=\"token operator\">+</span> path<span class=\"token punctuation\">,</span> www<span class=\"token punctuation\">.</span>downloadHandler<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Unity",
                "UnityToolClass",
                "Unity"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/08/07/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/XML/",
            "url": "https://maikire.xyz/2023/08/07/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/XML/",
            "title": "XML",
            "date_published": "2023-08-07T08:00:00.000Z",
            "content_html": "<h1 id=\"xml\"><a class=\"anchor\" href=\"#xml\">#</a> XML</h1>\n<ul>\n<li>XML 指的是可扩展标记语言（eXtensible Markup Language）</li>\n<li>XML 被设计用来传输和存储数据，其焦点是数据的内容。HTML 则用来表现数据，其焦点是数据的外观。</li>\n<li>XML 在 Web 中起到的作用接近于 HTML。XML 是各种应用程序之间进行数据传输的最常用的工具。</li>\n<li>XML 数据能够存储在独立的.xml 文件中。</li>\n<li>XML 是独立于软件和硬件的信息传输工具。</li>\n</ul>\n<h1 id=\"xml的用途\"><a class=\"anchor\" href=\"#xml的用途\">#</a> XML 的用途</h1>\n<ul>\n<li>XML 规定了文本的编辑格式，统一格式可以简化数据共享、简化数据传输、简化平台变更</li>\n<li>XML 可以分离数据和其它逻辑（例：更改某个数值时，不需要更改源码，只需要更改 XML 文件中的记录即可）</li>\n</ul>\n<h1 id=\"xml树结构\"><a class=\"anchor\" href=\"#xml树结构\">#</a> XML 树结构</h1>\n<ul>\n<li>XML 将数据组织成为一棵树，它从 “根部” 开始，扩展到 “枝叶”。</li>\n<li>利用缩进表示层级关系</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>所有的节点均以<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>开头，以<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>结尾</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>  XML声明。它声明XML的版本（1.0）和所使用的编码（UTF-8）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root_CharacterTemplateData</span><span class=\"token punctuation\">></span></span>  根节点。xml必须包含根节点，该节点是所有其他节点的父节点。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CharacterTemplateData</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  子节点，id和name是子节点的属性</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>JobID</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>JobID</span><span class=\"token punctuation\">></span></span>  子节点的子节点，1 是节点值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>JobMode</span><span class=\"token punctuation\">></span></span>none<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>JobMode</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InitForce</span><span class=\"token punctuation\">></span></span>1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InitForce</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CharacterTemplateData</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root_CharacterTemplateData</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"xml语法\"><a class=\"anchor\" href=\"#xml语法\">#</a> XML 语法</h1>\n<h2 id=\"版本和编码的信息可以省略\"><a class=\"anchor\" href=\"#版本和编码的信息可以省略\">#</a> 版本和编码的信息可以省略</h2>\n<ul>\n<li>默认编码是：UTF-8</li>\n<li>UTF-8 也是 HTML5, CSS, JavaScript, PHP, 和 SQL 的默认编码。</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr></table></figure><h2 id=\"所有的xml元素都必须有一个关闭标签\"><a class=\"anchor\" href=\"#所有的xml元素都必须有一个关闭标签\">#</a> 所有的 XML 元素都必须有一个关闭标签</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>所有的节点均以<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>开头，以<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>结尾</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"xml必须包含根节点该节点是所有其他节点的父节点\"><a class=\"anchor\" href=\"#xml必须包含根节点该节点是所有其他节点的父节点\">#</a> xml 必须包含根节点，该节点是所有其他节点的父节点</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root是根节点</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>child</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"大小写敏感\"><a class=\"anchor\" href=\"#大小写敏感\">#</a> 大小写敏感</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>以下二者是不同的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Name</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Name</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"必须正确嵌套\"><a class=\"anchor\" href=\"#必须正确嵌套\">#</a> 必须正确嵌套</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>Test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>  正确嵌套</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>Test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>  这是错误的</pre></td></tr></table></figure><h2 id=\"属性值必须加引号\"><a class=\"anchor\" href=\"#属性值必须加引号\">#</a> 属性值必须加引号</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Test</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Test</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"特殊符号\"><a class=\"anchor\" href=\"#特殊符号\">#</a> 特殊符号</h2>\n<ul>\n<li>xml 中有一些特殊符号不能直接使用</li>\n<li>使用预定义符号代替这些特殊符号</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>预定义符号</th>\n<th>特殊符号</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;lt;</td>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&amp;gt;</td>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&amp;amp;</td>\n<td>&amp;</td>\n<td>与</td>\n</tr>\n<tr>\n<td>&amp;apos;</td>\n<td>'</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>&amp;quot;</td>\n<td>&quot;</td>\n<td>双引号</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"xml中的注释\"><a class=\"anchor\" href=\"#xml中的注释\">#</a> XML 中的注释</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- annotate --></span></pre></td></tr></table></figure><h2 id=\"在xml中空格会被保留\"><a class=\"anchor\" href=\"#在xml中空格会被保留\">#</a> 在 XML 中，空格会被保留</h2>\n<ul>\n<li>XML 文档中的空格不会被删减</li>\n<li>HTML 会把多个连续的空格字符裁减（合并）为一个</li>\n</ul>\n<h1 id=\"xml元素\"><a class=\"anchor\" href=\"#xml元素\">#</a> XML 元素</h1>\n<p>XML 元素指的是从开始标签到结束标签的部分（包括开始标签和结束标签）</p>\n<p><span class=\"label info\">XML 元素可以包含一下内容</span></p>\n<ul>\n<li>其他元素内容</li>\n<li>属性</li>\n<li>文本内容</li>\n</ul>\n<p><span class=\"label info\">XML 命名规则</span></p>\n<ul>\n<li>名称可以包含字母、数字以及其他的字符</li>\n<li>名称不能以数字或者标点符号开始</li>\n<li>名称不能以字母 xml（或者 XML、Xml 等等）开始</li>\n<li>名称不能包含空格</li>\n<li>名称不能直接使用 xml 特殊符号（如：“&lt;”）</li>\n<li>名称应避免使用某些符号（如：“-”、“.”、“:”），它们在不同的软件中可能会有不同的定义</li>\n</ul>\n<h1 id=\"xml属性\"><a class=\"anchor\" href=\"#xml属性\">#</a> XML 属性</h1>\n<p>属性提供有关元素的额外信息（例如：ID 属性用于标识 XML 元素）。没有什么规矩可以告诉我们什么时候使用属性，什么时候使用元素。因为属性难以阅读和维护，所以应该避免使用它。如果信息看起来像是数据，那就使用元素吧。</p>\n<h1 id=\"使用csharp创建-更改-读取xml\"><a class=\"anchor\" href=\"#使用csharp创建-更改-读取xml\">#</a> 使用 CSharp 创建、更改、读取 XML</h1>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Xml</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 文件路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Path <span class=\"token operator\">=</span> <span class=\"token string\">\"C:/Users/25417/Desktop/Test.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/// 创建 XML</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 检查 xml 是否存在，如果没有文件则创建</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file already exists: \"</span> <span class=\"token operator\">+</span> Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 创建 xml 实例</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">XmlDocument</span> xmlDoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 创建根节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> root <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">CreateElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root_CharacterTemplateData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 在 xml 实例中追加根节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">AppendChild</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 创建一级子节点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> elmNew <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">CreateElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CharacterTemplateData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 设置一级子节点的两个属性</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        elmNew<span class=\"token punctuation\">.</span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        elmNew<span class=\"token punctuation\">.</span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 在跟节点中追加一级节点</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">AppendChild</span><span class=\"token punctuation\">(</span>elmNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 创建二级节点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> jobID <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">CreateElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JobID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 设置二级节点值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        jobID<span class=\"token punctuation\">.</span>InnerText <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 在一级节点中追加二级节点</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        elmNew<span class=\"token punctuation\">.</span><span class=\"token function\">AppendChild</span><span class=\"token punctuation\">(</span>jobID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> jobMode <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">CreateElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JobMode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        jobMode<span class=\"token punctuation\">.</span>InnerText <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        elmNew<span class=\"token punctuation\">.</span><span class=\"token function\">AppendChild</span><span class=\"token punctuation\">(</span>jobMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> initForce <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">CreateElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InitForce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        initForce<span class=\"token punctuation\">.</span>InnerText <span class=\"token operator\">=</span> <span class=\"token string\">\"1.1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        elmNew<span class=\"token punctuation\">.</span><span class=\"token function\">AppendChild</span><span class=\"token punctuation\">(</span>initForce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 保存 xml 文件</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/// 添加 XML</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file does not exist: \"</span> <span class=\"token operator\">+</span> Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 创建 xml 实例</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token class-name\">XmlDocument</span> xmlDoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 读取 xml 文件</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// 找到指定的节点</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token class-name\">XmlNode</span> root <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">SelectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root_CharacterTemplateData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> elmNew <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">CreateElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CharacterTest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        elmNew<span class=\"token punctuation\">.</span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">AppendChild</span><span class=\"token punctuation\">(</span>elmNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> elmNew_0 <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">CreateElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CharacterTest_0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        elmNew_0<span class=\"token punctuation\">.</span>InnerText <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        elmNew<span class=\"token punctuation\">.</span><span class=\"token function\">AppendChild</span><span class=\"token punctuation\">(</span>elmNew_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">/// 更改 XML</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ChangeXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file does not exist: \"</span> <span class=\"token operator\">+</span> Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token class-name\">XmlDocument</span> xmlDoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token class-name\">XmlNode</span> root <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">SelectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root_CharacterTemplateData\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">// 遍历并获取 XmlElement 类型的子节点，因为 XmlNode 中没有 SetAttribute () 方法</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XmlElement</span> item <span class=\"token keyword\">in</span> root<span class=\"token punctuation\">.</span>ChildNodes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token comment\">// 更改 XML</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"CharacterTemplateData\"</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                item<span class=\"token punctuation\">.</span><span class=\"token function\">GetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                <span class=\"token comment\">// 更改节点属性</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                item<span class=\"token punctuation\">.</span><span class=\"token function\">SetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token comment\">// 更改子节点值</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token class-name\">XmlNode</span> jobID <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">SelectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JobID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                jobID<span class=\"token punctuation\">.</span>InnerText <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token comment\">// 删除 XML 中的内容</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"CharacterTest\"</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                item<span class=\"token punctuation\">.</span><span class=\"token function\">HasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token comment\">// 删除属性</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                item<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                <span class=\"token comment\">// 删除子节点</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token class-name\">XmlNode</span> test_0 <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">SelectSingleNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CharacterTest_0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                item<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveChild</span><span class=\"token punctuation\">(</span>test_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                <span class=\"token comment\">// 删除全部</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                <span class=\"token comment\">//item.RemoveAll();</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token comment\">//item.RemoveAllAttributes();</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token comment\">/// 读取 XML</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReadXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The file does not exist: \"</span> <span class=\"token operator\">+</span> Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token class-name\">XmlDocument</span> xmlDoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token comment\">// 获取根节点</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token class-name\">XmlElement</span> root <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span>DocumentElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rootName: \"</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token comment\">// 遍历根节点的子节点</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XmlElement</span> item <span class=\"token keyword\">in</span> root<span class=\"token punctuation\">.</span>ChildNodes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token comment\">// 遍历属性</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XmlAttribute</span> attribute <span class=\"token keyword\">in</span> item<span class=\"token punctuation\">.</span>Attributes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attribute_\"</span> <span class=\"token operator\">+</span> attribute<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> attribute<span class=\"token punctuation\">.</span>InnerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token comment\">// 遍历子节点的子节点</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XmlElement</span> childNode <span class=\"token keyword\">in</span> item<span class=\"token punctuation\">.</span>ChildNodes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ChildNode_\"</span> <span class=\"token operator\">+</span> childNode<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> childNode<span class=\"token punctuation\">.</span>InnerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token function\">CreateXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token function\">AddXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token function\">ChangeXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token function\">ReadXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "配置文件",
                "配置文件"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/08/02/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/YAML/",
            "url": "https://maikire.xyz/2023/08/02/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/YAML/",
            "title": "YAML",
            "date_published": "2023-08-02T10:00:00.000Z",
            "content_html": "<h1 id=\"yaml\"><a class=\"anchor\" href=\"#yaml\">#</a> YAML</h1>\n<ul>\n<li>YAML 是专门用来写配置文件的语言（它可以是 &quot;YAML Ain't a Markup Language&quot; 亦或是 &quot;Yet Another Markup Language&quot;）</li>\n<li>YAML 数据能够存储在独立的.yml 文件中。</li>\n</ul>\n<h1 id=\"yaml语法\"><a class=\"anchor\" href=\"#yaml语法\">#</a> YAML 语法</h1>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ul>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进不允许使用 tab，只允许空格</li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>\n<li>#表示注释</li>\n</ul>\n<h2 id=\"支持的数据类型\"><a class=\"anchor\" href=\"#支持的数据类型\">#</a> 支持的数据类型</h2>\n<ul>\n<li>对象：键值对的集合，又称为映射 / 哈希 / 字典</li>\n<li>数组：一组按次序排列的值，又称为序列 / 列表</li>\n<li>纯量：单个的、不可再分的值</li>\n</ul>\n<h2 id=\"yaml数组\"><a class=\"anchor\" href=\"#yaml数组\">#</a> YAML 数组</h2>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#以 - 开头的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">-</span> value1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">-</span> value2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#多维数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"yaml纯量\"><a class=\"anchor\" href=\"#yaml纯量\">#</a> YAML 纯量</h2>\n<ul>\n<li>字符串</li>\n<li>布尔值</li>\n<li>整数</li>\n<li>浮点数</li>\n<li>Null</li>\n<li>时间</li>\n<li>日期</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">bool</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token boolean important\">TRUE</span>  <span class=\"token comment\">#true, True 都可以</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token boolean important\">FALSE</span>  <span class=\"token comment\">#false, False 都可以</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">float</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token number\">2.33</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token number\">6.8523015e+5</span>  <span class=\"token comment\">#可以使用科学计数法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token number\">233</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">-</span> 0b1110_1001  <span class=\"token comment\">#二进制表示</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">null</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">nodeName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'node'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span>  <span class=\"token comment\">#使用～表示 null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">string</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">-</span> 你好世界</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'Hello world'</span>  <span class=\"token comment\">#可以使用双引号或者单引号包裹特殊字符</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">-</span> line1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      line2  <span class=\"token comment\">#字符串可以拆成多行，每一行会被转化成一个空格</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token datetime number\">2233-02-33</span>  <span class=\"token comment\">#日期必须使用 ISO 8601 格式，即 yyyy-MM-dd</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">datetime</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token datetime number\">2233-02-33T12:02:33+08:00</span>  <span class=\"token comment\">#时间使用 ISO 8601 格式，时间和日期之间使用 T 连接，最后使用 + 代表时区</span></pre></td></tr></table></figure><h2 id=\"yaml对象\"><a class=\"anchor\" href=\"#yaml对象\">#</a> YAML 对象</h2>\n<ul>\n<li>格式 1：key: value</li>\n<li key1:=\"\" value1,=\"\" key2:=\"\" value2,=\"\" css-module=\".\">格式 2：key:</li>\n<li>格式 3：利用缩进表示层级关系</li>\n<li>格式 4：问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#格式 3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">child-key</span><span class=\"token punctuation\">:</span> value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">child-key2</span><span class=\"token punctuation\">:</span> value2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#格式 4：对象的属性是一个数组，对应的值也是一个数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">?</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">-</span> key1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">-</span> value1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">-</span> value2</pre></td></tr></table></figure><h2 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h2>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#&amp; 引用和 * 别名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#&amp; 用来建立锚点，&lt;&lt; 表示合并到当前数据，* 用来引用锚点。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">defaults</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;defaults</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">child-key1</span><span class=\"token punctuation\">:</span> value1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">child-key2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token important\">&amp;show</span> value2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">-</span> value3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token important\">*show</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*defaults</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#相当于</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">defaults</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">child-key1</span><span class=\"token punctuation\">:</span> value1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">child-key2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">-</span> value2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">-</span> value3</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">-</span> value2</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">child-key1</span><span class=\"token punctuation\">:</span> value1</pre></td></tr></table></figure>",
            "tags": [
                "配置文件",
                "配置文件"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/08/02/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/JSON/",
            "url": "https://maikire.xyz/2023/08/02/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/JSON/",
            "title": "JSON",
            "date_published": "2023-08-02T06:00:00.000Z",
            "content_html": "<h1 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h1>\n<ul>\n<li>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</li>\n<li>JSON 是轻量级的文本数据交换格式，它比 XML 更小、更快、更易解析</li>\n<li>JSON 独立于语言：JSON 使用 Javascript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。目前非常多的动态（PHP，JSP，.NET）编程语言都支持 JSON</li>\n<li>JSON 以特定的格式记录某些变量的值，可以用来给变量赋值或记录变量值</li>\n</ul>\n<h2 id=\"json与javascript\"><a class=\"anchor\" href=\"#json与javascript\">#</a> JSON 与 JavaScript</h2>\n<p>JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。所以，在 JavaScript 中不需要解析器，使用 eval () 函数就可以用 JSON 数据来生成 JavaScript 对象。</p>\n<h2 id=\"json语法\"><a class=\"anchor\" href=\"#json语法\">#</a> JSON 语法</h2>\n<ul>\n<li>保存数据：&quot;名称&quot;:&quot;值&quot;</li>\n<li>分隔数据：,</li>\n<li>保存对象：{}</li>\n<li>保存数组：[]（数组可以包含多个对象）</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"JSON语法\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.maikire.xyz\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"slogan\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"勿忘我\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.maikire.xyz\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.maikire.xyz\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"json解析\"><a class=\"anchor\" href=\"#json解析\">#</a> JSON 解析</h1>\n<h2 id=\"litjson\"><a class=\"anchor\" href=\"#litjson\">#</a> LitJson</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXRqc29uLm5ldC8=\">LitJson</span> 是一个快速高效的开源工具，可以帮助你处理有关 Json 的一切内容。</p>\n<h2 id=\"手动解析\"><a class=\"anchor\" href=\"#手动解析\">#</a> 手动解析</h2>\n<p><a href=\"https://maikire.xyz/2023/03/21/CSharp/CSharpToolClass/JSON%E8%A7%A3%E6%9E%90/index.html?_sw-precache=6b4e677277a4487e310c089f719c791d\">这篇文章</a>讲解了 JSON 解析的方法和 LitJson 的使用方法。</p>\n",
            "tags": [
                "配置文件",
                "配置文件"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/07/31/DesignPatterns/MVC%E6%A8%A1%E5%BC%8F/",
            "url": "https://maikire.xyz/2023/07/31/DesignPatterns/MVC%E6%A8%A1%E5%BC%8F/",
            "title": "MVC模式",
            "date_published": "2023-07-31T14:00:00.000Z",
            "content_html": "<h1 id=\"mvc模式\"><a class=\"anchor\" href=\"#mvc模式\">#</a> MVC 模式</h1>\n<p>Model-View-Controller（模型 - 视图 - 控制器）模式用于应用程序的分层开发。</p>\n<ul>\n<li>Model（模型）：模型代表一个存取数据的对象，在数据变化时更新控制器。</li>\n<li>View（视图）：视图代表模型包含的数据的可视化。</li>\n<li>Controller（控制器）：控制器作用于模型和视图上，使视图与模型分离开。它控制数据流向模型对象，并在数据变化时更新视图。</li>\n</ul>\n<h1 id=\"类图\"><a class=\"anchor\" href=\"#类图\">#</a> 类图</h1>\n<p><img data-src=\"ClassDiagram.png\" alt=\"img\" /></p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<h2 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MVCPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 模型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Model</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/// 更改数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"name\">&lt;/param></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"视图\"><a class=\"anchor\" href=\"#视图\">#</a> 视图</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MVCPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 视图</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">View</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Model: \"</span> <span class=\"token operator\">+</span> model<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"控制器\"><a class=\"anchor\" href=\"#控制器\">#</a> 控制器</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MVCPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 控制器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Model</span> MyModel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">View</span> MyView<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> myModel<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> myView<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            MyModel <span class=\"token operator\">=</span> myModel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            MyView <span class=\"token operator\">=</span> myView<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// 更改数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"name\">&lt;/param></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetModelName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            MyModel<span class=\"token punctuation\">.</span><span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/// 更新视图</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UpdateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            MyView<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span>MyModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MVCPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Controller</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Model_0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            controller<span class=\"token punctuation\">.</span><span class=\"token function\">UpdateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            controller<span class=\"token punctuation\">.</span><span class=\"token function\">SetModelName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Model_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            controller<span class=\"token punctuation\">.</span><span class=\"token function\">UpdateView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note default\">\n<p>运行结果：<br />\nModel: Model_0<br />\nModel: Model_1</p>\n</div>\n",
            "tags": [
                "DesignPatterns",
                "DesignPatterns"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/07/31/DesignPatterns/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "url": "https://maikire.xyz/2023/07/31/DesignPatterns/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/",
            "title": "访问者模式",
            "date_published": "2023-07-31T11:00:00.000Z",
            "content_html": "<h1 id=\"访问者模式\"><a class=\"anchor\" href=\"#访问者模式\">#</a> 访问者模式</h1>\n<p>属于行为型模式。<br />\n表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>\n<p><span class=\"label info\">适用性：</span></p>\n<ul>\n<li>主要目的是将数据结构与数据操作分离。适用于稳定的数据结构，而算法是可以多变的。</li>\n<li>访问者模式的优点就是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者。访问者模式将有关的行为集中到一个访问者对象中。</li>\n<li>访问者模式的缺点是使增加新的数据结构变得困难了。</li>\n<li>访问者模式不常用。因为数据结构不变化的情况很少，所以使用访问者模式的机会不多。</li>\n</ul>\n<h1 id=\"类图\"><a class=\"anchor\" href=\"#类图\">#</a> 类图</h1>\n<p><img data-src=\"ClassDiagram.png\" alt=\"img\" /></p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<h2 id=\"访问者\"><a class=\"anchor\" href=\"#访问者\">#</a> 访问者</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_VisitorPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 访问者</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Visitor</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 访问</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ToVisit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_VisitorPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Visitor_0</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Visitor</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ToVisit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Visitor_0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"被访问者\"><a class=\"anchor\" href=\"#被访问者\">#</a> 被访问者</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_VisitorPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 组件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 组件的行为</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"visitor\">&lt;/param></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Work</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Visitor</span> visitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_VisitorPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component_0</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Component</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Work</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Visitor</span> visitor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            visitor<span class=\"token punctuation\">.</span><span class=\"token function\">ToVisit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"管理被访问者\"><a class=\"anchor\" href=\"#管理被访问者\">#</a> 管理被访问者</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_VisitorPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 组件管理器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentManager</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 储存所有的组件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Component<span class=\"token punctuation\">></span></span> Components<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">ComponentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            Components <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Component<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/// 遍历所有的组件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"visitor\">&lt;/param></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Visitor</span> visitor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> component <span class=\"token keyword\">in</span> Components<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                component<span class=\"token punctuation\">.</span><span class=\"token function\">Work</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_VisitorPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">ComponentManager</span> manager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ComponentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Component</span> component <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Component_0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            manager<span class=\"token punctuation\">.</span>Components<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">Visitor</span> visitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Visitor_0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            manager<span class=\"token punctuation\">.</span><span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note default\">\n<p>运行结果：<br />\nVisitor_0</p>\n</div>\n",
            "tags": [
                "DesignPatterns",
                "DesignPatterns"
            ]
        },
        {
            "id": "https://maikire.xyz/2023/07/31/DesignPatterns/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/",
            "url": "https://maikire.xyz/2023/07/31/DesignPatterns/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/",
            "title": "解释器模式",
            "date_published": "2023-07-31T09:00:00.000Z",
            "content_html": "<h1 id=\"解释器模式\"><a class=\"anchor\" href=\"#解释器模式\">#</a> 解释器模式</h1>\n<p>属于行为型模式。<br />\n给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>\n<p><span class=\"label info\">适用性：</span></p>\n<ul>\n<li>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</li>\n<li>当有一个语言需要解释执行，并且你可以将该语言中的句子表示为一个抽象语法树时，可以使用解释器模式。</li>\n<li>易扩展，易于实现简单文法。</li>\n<li>对于复杂的文法比较难维护和管理。当文法非常复杂时建议使用其他的技术（语法分析程序或编译生成器）</li>\n</ul>\n<h1 id=\"类图\"><a class=\"anchor\" href=\"#类图\">#</a> 类图</h1>\n<p><img data-src=\"ClassDiagram.png\" alt=\"img\" /></p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<h2 id=\"解释器\"><a class=\"anchor\" href=\"#解释器\">#</a> 解释器</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_InterpreterPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 抽象解释器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Expression</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/// 解释</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/// &lt;param name=\"content\">&lt;/param></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Interpret</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_InterpreterPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 终结符表达式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// 规定：';' 是终结符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TerminalExpression</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Expression</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Interpret</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">';'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_InterpreterPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// &lt;summary></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/// 非终结符表达式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/// &lt;/summary></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NonterminalExpression</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Expression</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Interpret</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">BehavioralPatterns_InterpreterPattern</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Expression</span> terminalExpression <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Expression</span> nonterminalExpression <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonterminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"a;b;c\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            terminalExpression<span class=\"token punctuation\">.</span><span class=\"token function\">Interpret</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nonterminalExpression<span class=\"token punctuation\">.</span><span class=\"token function\">Interpret</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note default\">\n<p>运行结果：<br />\nA B C</p>\n</div>\n",
            "tags": [
                "DesignPatterns",
                "DesignPatterns"
            ]
        }
    ]
}